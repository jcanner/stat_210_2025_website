---
title: "Untitled"
execute: 
  eval: false
---


## Application exercise

::: {.callout-tip title="Reminder to reflect"}
As you work through this application exercise, make note: what is challenging? What feels comfortable? What insights do you gain from collaborating with others? What ideas/strategies do you want to remember going forward?
:::

**Goal:** In the `diamonds` dataset, we want to understand the relationship between `price` and size (`carat`). We want to explore variation along two choices:

1. The variables included in the model. We'll explore 3 sets of variables:
    - No further variables (just `price` and `carat`)
    - Adjusting for `cut`
    - Adjusting for `cut` and `clarity`
    - Adjusting for `cut`, `clarity`, and `color`
2. Whether or not to remove outliers in the `carat` variable. We'll define outliers as cases whose `carat` is over 3 SDs away from the mean.


**Exercise 1:** Use `crossing()` to create the data frame of argument combinations for our analyses. Note that you can create a list of **formula** objects in R with `c(y ~ x1, y ~ x1 + x2)`.

<details>
  <summary>Solution</summary>
  
```{r}
df_arg_combos <- crossing(
    mod_formula = c(price ~ carat, 
                    price ~ carat + cut,  
                    price ~ carat + cut + clarity,  
                    price ~ carat + cut + clarity + color),
    remove_outliers = c(TRUE, FALSE)
    )

df_arg_combos
```

</details>

**Exercise 2:** Write a function that removes outliers in a dataset. The user should be able to supply the dataset, the variable to remove outliers in, and a threshold on the number of SDs away from the mean used to define outliers.

<details>
  <summary>Solution</summary>
  
```{r}
remove_outliers <- function(df, what_var, sd_thresh) {
    df %>% 
        mutate(zscore = ({{ what_var }} - mean({{ what_var}}, na.rm = TRUE))/sd({{ what_var }}, na.rm = TRUE)) %>%
        filter(zscore <= sd_thresh)
}
```

</details>

**Exercise 3:** Write a function that implements the analysis versions specifically for the `diamonds` dataset. The user will not specify the dataset as an argument but will input the model formula and whether or not to remove outliers (cases whose `carat` is over 3 SDs away from the mean).

<details>
  <summary>Solution</summary>
  
```{r}
fit_model <- function(mod_formula, remove_outliers) {
    if (remove_outliers) {
        diamonds_clean <- remove_outliers(diamonds, what_var = carat, sd_thresh = 3)
    } else {
        diamonds_clean <- diamonds
    }
    
    lm(mod_formula, data = diamonds_clean)
}
```

</details>

<!-- **Exercise 4:** Write a `for` loop that stores the fitted linear models from all versions of the analysis. -->

<!-- Note that you can pull out the contents of a single data frame column in many ways. For a data frame `df` with a variable named `x`: -->

<!-- - `df$x` -->
<!-- - `df %>% pull(x)` -->
<!-- - `df[["x"]]` -->

<!-- <details> -->
<!--   <summary>Solution</summary> -->

<!-- ```{r} -->
<!-- lin_mod_res_for <- vector(mode = "list", length = nrow(df_arg_combos)) -->

<!-- for (i in seq_along(lin_mod_res_for)) { -->
<!--     this_formula <- df_arg_combos$mod_formula[[i]] # Double [[ for the **list** of formulas -->
<!--     this_remove_outliers <- df_arg_combos$remove_outliers[i] # Single [ for the **atomic vector** of logicals -->
<!--     lin_mod_res_for[[i]] <- fit_model( -->
<!--         mod_formula = this_formula, -->
<!--         remove_outliers = this_remove_outliers -->
<!--     ) -->
<!-- } -->
<!-- ``` -->

<!-- </details> -->

**Exercise 5:** Use `pmap()` from `purrr` to replicate what you did with the `for` loop.

<details>
  <summary>Solution</summary>
  
```{r}
lin_mod_res_pmap <- pmap(df_arg_combos, fit_model)
```

</details>
