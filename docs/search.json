[
  {
    "objectID": "slides/week-2/week-2-intro-R-quarto.html#data-types",
    "href": "slides/week-2/week-2-intro-R-quarto.html#data-types",
    "title": "Intro to R",
    "section": "Data Types",
    "text": "Data Types\n\nA value is a basic unit of stuff that a program works with.\nValues are allowed to have different data types:\n\n\n\nlogical / boolean: FALSE / TRUE or 0 / 1 values.\n\n\n\n\ninteger: whole numbers.\n\n\n\n\ndouble / float / numeric: decimal numbers.\n\n\n\n\ncharacter / string - text values."
  },
  {
    "objectID": "slides/week-2/week-2-intro-R-quarto.html#variables",
    "href": "slides/week-2/week-2-intro-R-quarto.html#variables",
    "title": "Intro to R",
    "section": "Variables",
    "text": "Variables\n\nare names that refer to values.\n\n\n\n\nA variable is like a container that holds something - when you refer to the container, you get whatever is stored inside.\nWe assign values to variables using the syntax object_name &lt;- value.\n\nThis can be read as “object name gets value.”\n\n\n\n\n\n\nmessage &lt;- \"So long and thanks for all the fish\"\nyear &lt;- 2025\nthe_answer &lt;- 42.5\nearth_demolished &lt;- FALSE"
  },
  {
    "objectID": "slides/week-2/week-2-intro-R-quarto.html#data-structures",
    "href": "slides/week-2/week-2-intro-R-quarto.html#data-structures",
    "title": "Intro to R",
    "section": "Data Structures",
    "text": "Data Structures\n\nHomogeneousHeterogeneous\n\n\n\nevery element has the same data type\n\n\nVector: a one-dimensional column of homogeneous data.\nMatrix: the next step after a vector - it’s a set of homogenous data arranged in a two-dimensional, rectangular format.\n\n\n\n\nelements can be of different types\n\n\nList: a one-dimensional column of heterogeneous data.\nDataframe: a two-dimensional set of heterogeneous data arranged in a rectangular format."
  },
  {
    "objectID": "slides/week-2/week-2-intro-R-quarto.html#indexing",
    "href": "slides/week-2/week-2-intro-R-quarto.html#indexing",
    "title": "Intro to R",
    "section": "Indexing",
    "text": "Indexing\nWe use square brackets ([]) to access elements within data structures.\n\nIn R, we start indexing from 1.\n\n\nVectorMatrixListDataframe\n\n\n\nvec[4]    # 4th element\nvec[1:3]  # first 3 elements\n\n\n\n\nmat[2, 6]  # element in row 2, col 6\nmat[ , 3]   # all elements in col 3\n\n\n\n\nli[[5]]    # 5th element\nli$elementName # all elements in \"elementName\"\n\n\n\n\ndf[1, 2]     # element in row 1, col 2\ndf[17, ]     # all elements in row 17\ndf$colName  # all elements in the col named \"colName\""
  },
  {
    "objectID": "slides/week-2/week-2-intro-R-quarto.html#logic",
    "href": "slides/week-2/week-2-intro-R-quarto.html#logic",
    "title": "Intro to R",
    "section": "Logic",
    "text": "Logic\nWe can combine logical statements using and, or, and not.\n\n(X AND Y) requires that both X and Y are true.\n(X OR Y) requires that one of X or Y is true.\n(NOT X) is true if X is false, and false if X is true.\n\n\n\nx &lt;- c(TRUE, FALSE, TRUE, FALSE)\ny &lt;- c(TRUE, TRUE, FALSE, FALSE)\n\n\nAndOrNot\n\n\n\nx & y\n\n[1]  TRUE FALSE FALSE FALSE\n\n\n\n\n\nx | y\n\n[1]  TRUE  TRUE  TRUE FALSE\n\n\n\n\n\n!x\n\n[1] FALSE  TRUE FALSE  TRUE"
  },
  {
    "objectID": "slides/week-2/week-2-intro-R-quarto.html#did-you-leave-off-a-parenthesis",
    "href": "slides/week-2/week-2-intro-R-quarto.html#did-you-leave-off-a-parenthesis",
    "title": "Intro to R",
    "section": "Did you leave off a parenthesis?",
    "text": "Did you leave off a parenthesis?\n\nseq(from = 1, to = 10, by = 1\n\nseq(from = 1, to = 10, by = 1\n\nError in parse(text = input): &lt;text&gt;:2:0: unexpected end of input\n1: seq(from = 1, to = 10, by = 1\n   ^\n\n\n\n\n\nseq(from = 1, to = 10, by = 1)\n\n [1]  1  2  3  4  5  6  7  8  9 10"
  },
  {
    "objectID": "slides/week-2/week-2-intro-R-quarto.html#did-you-leave-off-a-comma",
    "href": "slides/week-2/week-2-intro-R-quarto.html#did-you-leave-off-a-comma",
    "title": "Intro to R",
    "section": "Did you leave off a comma?",
    "text": "Did you leave off a comma?\n\nseq(from = 1, to = 10 by = 1)\n\nseq(from = 1, to = 10 by = 1)\n\nError in parse(text = input): &lt;text&gt;:1:23: unexpected symbol\n1: seq(from = 1, to = 10 by\n                          ^\n\n\n\n\n\nseq(from = 1, to = 10, by = 1)\n\n [1]  1  2  3  4  5  6  7  8  9 10"
  },
  {
    "objectID": "slides/week-2/week-2-intro-R-quarto.html#are-you-using-the-right-function-name",
    "href": "slides/week-2/week-2-intro-R-quarto.html#are-you-using-the-right-function-name",
    "title": "Intro to R",
    "section": "Are you using the right function name?",
    "text": "Are you using the right function name?\n\nsequence(from = 1, to = 10, by = 1)\n\nsequence(from = 1, to = 10, by = 1)\n\nError in sequence.default(from = 1, to = 10, by = 1): argument \"nvec\" is missing, with no default\n\n\n\n\n\nseq(from = 1, to = 10, by = 1)\n\n [1]  1  2  3  4  5  6  7  8  9 10"
  },
  {
    "objectID": "slides/week-2/week-2-intro-R-quarto.html#are-you-using-the-right-input-that-the-function-expects",
    "href": "slides/week-2/week-2-intro-R-quarto.html#are-you-using-the-right-input-that-the-function-expects",
    "title": "Intro to R",
    "section": "Are you using the right input that the function expects?",
    "text": "Are you using the right input that the function expects?\n\nsqrt(“1”)\n\nsqrt(\"1\")\n\nError in sqrt(\"1\"): non-numeric argument to mathematical function\n\n\n\n\n\nsqrt(1)\n\n[1] 1"
  },
  {
    "objectID": "slides/week-2/week-2-intro-R-quarto.html#are-you-expecting-the-right-output-of-the-function",
    "href": "slides/week-2/week-2-intro-R-quarto.html#are-you-expecting-the-right-output-of-the-function",
    "title": "Intro to R",
    "section": "Are you expecting the right output of the function?",
    "text": "Are you expecting the right output of the function?\n\nmy_obj(5)\n\nmy_obj &lt;- seq(from = 1, to = 10, by = 1)\n\nmy_obj(5)\n\nError in my_obj(5): could not find function \"my_obj\"\n\n\n\n\n\nmy_obj[5]\n\n[1] 5"
  },
  {
    "objectID": "slides/week-2/week-2-intro-R-quarto.html#messages",
    "href": "slides/week-2/week-2-intro-R-quarto.html#messages",
    "title": "Intro to R",
    "section": "Messages",
    "text": "Messages\nJust because you see scary red text, this does not mean something went wrong! This is just R communicating with you.\n\n\nFor example, you will often see:\n\nlibrary(lme4)\n\nLoading required package: Matrix"
  },
  {
    "objectID": "slides/week-2/week-2-intro-R-quarto.html#warnings",
    "href": "slides/week-2/week-2-intro-R-quarto.html#warnings",
    "title": "Intro to R",
    "section": "Warnings",
    "text": "Warnings\nOften, R will give you a warning.\n\nThis means that your code did run…\n…but you probably want to make sure it succeeded.\n\n\n\n\n\n\nmy_vec &lt;- c(\"a\", \"b\", \"c\")\n\nmy_new_vec &lt;- as.integer(my_vec)\n\nWarning: NAs introduced by coercion\n\n\n\n\n\n\nDoes this look right?\n\nmy_new_vec\n\n[1] NA NA NA"
  },
  {
    "objectID": "slides/week-2/week-2-intro-R-quarto.html#errors",
    "href": "slides/week-2/week-2-intro-R-quarto.html#errors",
    "title": "Intro to R",
    "section": "Errors",
    "text": "Errors\nIf the word Error appears in your message from R, then you have a problem.\nThis means your code could not run!\n\n\n\nmy_vec &lt;- c(\"a\", \"b\", \"c\")\n\nmy_new_vec &lt;- my_vec + 1\n\nError in my_vec + 1: non-numeric argument to binary operator"
  },
  {
    "objectID": "slides/week-2/week-2-intro-R-quarto.html#r-says",
    "href": "slides/week-2/week-2-intro-R-quarto.html#r-says",
    "title": "Intro to R",
    "section": "R says…",
    "text": "R says…\n\nError: Object some_obj not found.\n\n\nIt probably means…\n\nYou haven’t run the code to create some_obj OR you have a typo in the name!\n\n\n\n\n\nsome_ojb &lt;- 1:10\n\nmean(some_obj)\n\nError in h(simpleError(msg, call)): error in evaluating the argument 'x' in selecting a method for function 'mean': object 'some_obj' not found"
  },
  {
    "objectID": "slides/week-2/week-2-intro-R-quarto.html#r-says-1",
    "href": "slides/week-2/week-2-intro-R-quarto.html#r-says-1",
    "title": "Intro to R",
    "section": "R says…",
    "text": "R says…\n\nError: Object of type ‘closure’ is not subsettable.\n\n\nIt probably means…\n\nOops, you tried to use square brackets on a function.\n\n\n\n\n\nmean[1, 2]\n\nError in mean[1, 2]: object of type 'closure' is not subsettable"
  },
  {
    "objectID": "slides/week-2/week-2-intro-R-quarto.html#r-says-2",
    "href": "slides/week-2/week-2-intro-R-quarto.html#r-says-2",
    "title": "Intro to R",
    "section": "R says…",
    "text": "R says…\n\nError: Non-numeric argument to binary operator.\n\n\nIt probably means…\n\nYou tried to do math on data that isn’t numeric.\n\n\n\n\n\n\"a\" + 2\n\nError in \"a\" + 2: non-numeric argument to binary operator"
  },
  {
    "objectID": "slides/week-2/week-2-intro-R-quarto.html#what-if-none-of-these-solved-my-error",
    "href": "slides/week-2/week-2-intro-R-quarto.html#what-if-none-of-these-solved-my-error",
    "title": "Intro to R",
    "section": "What if none of these solved my error?",
    "text": "What if none of these solved my error?\n\nLook at the help file for the function! (e.g., ?group_by)\nWhen all else fails, Google your error message or ask ChatGPT!\n\n\nLeave out the specifics.\nInclude the name(s) of the function(s) you are using."
  },
  {
    "objectID": "slides/week-2/week-2-intro-R-quarto.html#try-it",
    "href": "slides/week-2/week-2-intro-R-quarto.html#try-it",
    "title": "Intro to R",
    "section": "Try it…",
    "text": "Try it…\nWhat’s wrong here?\n\nmatrix(\n  c(\"a\", \"b\", \"c\", \"d\"), \n  num_row = 2\n  )\n\nError in matrix(c(\"a\", \"b\", \"c\", \"d\"), num_row = 2): unused argument (num_row = 2)\n\n\n\n\nThe documentation says…\nmatrix(data = NA, nrow = 1, ncol = 1, byrow = FALSE,\n       dimnames = NULL)"
  },
  {
    "objectID": "slides/week-2/week-2-intro-R-quarto.html#scripts",
    "href": "slides/week-2/week-2-intro-R-quarto.html#scripts",
    "title": "Intro to R",
    "section": "Scripts",
    "text": "Scripts\n\nScripts (File &gt; New File &gt; R Script) are files of code that are meant to be run on their own.\n\n\n\nScripts can be run in RStudio by clicking the Run button at the top of the editor window when the script is open.\nYou can also run code interactively in a script by:\n\nhighlighting lines of code and hitting run.\nplacing your cursor on a line of code and hitting run.\nplacing your cursor on a line of code and hitting ctrl + enter or command + enter."
  },
  {
    "objectID": "slides/week-2/week-2-intro-R-quarto.html#notebooks",
    "href": "slides/week-2/week-2-intro-R-quarto.html#notebooks",
    "title": "Intro to R",
    "section": "Notebooks",
    "text": "Notebooks\nNotebooks are an implementation of literate programming.\n\nThey allow you to integrate code, output, text, images, etc. into a single document.\nE.g.,\n\nQuarto notebook\nR Markdown notebook\nJupyter notebook\n\n\nWe love notebooks because they help us produce a reproducible analysis!"
  },
  {
    "objectID": "slides/week-2/week-2-intro-R-quarto.html#what-is-markdown",
    "href": "slides/week-2/week-2-intro-R-quarto.html#what-is-markdown",
    "title": "Intro to R",
    "section": "What is Markdown?",
    "text": "What is Markdown?\nMarkdown is a markup language.\nIt uses special symbols and formatting to make pretty documents.\n\n\n*italics* – makes italics\n**bold** – makes bold text\n# – makes headers\n! – includes images or HTML links\n&lt; &gt; – embeds URLs\n\n\n\nMarkdown files have the .md extension."
  },
  {
    "objectID": "slides/week-2/week-2-intro-R-quarto.html#what-is-quarto",
    "href": "slides/week-2/week-2-intro-R-quarto.html#what-is-quarto",
    "title": "Intro to R",
    "section": "What is Quarto?",
    "text": "What is Quarto?\nQuarto unifies and extends the R Markdown ecosystem.\n\n\n\n\n\n\n\n\n\nQuarto files have the .qmd extension."
  },
  {
    "objectID": "slides/week-2/week-2-intro-R-quarto.html#highlights-of-quarto",
    "href": "slides/week-2/week-2-intro-R-quarto.html#highlights-of-quarto",
    "title": "Intro to R",
    "section": "Highlights of Quarto",
    "text": "Highlights of Quarto\n\nConsistent implementation of attractive and handy features across outputs:\n\nE.g., tabsets, code-folding, syntax highlighting, etc.\n\nMore accessible defaults and better support for accessibility.\nGuardrails that are helpful when learning:\n\nE.g., YAML completion, informative syntax errors, etc.\n\nSupport for other languages like Python, Julia, Observable, and more."
  },
  {
    "objectID": "slides/week-2/week-2-intro-R-quarto.html#quarto-formats",
    "href": "slides/week-2/week-2-intro-R-quarto.html#quarto-formats",
    "title": "Intro to R",
    "section": "Quarto Formats",
    "text": "Quarto Formats\nQuarto makes moving between outputs straightforward.\n\nAll that needs to change between these formats is a few lines in the front matter (YAML)!\n\n\n\nDocument\ntitle: \"Lesson 1\"\nformat: html\nPresentation\ntitle: \"Lesson 1\"\nformat: revealjs\n\nWebsite\nproject:\n  type: website\n\nwebsite: \n  navbar: \n    left:\n      - lesson-1.qmd"
  },
  {
    "objectID": "slides/week-2/week-2-intro-R-quarto.html#quarto-components",
    "href": "slides/week-2/week-2-intro-R-quarto.html#quarto-components",
    "title": "Intro to R",
    "section": "Quarto Components",
    "text": "Quarto Components\n\n\nHow does Quarto know that a section of text should be interpreted as R code?"
  },
  {
    "objectID": "slides/week-2/week-2-intro-R-quarto.html#r-code-options-in-quarto",
    "href": "slides/week-2/week-2-intro-R-quarto.html#r-code-options-in-quarto",
    "title": "Intro to R",
    "section": "R Code Options in Quarto",
    "text": "R Code Options in Quarto\nR code chunk options are included at the top of each code chunk, prefaced with a #| (hashpipe).\n\nThese options control how the following code is run and reported in the final Quarto document.\nSome R code options can also be included in the front matter (YAML) which would be applied globally to the entire document."
  },
  {
    "objectID": "slides/week-2/week-2-intro-R-quarto.html#r-code-options-in-quarto-1",
    "href": "slides/week-2/week-2-intro-R-quarto.html#r-code-options-in-quarto-1",
    "title": "Intro to R",
    "section": "R Code Options in Quarto",
    "text": "R Code Options in Quarto"
  },
  {
    "objectID": "slides/week-2/week-2-intro-R-quarto.html#chunk-option-completion-in-quarto",
    "href": "slides/week-2/week-2-intro-R-quarto.html#chunk-option-completion-in-quarto",
    "title": "Intro to R",
    "section": "Chunk Option Completion in Quarto",
    "text": "Chunk Option Completion in Quarto"
  },
  {
    "objectID": "slides/week-2/week-2-intro-R-quarto.html#rendering-your-quarto-document",
    "href": "slides/week-2/week-2-intro-R-quarto.html#rendering-your-quarto-document",
    "title": "Intro to R",
    "section": "Rendering your Quarto Document",
    "text": "Rendering your Quarto Document\nTo take your .qmd file and make it look pretty, you have to render it."
  },
  {
    "objectID": "slides/week-2/week-2-intro-R-quarto.html#rendering-your-quarto-document-1",
    "href": "slides/week-2/week-2-intro-R-quarto.html#rendering-your-quarto-document-1",
    "title": "Intro to R",
    "section": "Rendering your Quarto Document",
    "text": "Rendering your Quarto Document\nQuarto CLI (command line interface) orchestrates each step of rendering:\n\nProcess the executable code chunks with either knitr or jupyter.\nConvert the resulting Markdown file to the desired output."
  },
  {
    "objectID": "slides/week-2/week-2-intro-R-quarto.html#rendering-your-quarto-document-2",
    "href": "slides/week-2/week-2-intro-R-quarto.html#rendering-your-quarto-document-2",
    "title": "Intro to R",
    "section": "Rendering your Quarto Document",
    "text": "Rendering your Quarto Document\nWhen you click Render:\n\n\n\nYour file is saved.\nThe R code written in your .qmd file gets run in order.\n\n\nIt starts from scratch, even if you previously ran some of the code in RStudio.\n\n\nA new file is created.\n\n\nIf your Quarto file is called “Lab1.qmd”, then a file called “Lab1.html” will be created.\nThis will be saved in the same folder as “Lab1.qmd”."
  },
  {
    "objectID": "group-activities/week-3/pa2-vc-intro-tidy-solution.html",
    "href": "group-activities/week-3/pa2-vc-intro-tidy-solution.html",
    "title": "Practice Activity 2: Modernizing the Process",
    "section": "",
    "text": "Today you will be creating and manipulating vectors, lists, and data frames to uncover a top secret message using the tidyverse. First thing is to include the package in a setup chunk above!\nThis task is complex. It requires many different types of abilities. Everyone will be good at some of these abilities but nobody will be good at all of them. In order to solve this puzzle, you will need to use the skills of each member of your group."
  },
  {
    "objectID": "group-activities/week-3/pa2-vc-intro-tidy-solution.html#groupwork-protocols",
    "href": "group-activities/week-3/pa2-vc-intro-tidy-solution.html#groupwork-protocols",
    "title": "Practice Activity 2: Modernizing the Process",
    "section": "Groupwork Protocols",
    "text": "Groupwork Protocols\nDuring the Practice Activity, you and your partner will alternate between two roles—Developer and Coder.\nWhen you are the Developer, you will type into the Quarto document in RStudio. However, you do not type your own ideas. Instead, you type what the Coder tells you to type. You are permitted to ask the Coder clarifying questions, and, if both of you have a question, you are permitted to ask the professor. You are expected to run the code provided by the Coder and, if necessary, to work with the Coder to debug the code. Once the code runs, you are expected to collaborate with the Coder to write code comments that describe the actions taken by your code.\nWhen you are the Coder, you are responsible for reading the instructions / prompts and directing the Developer what to type in the Quarto document. You are responsible for managing the resources your group has available to you (e.g., cheatsheet, textbook). If necessary, you should work with the Developer to debug the code you specified. Once the code runs, you are expected to collaborate with the Developer to write code comments that describe the actions taken by your code.\n\nGroup Norms\nRemember, your group is expected to adhere to the following norms:\n\nThink and work together. Do not divide the work.\nYou are smarter together.\nNo cross-talk with other groups."
  },
  {
    "objectID": "group-activities/week-3/pa2-vc-intro-tidy-solution.html#part-zero-accessing-the-practice-activity",
    "href": "group-activities/week-3/pa2-vc-intro-tidy-solution.html#part-zero-accessing-the-practice-activity",
    "title": "Practice Activity 2: Modernizing the Process",
    "section": "Part Zero: Accessing the Practice Activity",
    "text": "Part Zero: Accessing the Practice Activity\n\nTo access the activity and get it ready to share:\n\nLog into your CSUMB R Server Account.\n\nChoose one partner (with the closest upcoming birthday) to create an R Project called “pa-1-intro-quarto”.\n\nUpload the pa1-base-r.qmd into the project folder.\n\nShare the project with the other partner, go to File &gt; Share Project &gt; Type partner’s username &gt; Click Add\n\n\n\nFor each code chunk, add a #| label: and a #comment describing what the code chunk is doing. Be sure to check that all spacing is appropriate as well!"
  },
  {
    "objectID": "group-activities/week-3/pa2-vc-intro-tidy-solution.html#part-one-setup",
    "href": "group-activities/week-3/pa2-vc-intro-tidy-solution.html#part-one-setup",
    "title": "Practice Activity 2: Modernizing the Process",
    "section": "Part One: Setup",
    "text": "Part One: Setup\nEach of the following R chunks will cause an error and / or do the desired task incorrectly. Find the mistake, and correct it to complete the intended action.\n\nCreate vectors containing the upper case letters, lower case letters, and some punctuation marks. add a label that indicate this code chunk creates the vectors of letters and punctuation.\n\n\nlower_case &lt;- c(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\",\n                \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\")\n\nupper_case &lt;- c(\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\",\n                \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\")\n\npunctuation &lt;- c(\".\", \",\", \"!\", \"?\", \"'\", '\"', \"(\", \")\", \" \", \"-\", \";\", \":\")\n\nUsing the above, we can complete the following 5 steps within a few lines of code using the tidyverse.\n\nMake one long vector containing all the symbols.\nTurn the my_symbols vector into a data frame, with one column named “symbol”.\nFind the total number of symbols we have in our data frame.\nCreate a new variable in your dataframe that assigns a number to each symbol.\n\n\n# add comment here\n\nmy_symbols &lt;- tibble(symbols = c(lower_case, \n                                 upper_case, \n                                 punctuation)) |&gt; \n              mutate(num = row_number())"
  },
  {
    "objectID": "group-activities/week-3/pa2-vc-intro-tidy-solution.html#part-two-decoding-the-secret-message.",
    "href": "group-activities/week-3/pa2-vc-intro-tidy-solution.html#part-two-decoding-the-secret-message.",
    "title": "Practice Activity 2: Modernizing the Process",
    "section": "Part Two: Decoding the secret message.",
    "text": "Part Two: Decoding the secret message.\nThis chunk will load up the encoded secret message as a vector:\n\n#extracts the code from a dropbox file and pulls out generic first vector X1\nlibrary(readr)\ntop_secret &lt;- read_csv(\"https://www.dropbox.com/s/k72h1zewk4gtqep/PA_Secret_Code?dl=1\", \n                       col_names = FALSE)$X1\n\nBy altering this top secret set of numbers, you will be able to create a message. Write your own code to complete the steps, in the order given below, but replace all of this mess with the tidyverse code below.\n\nAdd 14 to every number.\nMultiply every number by 18, then subtract 257.\nUse the exp() function to exponentiate every number.\nSquare every number.\n\n\n#add comment here\n#there are several ways to do this, the way below doesn't overwrite any column so you \"don't lose work\"\n\ncode_break &lt;- top_secret |&gt; \n  as_tibble() |&gt; \n  mutate(step6 = top_secret + 14,\n         step7 = step6*18 - 257,\n         step8 = exp(step7),\n         step9 = step8^2)\n\nhead(code_break) #see the first few lines here\n\nCheckpoint: Headquarters has informed you that at this stage of decoding, there should be 352 numbers in the secret message that are below 17. Write the code to verify that this is true for your top_secret object!\nHint: This is what is called a “relational” comparison, where you compare an object to a number and R will give you a vector of TRUEs and FALSEs based on whether the comparison is / is not met. You can then use these TRUEs and FALSEs as numbers, since TRUE = 1 and FALSE = 0 in R land.\n\n#add comment here\n\ncode_break |&gt; \n  summarize(total = sum(step9 &lt; 17))\n\n\n\nNext, carry out the following steps:\n\nTurn your vector of numbers into a matrix with 5 columns.\n\n\n#add comment here\ncode_matrix &lt;- code_break |&gt; \n  pull(step9) |&gt; \n  matrix(ncol = 5) |&gt; \n  as_tibble(column_name = TRUE) |&gt; \n  mutate(id = row_number())\n\n\nSeparately from your top secret numbers, create a vector of all the even numbers between 1 and 382. Name it “evens”. That is, “evens” should contain 2, 4, 6, 8 …, 382.\n\n\n#add comment here\nevens &lt;- seq(from = 2, to = 382, by = 2)\n\n\nSubtract the “evens” vector from the first column of your secret message matrix.\nSubtract 100 from all numbers 18-24th rows of the 3rd column.\nMultiply all numbers in the 4th and 5th column by 2.\nTurn your matrix back into a vector.\n\n\n#add comment here\ncode_vector &lt;- code_matrix |&gt; \n  mutate(V1 = V1 - evens) |&gt; \n  mutate(V3 = if_else(id %in% 18:24, V3 - 100, V3)) |&gt; \n  mutate(V4 = V4*2, \n         V5 = V5*2) |&gt; \n  select(-id) |&gt; \n  pivot_longer(V1:V5, names_to = \"column\", values_to = \"code\") |&gt; \n  arrange(column) |&gt; \n  mutate(id = row_number())\n\nCheckpoint: Headquarters has informed you that at this stage of decoding, all numbers in indices 500 and beyond are below 100. Write the code to verify that this is true for your top_secret object!\nHint: Use a relational comparison similar to what you used in the last checkpoint, but here you will need to subset values from your vector!\n\n#code to verify that indices 500 and beyond have values **below** 100\ncode_vector |&gt; \n  summarize(beyond = sum(if_else(id %in% 500:max(id) &gt;= 100, TRUE, FALSE))) \n\n\n\nTake the square root of all numbers in indices 38 to 465.\nUse the round() function to round all numbers to the nearest whole number.\nReplace all instances of the number 39 with 20. Hint: Step 18 requires another relational comparison, but this time it is equality. Equality in R is checked with a double equal sign rather than a single equal sign\n\n\n#add comment here\ncode_vector_update &lt;- code_vector |&gt; \n  mutate(code = if_else(id %in% 38:465, sqrt(code), code)) |&gt; \n  mutate(code = round(code, digits = 0)) |&gt; \n  mutate(code = if_else(code == 39, 20, code))\n\nCheckpoint: Headquarters has informed you that your final message should have 344 even numbers.\nHint: Checking for divisibility is an interesting operation that isn’t done much in R. Modulus is the operation you are interested in, where you are checking for whether the numbers are divisible by 2, with no remainder. See what you can find about modulus in R!\n\n# Code to verify how many even numbers are in your top_secret vector\n\ncode_vector_update |&gt; \n  summarize(even = sum(code %% 2 == 0))"
  },
  {
    "objectID": "group-activities/week-3/pa2-vc-intro-tidy-solution.html#part-3-the-secret-message",
    "href": "group-activities/week-3/pa2-vc-intro-tidy-solution.html#part-3-the-secret-message",
    "title": "Practice Activity 2: Modernizing the Process",
    "section": "Part 3: The secret message!",
    "text": "Part 3: The secret message!\nUse your final vector of numbers as indices for my_symbols to discover the final message, by running the following code:\n\n# add comment here\ncode_vector_update |&gt; \n  left_join(my_symbols, by = c(\"code\" = \"num\")) |&gt; \n  pull(symbols) |&gt; \n  stringr::str_c(collapse = \"\")\n\nGoogle the first line of this message, if you do not recognize it, to see what poem it is."
  },
  {
    "objectID": "group-activities/week-12/pa-9-functions.html",
    "href": "group-activities/week-12/pa-9-functions.html",
    "title": "PA 9: Writing Functions",
    "section": "",
    "text": "You will write several small functions, then use them to unscramble a message. Many of the functions have been started for you below, but none of them are complete as is.\nThis task is complex. It requires many different types of abilities. Everyone will be good at some of these abilities but nobody will be good at all of them. In order to produce the best product possible, you will need to use the skills of each member of your group.\n\n1. Write code to manipulate the vector of numbers nums. Your code should divide each element in the vector by the smallest element and round the results to the nearest whole number. Hint: This code should not be a function. Consider using the existing functions round() and min() and don’t forget to account for NA values.\n\nnums &lt;- 3:12\n\n2. Turn your code from Q1 into a function called divide_and_round(). Fill in the skeleton code below.\n\ndivide_and_round &lt;- function(vec){\n\n}\n\n3. Test your function by running the code below.\n\ntest &lt;- c(5:10, NA)\ndivide_and_round(test)  #you should see mostly values of 1 and 2, plus an NA\n\nNULL\n\n\n\n4. Write code to manipulate the vector of numbers nums. Your code should, for each element, return TRUE if the number is NOT divisible by 9 OR 12, and return FALSE otherwise. Hint: This code should not be a function. Note - the function %% is handy here - look it up if you do not know what it does.\n\nifelse(nums %% 9 == 0 ___ nums %% 12 == 0, ____ , ____)  #it should say FALSE for 9 and 12 positions\n\nError in parse(text = input): &lt;text&gt;:1:23: unexpected input\n1: ifelse(nums %% 9 == 0 _\n                          ^\n\n\n5. Turn your code from Q4 into a function called no_nines_or_twelves().\n\nno_nines_or_twelves &lt;- function(vec) {\n\n}\n\n6. Test your function by running the code below.\n\ntest &lt;- c(seq(from = 15, to = 60, by = 5), NA)\ntest\n\n [1] 15 20 25 30 35 40 45 50 55 60 NA\n\nno_nines_or_twelves(test)  #45 and 60 should have FALSE in their positions and NA in the last\n\nNULL\n\n\n\n7. Write a function called every_other(). This function should take in a vector and return every other value in the vector. Include an optional argument called start which lets you choose where to start skipping; that is, if start = 1, the function returns the 1st, 3rd, 5th, etc. values and if start = 2, the function returns the 2nd, 4th, 6th, etc. values.\nHint: Do not use a for() loop to do this! Accomplish this with the seq_along() function, bracket subsetting ([]), and modulus arithmetic (%%).\n\n# the following identify if a value is even or odd\n(seq_along(nums)) %% 2 == 0\n\n [1] FALSE  TRUE FALSE  TRUE FALSE  TRUE FALSE  TRUE FALSE  TRUE\n\n(seq_along(nums)) %% 2 &gt; 0\n\n [1]  TRUE FALSE  TRUE FALSE  TRUE FALSE  TRUE FALSE  TRUE FALSE\n\n# using [] to subset will keep values with TRUE in that element's position\n\nnums[(seq_along(nums)) %% 2 == 0]  #should return even numbers\n\n[1]  4  6  8 10 12\n\nnums[(seq_along(nums)) %% 2 &gt; 0]  #should return odd numbers\n\n[1]  3  5  7  9 11\n\n\nFill in the skeleton below. Remember the default should be start as 1.\n\nevery_other &lt;- function(vec, _________){\n  \n  if (start == 2) {\n    vec[]\n  } \n  \n  else if (start == 1) {\n    vec[]\n  }\n\n}\n\nError in parse(text = input): &lt;text&gt;:1:30: unexpected input\n1: every_other &lt;- function(vec, _\n                                 ^\n\n\n8. Test your function by running the code below.\n\ntest &lt;- c(1:10)\n\nevery_other(test, start = 1) #return odds\n\nError in every_other(test, start = 1): could not find function \"every_other\"\n\nevery_other(test, start = 2) #return evens\n\nError in every_other(test, start = 2): could not find function \"every_other\"\n\n\n\n9. Write a function called shorten(). This function should take in a vector, drop all values BEFORE the cumulative sum is greater than a provided number, and return the remaining values from the original vector.\nHint: Do not use a while() loop to do this! Accomplish this with the cumsum() function and bracketing.\nHere is an example of testing if the cumulative sum is greater than or equal to 30.\n\n# look at the following - which completes the task needed\ncumsum(nums)\n\n [1]  3  7 12 18 25 33 42 52 63 75\n\ncumsum(nums) &gt;= 30\n\n [1] FALSE FALSE FALSE FALSE FALSE  TRUE  TRUE  TRUE  TRUE  TRUE\n\nnums[cumsum(nums) &gt;= 30]  #returns only numbers 8+\n\n[1]  8  9 10 11 12\n\n\n\nshorten &lt;- function(x, sum){\n\n}\n\n10. Test your function by running the code below.\n\ntest &lt;- 20:50 \nshorten(test, 350) #should be 33+\n\nNULL\n\n\n11. Once you have written your four functions correctly, run the following code:\n\n#remember to use the green arrow to run the whole code chunk\nmy_vec &lt;- c(39, 1.87, 48, 11, 8, 45, 21, 5, 12, 33, 9, 11, 108,\n            4, 18, 5, 16, 17, 8, 48, 27, 24, 4, 22, 12, 27, 23,\n            46, 42, 35, 15, 34, 36, 26, 18, 10, 18.21, 72.04,\n            36.9, 41.81, 29, 89.75, 34.03, 20.18, 48.74, 15.76,\n            31.86, 83.6, 43.55, 39.99, 23.55, 8.54, 24.71, 22.02,\n            9.71, 62.14, 35.46, 16.61, 15.66, 21.29, 30.52,\n            201.07, 45.81, 7.85, 30.13, 34.14, 22.62, 10.2, 6.02,\n            30.12, 10.64, 31.72, 24.57, 14.43, 43.37, 89.93,\n            44.72, 51.32, 13.62, 45.56, 22.96, 7.05, 29.99, 41.38,\n            26.59, 23.04, 19.82, 50.73, 39.56, 43.79, 30.22, 85.85,\n            5.78, 78.85, 29.52, 66.27, 44.06, 27.28, 24.43, 64.32,\n            3.35, 67.45, 46.72, 48.44, 48.65, 33.3, 40.28, 19.04)\n\nmy_vec &lt;- every_other(my_vec, start = 2)\n\nError in every_other(my_vec, start = 2): could not find function \"every_other\"\n\n# Should have 54 elements! \n\nmy_vec &lt;- divide_and_round(my_vec)\n\nmy_vec &lt;- every_other(my_vec, start = 1)\n\nError in every_other(my_vec, start = 1): could not find function \"every_other\"\n\n# Should have 27 elements!\n\nmy_vec &lt;- shorten(my_vec, 350)\n# Should have 12 elements!\n\nmy_vec &lt;- my_vec[no_nines_or_twelves(my_vec)]\n# Should have 6 elements! \n\nmy_vec &lt;- sort(my_vec)\n\nmy_vec\n\nNULL\n\n\n\nCanvas Submission\nIf you have done everything correctly, your final vector will be six numbers long. Google these six numbers to find a TV show they are famously associated with as your final answer and submit to Canvas."
  },
  {
    "objectID": "group-activities/week-2/pa1-base-r.html",
    "href": "group-activities/week-2/pa1-base-r.html",
    "title": "Practice Activity 1: Find the Mistakes",
    "section": "",
    "text": "Today you will be creating and manipulating vectors, lists, and data frames to uncover a top secret message.\nThis task is complex. It requires many different types of abilities. Everyone will be good at some of these abilities but nobody will be good at all of them. In order to solve this puzzle, you will need to use the skills of each member of your group.\nSome advice:"
  },
  {
    "objectID": "group-activities/week-2/pa1-base-r.html#groupwork-protocols",
    "href": "group-activities/week-2/pa1-base-r.html#groupwork-protocols",
    "title": "Practice Activity 1: Find the Mistakes",
    "section": "Groupwork Protocols",
    "text": "Groupwork Protocols\nDuring the Practice Activity, you and your partner will alternate between two roles—Developer and Coder.\nWhen you are the Developer, you will type into the Quarto document in RStudio. However, you do not type your own ideas. Instead, you type what the Coder tells you to type. You are permitted to ask the Coder clarifying questions, and, if both of you have a question, you are permitted to ask the professor. You are expected to run the code provided by the Coder and, if necessary, to work with the Coder to debug the code. Once the code runs, you are expected to collaborate with the Coder to write code comments that describe the actions taken by your code.\nWhen you are the Coder, you are responsible for reading the instructions / prompts and directing the Developer what to type in the Quarto document. You are responsible for managing the resources your group has available to you (e.g., cheatsheet, textbook). If necessary, you should work with the Developer to debug the code you specified. Once the code runs, you are expected to collaborate with the Developer to write code comments that describe the actions taken by your code.\n\nGroup Norms\nRemember, your group is expected to adhere to the following norms:\n\nThink and work together. Do not divide the work.\nYou are smarter together.\nNo cross-talk with other groups."
  },
  {
    "objectID": "group-activities/week-2/pa1-base-r.html#part-zero-accessing-the-practice-activity",
    "href": "group-activities/week-2/pa1-base-r.html#part-zero-accessing-the-practice-activity",
    "title": "Practice Activity 1: Find the Mistakes",
    "section": "Part Zero: Accessing the Practice Activity",
    "text": "Part Zero: Accessing the Practice Activity\n\nTo access the activity and get it ready to share:\n\nLog into your CSUMB R Server Account.\n\nChoose one partner (with the closest upcoming birthday) to create an R Project called “pa-1-intro-quarto”.\n\nUpload the pa1-base-r.qmd into the project folder.\n\nShare the project with the other partner, go to File &gt; Share Project &gt; Type partner’s username &gt; Click Add\n\n\n\nFor each code chunk, add a #| label: and a #comment describing what the code chunk is doing. Be sure to check that all spacing is appropriate as well!"
  },
  {
    "objectID": "group-activities/week-2/pa1-base-r.html#part-one-setup",
    "href": "group-activities/week-2/pa1-base-r.html#part-one-setup",
    "title": "Practice Activity 1: Find the Mistakes",
    "section": "Part One: Setup",
    "text": "Part One: Setup\nEach of the following R chunks will cause an error and / or do the desired task incorrectly. Find the mistake, and correct it to complete the intended action.\n\nCreate vectors containing the upper case letters, lower case letters, and some punctuation marks. add a label that indicate this code chunk creates the vectors of letters and punctuation.\n\n\nlower_case &lt;- c(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\",\n                \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\")\n\nupper_case &lt;- c(\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\" \"I\", \"J\", \"K\", \"L\", \"M\",\n                \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\")\n\npunctuation &lt;- c(\".\", \",\", \"!\", \"?\", \"'\", '\"', \"(\", \")\", \" \", \"-\", \";\", \":\")\n\n\nMake one long vector containing all the symbols.\n\n\nmy_symbols &lt;- (lower_case, upper_case, punctuation)\n\n\nTurn the my_symbols vector into a data frame, with one column named “symbol”.\n\n\nmy_symbols &lt;- dataframe(symbol = my_symbols)\n\n\nFind the total number of symbols we have in our data frame.\n\n\nlen &lt;- length(my_Symbols)\n\n\nCreate a new variable in your dataframe that assigns a number to each symbol.\n\n\nmy_symbols%Num &lt;- 1:len"
  },
  {
    "objectID": "group-activities/week-2/pa1-base-r.html#part-two-decoding-the-secret-message.",
    "href": "group-activities/week-2/pa1-base-r.html#part-two-decoding-the-secret-message.",
    "title": "Practice Activity 1: Find the Mistakes",
    "section": "Part Two: Decoding the secret message.",
    "text": "Part Two: Decoding the secret message.\nThis chunk will load up the encoded secret message as a vector:\n\ntop_secret &lt;- read_csv(\"https://www.dropbox.com/s/k72h1zewk4gtqep/PA_Secret_Code?dl=1\", \n                       col_names = FALSE)$X1\n\nBy altering this top secret set of numbers, you will be able to create a message. Write your own code to complete the steps, in the order given below.\n\nAdd 14 to every number.\n\n\nts6 &lt;- top_secret ___________\n\n\nMultiply every number by 18, then subtract 257.\n\n\nts7 &lt;- ts6___________\n\n\nUse the exp() function to exponentiate every number.\n\n\nts8 &lt;- ____(ts7)\n\n\nSquare every number.\n\n\nts9 &lt;- \n\nCheckpoint: Headquarters has informed you that at this stage of decoding, there should be 352 numbers in the secret message that are below 17. Write the code to verify that this is true for your top_secret object!\nHint: This is what is called a “relational” comparison, where you compare an object to a number and R will give you a vector of TRUEs and FALSEs based on whether the comparison is / is not met. You can then use these TRUEs and FALSEs as numbers, since TRUE = 1 and FALSE = 0 in R land.\n\n# Write code to verify that there are 352 numbers with values **below** 17\n\n___(ts9 &lt; 17)\n\n\nHint: To update an object after performing an operation, you overwrite the existing object with its updated counterpart. This looks something like this:\nx &lt;- x + 12,\nwhere the original value(s) in x have had 12 added to them, and the resulting values are put back in to the object named x. Be careful with this - if you do something wrong you will need to rerun the previous code chunks to reset everything! Fortunately, the grey arrow pointing down to the green line in each code chunk runs all previous code chunks again.\nNext, carry out the following steps:\n\nTurn your vector of numbers into a matrix with 5 columns.\n\n\nts_mat &lt;- _____(ts9, ncol = ____) \n\n\nSeparately from your top secret numbers, create a vector of all the even numbers between 1 and 382. Name it “evens”. That is, “evens” should contain 2, 4, 6, 8 …, 382.\n\n\nevens &lt;- seq(from = __ , to = __ , by = __)\n\n\nSubtract the “evens” vector from the first column of your secret message matrix.\n\n\nts_mat[, 1] &lt;- ts_mat[, ___] - evens\n\n\nSubtract 100 from all numbers 18-24th rows of the 3rd column.\n\n\nts_mat[18:24, 3] &lt;- ts_mat[____, ____] - ____\n\n\nMultiply all numbers in the 4th and 5th column by 2.\n\n\nts_mat[, __:__] &lt;- \n\n\nTurn your matrix back into a vector.\n\n\nts_vec &lt;- ________(ts_mat)\n\nCheckpoint: Headquarters has informed you that at this stage of decoding, all numbers in indices 500 and beyond are below 100. Write the code to verify that this is true for your top_secret object!\nHint: Use a relational comparison similar to what you used in the last checkpoint, but here you will need to subset values from your vector!\n\n# Write code to verify that indices 500 and beyond have values **below** 100\n___(ts_vec[____:____] &gt;= ____)\n\n\n\nTake the square root of all numbers in indices 38 to 465.\n\n\nts_vec[___:___] &lt;- ____(ts_vec[38:465])\n\n\nUse the round() function to round all numbers to the nearest whole number.\n\n\nts_vec &lt;- \n\n\nReplace all instances of the number 39 with 20. Hint: Step 18 requires another relational comparison, but this time it is equality. Equality in R is checked with a double equal sign rather than a single equal sign\n\n\nts_vec[ts_vec == ___ ] &lt;- \n\nCheckpoint: Headquarters has informed you that your final message should have 344 even numbers.\nHint: Checking for divisibility is an interesting operation that isn’t done much in R. Modulus is the operation you are interested in, where you are checking for whether the numbers are divisible by 2, with no remainder. See what you can find about modulus in R!\n\n# Code to verify how many even numbers are in your top_secret vector\n\n___(ts_vec %% 2 == 0)"
  },
  {
    "objectID": "group-activities/week-2/pa1-base-r.html#part-3-the-secret-message",
    "href": "group-activities/week-2/pa1-base-r.html#part-3-the-secret-message",
    "title": "Practice Activity 1: Find the Mistakes",
    "section": "Part 3: The secret message!",
    "text": "Part 3: The secret message!\nUse your final vector of numbers as indices for my_symbols to discover the final message, by running the following code:\n\nstringr::str_c(my_symbols$symbol[ts_vec], collapse = \"\")\n\nGoogle the first line of this message, if you do not recognize it, to see what poem it is."
  },
  {
    "objectID": "group-activities/week-2/pa1-base-r.html#part-4-wrap-up",
    "href": "group-activities/week-2/pa1-base-r.html#part-4-wrap-up",
    "title": "Practice Activity 1: Find the Mistakes",
    "section": "Part 4: Wrap up",
    "text": "Part 4: Wrap up\nThe last step is to make each code chunk hidden, even though it runs by modifying the YAML. Once knit, Export the project and submit with your “quiz” for the week. Note that each person should be submit a copy."
  },
  {
    "objectID": "group-activities/week-9/pa-6-united-nations-voting.html",
    "href": "group-activities/week-9/pa-6-united-nations-voting.html",
    "title": "PA 6: United Nations Voting Records",
    "section": "",
    "text": "This task is complex. It requires many different types of abilities. Everyone will be good at some of these abilities but nobody will be good at all of them. In order to produce the best product possible, you will need to use the skills of each member of your group."
  },
  {
    "objectID": "group-activities/week-9/pa-6-united-nations-voting.html#goals-for-the-activity",
    "href": "group-activities/week-9/pa-6-united-nations-voting.html#goals-for-the-activity",
    "title": "PA 6: United Nations Voting Records",
    "section": "Goals for the Activity",
    "text": "Goals for the Activity\n\nJoin multiple data tables together by a common variable(s)\n\nCreate new data sets through the joining of data from various sources\n\nCombine join functions with other tidyverse functions\n\nTHROUGHOUT THE Activity be sure to follow the Style Guide by doing the following:\n\nload the appropriate packages at the beginning of the Quarto document\n\nuse proper spacing\n\nadd labels to all code chunks\n\ncomment at least once in each code chunk to describe why you made your coding decisions\n\nadd appropriate labels to all graphic axes"
  },
  {
    "objectID": "group-activities/week-9/pa-6-united-nations-voting.html#data-exploration",
    "href": "group-activities/week-9/pa-6-united-nations-voting.html#data-exploration",
    "title": "PA 6: United Nations Voting Records",
    "section": "Data Exploration",
    "text": "Data Exploration\nOur goal today is to explore how various members (countries) in the United Nations vote. We have three data sets, what can we determine from each data set separately?\n\nUN Votes\nThe first data set, unvotes contains data on the rcid which is the roll call id for the vote, the country/country code, and how the country voted. What can we learn from the data?\nComment on the following code, what is happening in each line? One way to approach seeing what each line does is to highlight the code from before the pipe of that line up to the data unvotes and use CTRL + ENTER to run just the highlighted lines.\n\nunvotes |&gt; \n  count(country, vote) |&gt; #comment\n  group_by(country) |&gt; #comment\n  mutate(total = sum(n)) |&gt; #comment \n  mutate(prop_vote = n/total) |&gt; #comment\n  filter(country %in% c(\"United States\", \"Canada\", \n                        \"Germany\", \"France\",\n                        \"Italy\", \"Japan\",\n                        \"United Kingdom\")) |&gt; #comment\n  ggplot(aes(x = country, y = prop_vote, \n             fill = vote)) + #comment\n  geom_col(position = position_stack()) + #comment\n  labs(x = \"Group of Seven Countries\",\n       y = \"Proportion of Votes\",\n       title = \"Voting Record of the G7\",\n       fill = \"Vote\") + #comment\n  theme_minimal() +  #comment\n  scale_fill_viridis_d(end = 0.8) + #comment\n  coord_flip() #comment\n\n\nDescribe what the graph above demonstrates above UN voting records for the G7\n\n\n\n\nRoll Calls\nThe second data set, roll_calls has more information on the type of vote, the importance, whether it was a resolution, and date of the vote. What does eh following code do?\n\nroll_calls |&gt; \n  distinct(short)\n\n\nDescription of code results\n\nWe can use the individual data for roll_calls to look at the number of votes per year over time.\n\nroll_calls |&gt; \n  mutate(year = lubridate::year(date)) |&gt; #extracts the year from the date value and creates a new `year` column\n  count(year) |&gt; #counts how many votes there were per year assuming each line is an single voting instance\n  ggplot(aes(x = year, y = n)) +\n  geom_line() +\n  labs(x = \"Year\", y = \"Number of Votes\",\n       title = \"UN Votes per Year\") +\n  theme_minimal()\n\nWhat information is missing from the above graphic that might be useful in understanding the issues the UN commonly votes on?\n\nInsert Answer Here\n\nWe could try and look at the short descriptions, short, for each vote with the following code.\n\nroll_calls |&gt; \n  count(short)\n\nDoes the above information help us understand the voting issues of the UN over time? Explain.\n\nInsert your answer here\n\n\n\n\nIssues\nFinally we have the issues data which provides a more general description for each vote on specific issues. Note that not all issues are included in the data set, just the ones related to the 6 issues below:\n\nissues |&gt; \n  count(issue)\n\nIt would be helpful to use the issues data with the roll_calls data to be able to better understand the voting trends within the UN on at least these 6 issues. To do this, we need to join the data."
  },
  {
    "objectID": "weeks/week-8-9-reshaping-joining.html",
    "href": "weeks/week-8-9-reshaping-joining.html",
    "title": "Data Joins and Transformations",
    "section": "",
    "text": "Broadly, your objective while reading these chapters is to be able to identify data sets which have “messy” formats and determine a sequence of operations to transition the data into “tidy” format. To do this, you should master the following concepts:",
    "crumbs": [
      "Weekly materials",
      "Week 8-9 - Pivoting and Joining Data"
    ]
  },
  {
    "objectID": "weeks/week-8-9-reshaping-joining.html#examples-messy-data",
    "href": "weeks/week-8-9-reshaping-joining.html#examples-messy-data",
    "title": "Data Joins and Transformations",
    "section": "1.1 Examples: Messy Data",
    "text": "1.1 Examples: Messy Data\nThese datasets all display the same data: TB (Tuberculosis) cases documented by the WHO (World Health Organization) in Afghanistan, Brazil, and China, between 1999 and 2000. There are four variables: country, year, cases, and population, but each table has a different layout.\n\nFor each of the data set, determine whether each table is tidy.\n\nIf it is not, identify which rule(s) it violates.\n\nWhat would you have to do to the data to be able to compute a standardized TB infection rate per 100,000 people?\n\n\n\n\n\n\n\nTip\n\n\n\nAll of these data sets are “built-in” to the tidyr package!\n\n\n\nTable 1Table 2Table 3Table 4Table 5\n\n\n\n\n\nTable 1\n\n\ncountry\nyear\ncases\npopulation\n\n\n\n\nAfghanistan\n1999\n745\n19987071\n\n\nAfghanistan\n2000\n2666\n20595360\n\n\nBrazil\n1999\n37737\n172006362\n\n\nBrazil\n2000\n80488\n174504898\n\n\nChina\n1999\n212258\n1272915272\n\n\nChina\n2000\n213766\n1280428583\n\n\n\n\n\nHere, each observation is a single row, each variable is a column, and everything is nicely arranged for e.g. regression or statistical analysis. We can easily compute another measure, such as cases per 100,000 population, by taking cases / population * 100000 (this would define a new column).\n\n\n\n\n\nTable 2\n\n\ncountry\nyear\ntype\ncount\n\n\n\n\nAfghanistan\n1999\ncases\n745\n\n\nAfghanistan\n1999\npopulation\n19987071\n\n\nAfghanistan\n2000\ncases\n2666\n\n\nAfghanistan\n2000\npopulation\n20595360\n\n\nBrazil\n1999\ncases\n37737\n\n\nBrazil\n1999\npopulation\n172006362\n\n\nBrazil\n2000\ncases\n80488\n\n\nBrazil\n2000\npopulation\n174504898\n\n\nChina\n1999\ncases\n212258\n\n\nChina\n1999\npopulation\n1272915272\n\n\nChina\n2000\ncases\n213766\n\n\nChina\n2000\npopulation\n1280428583\n\n\n\n\n\nHere, we have 4 columns again, but we now have 12 rows (instead of 6): one of the columns is an indicator of which of two numerical observations is recorded in that row; a second column stores the value (e.g., cases, population). This form of the data is more easily plotted in ggplot2, if we want to show trend lines for both cases and population, but computing per capita cases would be much more difficult in this form than in the arrangement in Table 1!\n\n\n\n\n\nTable 3\n\n\ncountry\nyear\nrate\n\n\n\n\nAfghanistan\n1999\n745/19987071\n\n\nAfghanistan\n2000\n2666/20595360\n\n\nBrazil\n1999\n37737/172006362\n\n\nBrazil\n2000\n80488/174504898\n\n\nChina\n1999\n212258/1272915272\n\n\nChina\n2000\n213766/1280428583\n\n\n\n\n\nThis form has only 3 columns, because the rate variable (which is a character) stores both the case count and the population. We can’t do anything with this format as it stands, because we can’t do math on data stored as characters. However, this form might be easier to read and record for a human being.\n\n\n\n\n\nTable 4a\n\n\ncountry\n1999\n2000\n\n\n\n\nAfghanistan\n745\n2666\n\n\nBrazil\n37737\n80488\n\n\nChina\n212258\n213766\n\n\n\n\n\n\nTable 4b\n\n\ncountry\n1999\n2000\n\n\n\n\nAfghanistan\n19987071\n20595360\n\n\nBrazil\n172006362\n174504898\n\n\nChina\n1272915272\n1280428583\n\n\n\n\n\nIn this form, we have two tables - one for population, and one for cases. Each year’s observations are in a separate column. This format is often found in separate sheets of an Excel workbook. To work with this data, we’ll need to transform each table so that there is a column indicating which year an observation is from, and then merge the two tables together by country and year.\n\n\n\n\n\nTable 5\n\n\ncountry\ncentury\nyear\nrate\n\n\n\n\nAfghanistan\n19\n99\n745/19987071\n\n\nAfghanistan\n20\n00\n2666/20595360\n\n\nBrazil\n19\n99\n37737/172006362\n\n\nBrazil\n20\n00\n80488/174504898\n\n\nChina\n19\n99\n212258/1272915272\n\n\nChina\n20\n00\n213766/1280428583\n\n\n\n\n\nTable 5 is very similar to Table 3, but the year has been separated into two columns - century, and year. This is more common with year, month, and day in separate columns (or date and time in separate columns), often to deal with the fact that spreadsheets don’t always handle dates the way you’d hope they would.\n\n\n\nIn a perfect world, all data would come in the right format for our needs, but this is often not the case. We will spend the next few weeks learning about how to use R to reformat our data to follow the tidy data framework and see why this is so important. By the end of this chapter, you will have the skills needed to wrangle and transform the most common “messy” data sets into “tidy” form.\n\n\n\n\n\n\nDo we always want our data in the same layout?\n\n\n\nThe concept of tidy data is useful for mapping variables from the data set to elements in a graph, specifications of a model, or aggregating to create summaries. However, what is considered to be “tidy data” format for one task, might not be in the correct “tidy data” format for a different task. It is important for you to consider the end goal when restructuring your data.\nPart of this course is building the skills for you to be able to map your data operation steps from an original data set to the correct format (and output).",
    "crumbs": [
      "Weekly materials",
      "Week 8-9 - Pivoting and Joining Data"
    ]
  },
  {
    "objectID": "weeks/week-5-projects-data-import.html",
    "href": "weeks/week-5-projects-data-import.html",
    "title": "R Projects & Importing Data",
    "section": "",
    "text": "Describe what an R Project is\nOutline how an R Project affects the file paths used to read in data\n\nRead in data from common formats into R\nIdentify missing data and type of missingness",
    "crumbs": [
      "Weekly materials",
      "Week 5 - Importing Data"
    ]
  },
  {
    "objectID": "weeks/week-5-projects-data-import.html#learning-objectives",
    "href": "weeks/week-5-projects-data-import.html#learning-objectives",
    "title": "R Projects & Importing Data",
    "section": "",
    "text": "Describe what an R Project is\nOutline how an R Project affects the file paths used to read in data\n\nRead in data from common formats into R\nIdentify missing data and type of missingness",
    "crumbs": [
      "Weekly materials",
      "Week 5 - Importing Data"
    ]
  },
  {
    "objectID": "weeks/week-5-projects-data-import.html#working-directories-in-r",
    "href": "weeks/week-5-projects-data-import.html#working-directories-in-r",
    "title": "R Projects & Importing Data",
    "section": "1.1 Working Directories in R",
    "text": "1.1 Working Directories in R\nTo find where your working directory is in R, you can either look at the top of your console or type getwd() into your console.\n\ngetwd()\n\nAlthough it is not recommended, you can set your working directory in R with setwd():\n\nsetwd(\"/path/to/my/assignment/folder\")\n\n\n\n\n\n\n\n\n\n\nFile Paths in R\n\n\n\nA quick warning on file paths is that Mac / Linux and Windows differ in the direction of their backslash to separate folder locations. Mac/Linux use / (e.g. STAT210/Week1) while Window’s uses \\ (e.g. STAT210\\Week1).",
    "crumbs": [
      "Weekly materials",
      "Week 5 - Importing Data"
    ]
  },
  {
    "objectID": "weeks/week-5-projects-data-import.html#r-projects",
    "href": "weeks/week-5-projects-data-import.html#r-projects",
    "title": "R Projects & Importing Data",
    "section": "1.2 R Projects",
    "text": "1.2 R Projects\n📖 Review Reading: Workflow (R Projects)\n\n\n\n\n\n\nOnly read Section 6.2!\n\n\n\n\n\n\n\nCreate an R Project from an Existing Folder\nSo far, each time we have worked in R we have created an R Project. The R Project lives in the created folder for two reasons, (1) when you copy a GitHub repository you told RStudio you wanted to make a new R Project, and (2) in order for RStudio to talk with GitHub you need to use an R Project.\nHowever, if you look in any other folder on your computer, you should not see a blue cube since you never created an R Project in those folders. Suppose we have a project we’ve been work on and we never created an official R Project for it (perhaps it is a folder filled with data sets or someone sent a zipped filed that didn’t contain an R Project file (.RProj).\nTo add a R Project to an existing folder on your computer (e.g., you already created a folder for the project), first open RStudio on your computer and click File &gt; New Project, then select Existing Directory:\n\n\n\nNavigation prompt for creating a new R Project in an existing directory\n\n\nThen, browse on your computer to where you saved your project folder (it should be on your hard drive and not on iCloud, Google Drive, or One Drive). For example, let’s say you ahd a folder called STAT331 that you wanted to turn into a R Project. Select that folder.\n\n\n\nNavigation prompt for selecting which existing folder in which the R Project should be created.\n\n\nOnce you click “Create Project”, your existing folder, STAT331 should now contain a STAT331.Rproj file. This is your new “home” base for this class - whenever you refer to a file with a relative path it will begin to look for it here.\nIf you would like a list of step-by-step instructions for this process, feel free to look at this file: Creating a Project in an Existing Directory",
    "crumbs": [
      "Weekly materials",
      "Week 5 - Importing Data"
    ]
  },
  {
    "objectID": "weeks/week-5-projects-data-import.html#how-do-i-load-my-data",
    "href": "weeks/week-5-projects-data-import.html#how-do-i-load-my-data",
    "title": "R Projects & Importing Data",
    "section": "2.1 How do I load my data?",
    "text": "2.1 How do I load my data?\n📖 Required Reading: Data Import",
    "crumbs": [
      "Weekly materials",
      "Week 5 - Importing Data"
    ]
  },
  {
    "objectID": "weeks/week-5-projects-data-import.html#where-does-my-data-live",
    "href": "weeks/week-5-projects-data-import.html#where-does-my-data-live",
    "title": "R Projects & Importing Data",
    "section": "2.2 Where does my data live?",
    "text": "2.2 Where does my data live?\n✅ Check-in: Loading Data\nFor this check-in you are asked to work through reading in different data sets. You are expected to create your own Quarto document to complete this activity.\nThe folder Age_Data contains several data sets with the names and ages of five individuals. The data sets are stored as different file types. Download Ages_Data.zip here, make sure to unzip the folder, save these in a reasonable place (e.g., STAT210 &gt; Week 5 &gt; Checkins or STAT210 &gt; Checkins &gt; Week 5).\n\n\n\n\n\n\nExtracting zip folders\n\n\n\nYou will need to extract the contents of the ages.zip file, that means you will need to uncompress the files from the folder for RStudio to know where to get the data from.",
    "crumbs": [
      "Weekly materials",
      "Week 5 - Importing Data"
    ]
  },
  {
    "objectID": "weeks/week-5-projects-data-import.html#tidy-data-1",
    "href": "weeks/week-5-projects-data-import.html#tidy-data-1",
    "title": "R Projects & Importing Data",
    "section": "3.1 Tidy Data",
    "text": "3.1 Tidy Data\n\n\n\nArtwork by Allison Horst",
    "crumbs": [
      "Weekly materials",
      "Week 5 - Importing Data"
    ]
  },
  {
    "objectID": "weeks/week-5-projects-data-import.html#same-data-different-formats",
    "href": "weeks/week-5-projects-data-import.html#same-data-different-formats",
    "title": "R Projects & Importing Data",
    "section": "3.2 Same Data, Different Formats",
    "text": "3.2 Same Data, Different Formats\nDifferent formats of the data are tidy in different ways.\n\nOption 1Option 2\n\n\n\n\n\n\n\nTeam\nPoints\nAssists\nRebounds\n\n\n\n\nA\n88\n12\n22\n\n\nB\n91\n17\n28\n\n\nC\n99\n24\n30\n\n\nD\n94\n28\n31\n\n\n\n\n\n\n\n\n\n\n\n\nTeam\nStatistic\nValue\n\n\n\n\nA\nPoints\n88\n\n\nA\nAssists\n12\n\n\nA\nRebounds\n22\n\n\nB\nPoints\n91\n\n\nB\nAssists\n17\n\n\nB\nRebounds\n28\n\n\nC\nPoints\n99\n\n\nC\nAssists\n24\n\n\nC\nRebounds\n30\n\n\nD\nPoints\n94\n\n\nD\nAssists\n28\n\n\nD\nRebounds\n31",
    "crumbs": [
      "Weekly materials",
      "Week 5 - Importing Data"
    ]
  },
  {
    "objectID": "weeks/week-5-projects-data-import.html#connection-to-ggplot",
    "href": "weeks/week-5-projects-data-import.html#connection-to-ggplot",
    "title": "R Projects & Importing Data",
    "section": "3.3 Connection to ggplot",
    "text": "3.3 Connection to ggplot\nLet’s make a plot of each team’s statistics!\n\nOption 1 - Wide DataOption 2 - Long Data\n\n\n\n\n\nCode\nggplot(data = bb_wide, \n       mapping = aes(x = Team)) +\n  geom_point(mapping = aes(y = Points, \n                           color = \"Points\"), \n             size = 4) +\n  geom_point(mapping = aes(y = Assists, \n                           color = \"Assists\"), \n             size = 4) +\n  geom_point(mapping = aes(y = Rebounds, \n                           color = \"Rebounds\"), \n             size = 4) + \n  scale_colour_manual(\n    values = c(\"darkred\", \n               \"steelblue\", \n               \"forestgreen\")) +\n  labs(color = \"Statistic\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nggplot(data = bb_long, \n       mapping = aes(x = Team, \n                     y = Value, \n                     color = Statistic)) +\n  geom_point(size = 4) + \n  scale_colour_manual(\n    values = c(\"darkred\", \n               \"steelblue\", \n               \"forestgreen\")) +\n  labs(color = \"Statistic\")",
    "crumbs": [
      "Weekly materials",
      "Week 5 - Importing Data"
    ]
  },
  {
    "objectID": "weeks/week-5-projects-data-import.html#tidy-data-2",
    "href": "weeks/week-5-projects-data-import.html#tidy-data-2",
    "title": "R Projects & Importing Data",
    "section": "3.4 Tidy Data",
    "text": "3.4 Tidy Data\n\n\n\nArtwork by Allison Horst",
    "crumbs": [
      "Weekly materials",
      "Week 5 - Importing Data"
    ]
  },
  {
    "objectID": "weeks/week-5-projects-data-import.html#common-types-of-data-files",
    "href": "weeks/week-5-projects-data-import.html#common-types-of-data-files",
    "title": "R Projects & Importing Data",
    "section": "4.1 Common Types of Data Files",
    "text": "4.1 Common Types of Data Files\nLook at the file extension for the type of data file.\n. . .\n\n\n.csv : “comma-separated values”\n\nName, Age\nBob, 49\nJoe, 40\n\n\n. . .\n.xls, .xlsx: Microsoft Excel spreadsheet\n\nCommon approach: save as .csv\nNicer approach: use the readxl package\n\n. . .\n.txt: plain text\n\nCould have any sort of delimiter…\nNeed to let R know what to look for!",
    "crumbs": [
      "Weekly materials",
      "Week 5 - Importing Data"
    ]
  },
  {
    "objectID": "weeks/week-5-projects-data-import.html#common-types-of-data-files-1",
    "href": "weeks/week-5-projects-data-import.html#common-types-of-data-files-1",
    "title": "R Projects & Importing Data",
    "section": "4.2 Common Types of Data Files",
    "text": "4.2 Common Types of Data Files\nWhat is the delimiter (e.g. comma, tab, space, etc.) for each data file?\n\nFile AFile BFile CSources\n\n\n\n\n\n\n\n\n\n\n\n\nFile A\nFile B\nFile C",
    "crumbs": [
      "Weekly materials",
      "Week 5 - Importing Data"
    ]
  },
  {
    "objectID": "weeks/week-5-projects-data-import.html#loading-external-data",
    "href": "weeks/week-5-projects-data-import.html#loading-external-data",
    "title": "R Projects & Importing Data",
    "section": "4.3 Loading External Data",
    "text": "4.3 Loading External Data\nUsing base R functions:\n\nread.csv() is for reading in .csv files.\nread.table() and read.delim() are for any data with “columns” (you specify the separator).",
    "crumbs": [
      "Weekly materials",
      "Week 5 - Importing Data"
    ]
  },
  {
    "objectID": "weeks/week-5-projects-data-import.html#loading-external-data-1",
    "href": "weeks/week-5-projects-data-import.html#loading-external-data-1",
    "title": "R Projects & Importing Data",
    "section": "4.4 Loading External Data",
    "text": "4.4 Loading External Data\nThe tidyverse has some cleaned-up versions in the readr and readxl packages:\n\n\nreadr package is loaded with library(tidyverse)\n\nread_csv() is for comma-separated data.\nread_tsv() is for tab-separated data.\nread_table() is for white-space-separated data.\nread_delim() is any data with “columns” (you specify the separator). The above are special cases.\n\nreadxl will need need to be loaded separately with library(readxl)\n\nread_xls() and read_xlsx() are specifically for dealing with Excel files.\n\n\n\nRemember to load the readr and readxl packages first!",
    "crumbs": [
      "Weekly materials",
      "Week 5 - Importing Data"
    ]
  },
  {
    "objectID": "weeks/week-5-projects-data-import.html#whats-the-difference",
    "href": "weeks/week-5-projects-data-import.html#whats-the-difference",
    "title": "R Projects & Importing Data",
    "section": "4.5 What’s the difference?",
    "text": "4.5 What’s the difference?\nCompare the two functions read.csv() and read_csv() - what do you notice about the possible arguments you can use in each? Why is read_csv() the better option?",
    "crumbs": [
      "Weekly materials",
      "Week 5 - Importing Data"
    ]
  },
  {
    "objectID": "weeks/week-5-projects-data-import.html#practice-with-importing-data",
    "href": "weeks/week-5-projects-data-import.html#practice-with-importing-data",
    "title": "R Projects & Importing Data",
    "section": "4.6 Practice with Importing Data",
    "text": "4.6 Practice with Importing Data\nOnce you have the data saved (and extracted) in your STAT 210 folder, preferably in the Week 5 subfolder, use the readr and readxl packages to complete the following exercises.\n\nLoad the appropriate packages for reading in data.\nRead in the data set ages.csv\nRead in the data set ages_tab.txt\nRead in the data set ages_mystery.txt\nRead in the data set ages.xlsx\nFind a way to use read_csv() to read ages.csv with the variable “Name” as a factor data type and “Age” as a character data type.",
    "crumbs": [
      "Weekly materials",
      "Week 5 - Importing Data"
    ]
  },
  {
    "objectID": "weeks/week-5-projects-data-import.html#import-multiple-files-at-once",
    "href": "weeks/week-5-projects-data-import.html#import-multiple-files-at-once",
    "title": "R Projects & Importing Data",
    "section": "4.7 Import Multiple Files at Once",
    "text": "4.7 Import Multiple Files at Once\nIf you have multiple files that are organized the same way (same variables names/columns), you can actually import them all at once and combine into one file. Check out the following tutorial:",
    "crumbs": [
      "Weekly materials",
      "Week 5 - Importing Data"
    ]
  },
  {
    "objectID": "group-activities/week-8/pa-5-tidyr-dplyr.html",
    "href": "group-activities/week-8/pa-5-tidyr-dplyr.html",
    "title": "PA 5: Military Spending",
    "section": "",
    "text": "library(readxl) \nlibrary(tidyverse)\nToday you will be tidying messy data to explore the relationship between countries of the world and military spending. You can find the gov_spending_per_capita.xlsx data included in the data folder.\nThis task is complex. It requires many different types of abilities. Everyone will be good at some of these abilities but nobody will be good at all of them. In order to produce the best product possible, you will need to use the skills of each member of your group."
  },
  {
    "objectID": "group-activities/week-8/pa-5-tidyr-dplyr.html#data-description",
    "href": "group-activities/week-8/pa-5-tidyr-dplyr.html#data-description",
    "title": "PA 5: Military Spending",
    "section": "Data Description",
    "text": "Data Description\nWe will be using data from the Stockholm International Peace Research Institute (SIPRI). The SIPRI Military Expenditure Database is an open source data set containing time series on the military spending of countries from 1949–2019. The database is updated annually, which may include updates to data from previous years.\nMilitary expenditure is presented in many ways:\n\nin local currency and in US $ (both from 2018 and current);\nin terms of financial years and calendar years;\nas a share of GDP and per capita.\n\nThe availability of data varies considerably by country, but we note that data is available from at least the late 1950s for a majority of countries that were independent at the time. Estimates for regional military expenditure have been extended backwards depending on availability of data, but no estimates for total world military expenditure are available before 1988 due to the lack of data from the Soviet Union.\nSIPRI military expenditure data is based on open sources only."
  },
  {
    "objectID": "group-activities/week-8/pa-5-tidyr-dplyr.html#data-import-and-cleaning",
    "href": "group-activities/week-8/pa-5-tidyr-dplyr.html#data-import-and-cleaning",
    "title": "PA 5: Military Spending",
    "section": "Data Import and Cleaning",
    "text": "Data Import and Cleaning\nFirst, you should notice that there are ten different sheets included in the dataset. We are interested in the sheet labeled “Share of Govt. spending”, which contains information about the share of all government spending that is allocated to the military.\nNext, you’ll notice that there are notes about the data in the first six rows. Ugh! Also notice that the last six rows are footnotes about the data. Ugh!\nRather than copying this one sheet into a new Excel file and deleting the first and last few rows, let’s learn something new about the read_xlsx() function!\nThe read_xlsx() function has several useful arguments:\n\nsheet: specify the name of the sheet that you want to use. The name must be passed in as a string (in quotations)!\nskip: specify the number of rows you want to skip before reading in the data.\nn_max: specify the maximum number of rows of data to read in.\n\nna: specify the ways that NA is coded in the data, formatted c(\"a\",\"b\")\n\n1. Comment the code below to read the military expenditures data into your workspace, identifying why each setting was chosen.\n\nmilitary &lt;- read_xlsx(\"data/gov_spending_per_capita.xlsx\",  #comment\n                      sheet = \"Share of Govt. spending\",    #comment\n                      skip  = 7,                            #comment\n                      n_max = 191,                          #comment\n                      na = c(\"xxx\", \". .\"))                  #comment\n\nI would highly recommend you open the dataset in Excel, so you can see the data layout!"
  },
  {
    "objectID": "group-activities/week-8/pa-5-tidyr-dplyr.html#filtering-unwanted-rows",
    "href": "group-activities/week-8/pa-5-tidyr-dplyr.html#filtering-unwanted-rows",
    "title": "PA 5: Military Spending",
    "section": "Filtering Unwanted Rows",
    "text": "Filtering Unwanted Rows\nIf you give the Country column a look, you’ll see there are names of continents and regions included. These names are only included to make it simpler to find countries, as they contain no data.\nLuckily for us, these region names were also stored in the “Regional totals” sheet. We can use the Region column of this dataset to filter out the names we don’t want.\nRun the code below to read in the “Regional totals” data.\n\ncont_region &lt;- read_xlsx(\"data/gov_spending_per_capita.xlsx\", \n                      sheet = \"Regional totals\", \n                      skip = 14,\n                      n_max = 36) |&gt; \n  filter(Region != \"World total (including Iraq)\", \n         Region != \"World total (excluding Iraq)\")\n\nWe can use the function pull() to extract just the values of the column Region.\n\nregions &lt;- cont_region |&gt; \n  pull(Region)\n\nThen we can use that to filter out or exclude the rows that contain regions instead of countries.\n\nmilitary_clean &lt;- military |&gt; \n  filter(!Country %in% regions)\n\n2. Write a sentence describing what the line of code filter(!Country %in% regions) is doing in the context of the data.\n\nInsert Answer Here\n\n\nCanvas Question #1\n3. Complete the code below to figure out what four regions were NOT removed from the military_clean data set?\nHint: the regions that were not removed have missing values for every column except Country.\n\nmilitary_clean |&gt; \n  filter(if_all(.cols = _________,   #hint: what is the easiest way to include every column except `Country`\n                .fns = __________)   #hint: what function in R (there are several) tests if a value is missing or is NA?\n         )\n\nError in parse(text = input): &lt;text&gt;:2:26: unexpected input\n1: military_clean |&gt; \n2:   filter(if_all(.cols = __\n                            ^"
  },
  {
    "objectID": "group-activities/week-8/pa-5-tidyr-dplyr.html#data-organization",
    "href": "group-activities/week-8/pa-5-tidyr-dplyr.html#data-organization",
    "title": "PA 5: Military Spending",
    "section": "Data Organization",
    "text": "Data Organization\n\nWe are interested in comparing the military expenditures of countries in Eastern Europe. Our desired plot looks something like this:\n\n\n\nDesired plot: Countries from Eastern Europe adn their military spending.\n\n\nUnfortunately, if we want a point representing the spending for every country and year, we need every year to be a single column!\nTo tidy a dataset like this, we need to pivot the columns of years from wide format to long format. To do this process we need three arguments:\n\ncols: The set of columns that represent values, not variables. In these data, those are all the columns from 1988 to 2019.\nnames_to: The name of the variable that should be created to move these columns into. In these data, this could be \"year\".\nvalues_to: The name of the variable that should be created to move these column’s values into. In these data, this could be labeled \"spending\".\n\nThese form the three required arguments for the pivot_longer() function.\n4. Pivot the cleaned up military data set to a “longer” orientation. Save this new “long” version as a new object called military_long.\nHint: Do not overwrite your cleaned up dataset!"
  },
  {
    "objectID": "group-activities/week-8/pa-5-tidyr-dplyr.html#data-visualization",
    "href": "group-activities/week-8/pa-5-tidyr-dplyr.html#data-visualization",
    "title": "PA 5: Military Spending",
    "section": "Data Visualization",
    "text": "Data Visualization\n\nNow that we’ve transformed the data, let’s create a plot to explore military spending across Eastern European countries.\n5. Create side-by-side boxplots to explore the military spending between Eastern European countries.\nHint 1: You will need to remove all other countries except the Eastern European ones before initiating your plot.\nHint 2: Place the Country variable on an axis that makes it easier to read the labels\nHint 3: Make sure you change the plot title and axis labels to accurately represent the plot.\n\n# Countries to include in the plot! \neastern_europe &lt;- c(\"Armenia\", \n                    \"Azerbaijan\",\n                    \"Belarus\", \n                    \"Georgia\", \n                    \"Moldova\", \n                    \"Russia\", \n                    \"Ukraine\")\n\n# Hint - look at the code chunk `filter-regions` and Question 2 for code similar to what you will want to use to filter out just these countries.  \n\n\nCanvas Question 2 & Question 3\n6. Looking at the plot you created above, which Eastern European country had the second highest median military expenditure?.\n7. Looking at the plot you created above, which Eastern European country had the largest variability in military expenditures over time?"
  },
  {
    "objectID": "group-activities/week-10/pa-7-covid.html",
    "href": "group-activities/week-10/pa-7-covid.html",
    "title": "PA 7: COVID-19 Infections and Impact on States",
    "section": "",
    "text": "This task is complex. It requires many different types of abilities. Everyone will be good at some of these abilities but nobody will be good at all of them. In order to produce the best product possible, you will need to use the skills of each member of your group."
  },
  {
    "objectID": "group-activities/week-10/pa-7-covid.html#goals-for-the-activity",
    "href": "group-activities/week-10/pa-7-covid.html#goals-for-the-activity",
    "title": "PA 7: COVID-19 Infections and Impact on States",
    "section": "Goals for the Activity",
    "text": "Goals for the Activity\n\nUse the dplyr verbs to transform your data\n\nCreate new data sets through the joining of data from various sources\nUse forcats to reorder values on a graph for easier comparison\n\nTHROUGHOUT THE Activity be sure to follow the Style Guide by doing the following:\n\nload the appropriate packages at the beginning of the Quarto document\n\nuse proper spacing\n\nadd labels to all code chunks\n\ncomment at least once in each code chunk to describe why you made your coding decisions\n\nadd appropriate labels to all graphic axes"
  },
  {
    "objectID": "group-activities/week-10/pa-7-covid.html#setup---united-states-covid-19-cases-and-deaths",
    "href": "group-activities/week-10/pa-7-covid.html#setup---united-states-covid-19-cases-and-deaths",
    "title": "PA 7: COVID-19 Infections and Impact on States",
    "section": "Setup - United States COVID-19 Cases and Deaths",
    "text": "Setup - United States COVID-19 Cases and Deaths\nStarting in January 2020, the New York Times started reporting on COVID-19 infections in the United States and eventually created a Githhub Repository of the data they used and reported on in their stories (a field called “Data Journalism”). They ended their data collection in March 2023 and switched to just using data from national reporting systems.\nWe will use their data to evaluate COVID-19 and how it varied across different states. Here are the NY Times data on cumulative cases by date and states (including territories).\n\n# data comes from NY Times GitHub Repository - ends March 2023\n# not evaluating this code chunk because we will clean the data and use the clean data set\ncases &lt;- read_csv(\"https://raw.githubusercontent.com/nytimes/covid-19-data/master/us-states.csv\")\n\nNote that both cases and deaths are cumulative by date and we will want to observe just the unique cases per day so we can get various estimates of totals across the states.\nIf we want to extract the daily cases we can use the following code which will calculate the difference in (cumulative) cases for one day minus the previous day using the diff() function from base R.\n\n# calculates the unique new daily cases and deaths for each state\n# eval is false since we created a new data set we will use going forward\ncases |&gt; \n  group_by(state) |&gt; \n  arrange(state, date) |&gt; \n  mutate(cases_daily = c(cases[1], diff(cases)),\n         deaths_daily = c(deaths[1], diff(deaths))) |&gt; \n  ungroup() |&gt; \n  write_csv(\"covid_cases_us.csv\")\n\nNow that are data is in the format we need (sort of), we will start our analysis."
  },
  {
    "objectID": "group-activities/week-10/pa-7-covid.html#part-1-greatest-number-of-cases",
    "href": "group-activities/week-10/pa-7-covid.html#part-1-greatest-number-of-cases",
    "title": "PA 7: COVID-19 Infections and Impact on States",
    "section": "Part 1: Greatest Number of Cases",
    "text": "Part 1: Greatest Number of Cases\nFirst, we need to read in our clean data.\nNote - there may be an error in the code below.\n\ncases &lt;- read_csv(\"covid_cases_us.csv\")\n\n\nWhich 10 US States/Territories had the most COVID-19 Cases from January 2020-March 2023\nWe want to identify the states with the most cases (top 10). To do this, we will need to modify our data to find the total number of cases for each state. The code below does this but it has errors!\nCorrect the errors and then assign the resulting data to state_totals.\n\ncases |&gt; \n  groupby(state) |&gt; \n  sum(total = sum(case_daily)) |&gt; \n  ungroup() # this is useful to do after a group_by calculation is complete so you do not continue grouping by those variables \n\nNow use the states_totals and identify the top ten states/territories with the most cases between January 2020 and March 2023. Then make a graph ordered by greatest number of cases to least number of cases (Hint: use forcats functions to help you).\n\nstate_totals |&gt; \n  ## order the data by total cases\n  ## extract just the top ten (Hint - look at the `slice() functions)\n  ## create a bar chart with x as the totals and y as the state names\n  ## order the states by greatest to smallest total on the graph\n  ## label, color, update as necessary to provide all relevant information\n\n\n\nCanvas Quiz Question 1\nWhich state had the most COVID-19 cases between January 2020 and March 2023?\n\nInsert Answer Here\n\n\n\nOther Question\nIs this the best way to look at our data? Is looking at just the total number of cases the best way to compare states?\n\nInsert Answer Here"
  },
  {
    "objectID": "group-activities/week-10/pa-7-covid.html#part-2-updating-our-data-source",
    "href": "group-activities/week-10/pa-7-covid.html#part-2-updating-our-data-source",
    "title": "PA 7: COVID-19 Infections and Impact on States",
    "section": "Part 2: Updating our Data Source",
    "text": "Part 2: Updating our Data Source\nHopefully you realized that there is a flaw in our comparison. Many of the states with the most cases are also some of the biggest states in terms of population size! So is there a better way to make comparisons between groups with differing group sizes at baseline? YES! Here are a few options:\n\nCalculate the Proportion\n\nCalculate the Percentage\n\nCalculate a Rate, such as Rate per 100,000 people\n\nTo do any of the above calculations, we would need the population sizes for each state. Here is data from the US Census Bureau on the state estimated population size in 2019.\nNote - there may be an error in the code below.\n\nus_pop &lt;- read_csv(\"USpop2019.csv\")\n\n\nCalculate a Relative Rate for Comparison\nChoose one of the above statistics to calculate to make our comparison between states/territories. Then recreate your graph from above\n\nstate_totals |&gt; \n  ## add in column with state population sizes  \n  ## calculate your chosen relative rate (e.g. proportion, percentage, rate)\n  ## order the data by your relative rate\n  ## extract just the top ten (Hint - look at the `slice() functions)\n  ## create a bar chart with x as the relative rate and y as the state names\n  ## order the states by greatest to smallest relative rate on the graph\n  ## label, color, update as necessary to provide all relevant information\n\n\n\nCanvas Quiz Question 2\nWhich state had highest number of COVID-19 cases relative to population size between January 2020 and March 2023?\n\nInsert Answer Here\n\n\n\nOther Questions\nWhat are some possible issues with our analysis? Consider the following:\n\nData sources and reliability of the data\n\nTime scale and impact of time\n\n\n\n\nInsert Answer Here\n\nWhat other questions would you like to try to answer using this data? Would that require other data sources? What information would you need to answer your questions?\n\nInsert Answer Here"
  },
  {
    "objectID": "labs/instructions/lab-6-instructions.html",
    "href": "labs/instructions/lab-6-instructions.html",
    "title": "Lab 6: Childcare Costs in California",
    "section": "",
    "text": "Be sure to set up a GitHub repository and then use Version Control to set up your Lab 6 R Project so it is connected. Then download this week’s lab file into the folder and include the following:\n\nlab-6-student.qmd\n\n\n\n\nNow, find the lab-6-student.qmd file in the “Files” tab in the lower right hand corner. Click on this file to open it.\nAt the top of the document (in the YAML) there is an author line that says \"Your name here!\". Change this to be your name and save your file either by clicking on the blue floppy disk or with a shortcut (command / control + s).\n\n\n\nNow for our last step, we need to commit the files to our repo.\n\nClick the “Git” tab in upper right pane\nCheck the “Staged” box for the lab-6-student.qmd file\nClick “Commit”\nIn the box that opens, type a message in “Commit message”, such as “Added my name”.\nClick “Commit”.\nClick the green “Push” button to send your local changes to GitHub.\n\nRStudio will display something like:\n&gt;&gt;&gt; /usr/bin/git push origin HEAD:refs/heads/main\nTo https://github.com/atheobold/introduction-to-quarto-allison-theobold.git\n   3a2171f..6d58539  HEAD -&gt; main",
    "crumbs": [
      "Labs",
      "Lab 6 Instructions"
    ]
  },
  {
    "objectID": "labs/instructions/lab-6-instructions.html#step-1-make-a-github-repoistory",
    "href": "labs/instructions/lab-6-instructions.html#step-1-make-a-github-repoistory",
    "title": "Lab 6: Childcare Costs in California",
    "section": "",
    "text": "Be sure to set up a GitHub repository and then use Version Control to set up your Lab 6 R Project so it is connected. Then download this week’s lab file into the folder and include the following:\n\nlab-6-student.qmd",
    "crumbs": [
      "Labs",
      "Lab 6 Instructions"
    ]
  },
  {
    "objectID": "labs/instructions/lab-6-instructions.html#step-2-making-a-small-change",
    "href": "labs/instructions/lab-6-instructions.html#step-2-making-a-small-change",
    "title": "Lab 6: Childcare Costs in California",
    "section": "",
    "text": "Now, find the lab-6-student.qmd file in the “Files” tab in the lower right hand corner. Click on this file to open it.\nAt the top of the document (in the YAML) there is an author line that says \"Your name here!\". Change this to be your name and save your file either by clicking on the blue floppy disk or with a shortcut (command / control + s).",
    "crumbs": [
      "Labs",
      "Lab 6 Instructions"
    ]
  },
  {
    "objectID": "labs/instructions/lab-6-instructions.html#step-3-pushing-your-lab-to-github",
    "href": "labs/instructions/lab-6-instructions.html#step-3-pushing-your-lab-to-github",
    "title": "Lab 6: Childcare Costs in California",
    "section": "",
    "text": "Now for our last step, we need to commit the files to our repo.\n\nClick the “Git” tab in upper right pane\nCheck the “Staged” box for the lab-6-student.qmd file\nClick “Commit”\nIn the box that opens, type a message in “Commit message”, such as “Added my name”.\nClick “Commit”.\nClick the green “Push” button to send your local changes to GitHub.\n\nRStudio will display something like:\n&gt;&gt;&gt; /usr/bin/git push origin HEAD:refs/heads/main\nTo https://github.com/atheobold/introduction-to-quarto-allison-theobold.git\n   3a2171f..6d58539  HEAD -&gt; main",
    "crumbs": [
      "Labs",
      "Lab 6 Instructions"
    ]
  },
  {
    "objectID": "labs/instructions/lab-6-instructions.html#california-childcare-costs",
    "href": "labs/instructions/lab-6-instructions.html#california-childcare-costs",
    "title": "Lab 6: Childcare Costs in California",
    "section": "California Childcare Costs",
    "text": "California Childcare Costs\nLet’s start by focusing only on California.\n2. Create a ca_childcare dataset of childcare costs in California, containing (1) county information and (2) just the year and childcare cost variable information from the childcare_costs dataset.\nHint: There are 58 counties in CA and 11 years in the dataset. Therefore, your new dataset should have 53 x 11 = 638 observations. The final data set should have study year, median household income expressed in 2018 dollars, all the variables associated with full-time median price charged for Center-based Care, and California county names\n3. Using a function from the forcats package, complete the code below to create a new variable where each county is categorized into one of the 10 Census regions in California. Use the Region description (from the plot), not the Region number. An example region has been started for you.\nHint: This is probably a good place to use ChatGPT to reduce on tedious work. But you do need to know how to prompt ChatGPT to make it useful!\n\n\n\n\n\n\nTip\n\n\n\nI have provided you with code that eliminates the word “County” from each of the county names in your ca_childcare dataset. You should keep this line of code and pipe into the rest of your data manipulations.\nYou will learn about the str_remove() function from the stringr package next week!\n\n\n\nca_childcare &lt;- ca_childcare |&gt; \n  mutate(county_name = str_remove(county_name, \" County\")) |&gt;\n  ...\n\n4. Let’s consider the median household income of each region, and how that income has changed over time. Create a table with ten rows, one for each region, and two columns, one for 2008 and one for 2018. The cells should contain the median of the median household income (expressed in 2018 dollars) of the region and the study_year. Arrange the rows by 2018 values.\n\n\n\n\n\n\nTip\n\n\n\nThis will require transforming your data! Sketch out what you want the data to look like before you begin to code. You should be starting with your California dataset that contains the regions!\n\n\n5. Which California region had the lowest median full-time median weekly price for center-based childcare for infants in 2018? Does this region correspond to the region with the lowest median income in 2018 that you found in Q4?\n\n\n\n\n\n\nWarning\n\n\n\nThe code should give me the EXACT answer. This means having the code output the exact row(s) and variable(s) necessary for providing the solution. Consider using one of the slice functions.\n\n\n6. The following plot shows, for all ten regions, the change over time of the full-time median price for center-based childcare for infants, toddlers, and preschoolers. Recreate the plot. You do not have to replicate the exact colors or theme, but your plot should have the same content, including the order of the facets and legend, reader-friendly labels, axes breaks, and a loess smoother.\n\n\n\n\n\n\nTip\n\n\n\nThis will require transforming your data! Sketch out what you want the data to look like before you begin to code. You should be starting with your California dataset that contains the regions.\nYou will also be required to use functions from forcats to change the labels and the ordering of your factor levels.\nRemember to avoid “object junk” in your environment!\n\n\n\n\n\nPlot to recreate",
    "crumbs": [
      "Labs",
      "Lab 6 Instructions"
    ]
  },
  {
    "objectID": "labs/instructions/lab-6-instructions.html#there-is-no-challenge-this-week",
    "href": "labs/instructions/lab-6-instructions.html#there-is-no-challenge-this-week",
    "title": "Lab 6: Childcare Costs in California",
    "section": "There is no Challenge this week!",
    "text": "There is no Challenge this week!\nPlease take this time to try your best to recreate the plot I provided in Question 6!\n\nCan you match my colors?\nCan you get the legend in the same order?\nCan you get the facet names to match and be in the same order?\n\nCould you even make the plot better? Could you add dollar signs to the y-axis labels? I might suggest you look into the scales package.",
    "crumbs": [
      "Labs",
      "Lab 6 Instructions"
    ]
  },
  {
    "objectID": "group-activities/week-11/pa-8-covid.html",
    "href": "group-activities/week-11/pa-8-covid.html",
    "title": "PA 8: COVID-19 Infections and California",
    "section": "",
    "text": "This task is complex. It requires many different types of abilities. Everyone will be good at some of these abilities but nobody will be good at all of them. In order to produce the best product possible, you will need to use the skills of each member of your group."
  },
  {
    "objectID": "group-activities/week-11/pa-8-covid.html#goals-for-the-activity",
    "href": "group-activities/week-11/pa-8-covid.html#goals-for-the-activity",
    "title": "PA 8: COVID-19 Infections and California",
    "section": "Goals for the Activity",
    "text": "Goals for the Activity\n\nUse the dplyr verbs to transform your data\n\nUse other tidyverse functions to prepare and plot the data\n\nUse lubridate to deal with dates\n\nTHROUGHOUT THE Activity be sure to follow the Style Guide by doing the following:\n\nload the appropriate packages at the beginning of the Quarto document\n\nuse proper spacing\n\nadd labels to all code chunks\n\ncomment at least once in each code chunk to describe why you made your coding decisions\n\nadd appropriate labels to all graphic axes"
  },
  {
    "objectID": "group-activities/week-11/pa-8-covid.html#setup---united-states-covid-19-cases-and-deaths",
    "href": "group-activities/week-11/pa-8-covid.html#setup---united-states-covid-19-cases-and-deaths",
    "title": "PA 8: COVID-19 Infections and California",
    "section": "Setup - United States COVID-19 Cases and Deaths",
    "text": "Setup - United States COVID-19 Cases and Deaths\nStarting in January 2020, the New York Times started reporting on COVID-19 infections in the United States and eventually created a Githhub Repository of the data they used and reported on in their stories (a field called “Data Journalism”). They ended their data collection in March 2023 and switched to just using data from national reporting systems.\nWe will use their data to evaluate COVID-19 and how it varied across different states. Here are the NY Times data on cumulative cases by date and states (including territories).\n\n# data comes from NY Times GitHub Repository - ends March 2023\n# not evaluating this code chunk because we will clean the data and use the clean data set\ncases &lt;- read_csv(\"https://raw.githubusercontent.com/nytimes/covid-19-data/master/us-states.csv\")\n\nNote that both cases and deaths are cumulative by date and we will want to observe just the unique cases per day so we can get various estimates of totals across the states.\nIf we want to extract the daily cases we can use the following code which will calculate the difference in (cumulative) cases for one day minus the previous day using the diff() function from base R.\n\n# calculates the unique new daily cases and deaths for each state\n# eval is false since we created a new data set we will use going forward\ncases |&gt; \n  group_by(state) |&gt; \n  arrange(state, date) |&gt; \n  mutate(cases_daily = c(cases[1], diff(cases)),\n         deaths_daily = c(deaths[1], diff(deaths))) |&gt; \n  ungroup() |&gt; \n  write_csv(\"covid_cases_us.csv\")\n\nNow that are data is in the format we need (sort of), we will start our analysis."
  },
  {
    "objectID": "group-activities/week-11/pa-8-covid.html#california-covid-19-cases",
    "href": "group-activities/week-11/pa-8-covid.html#california-covid-19-cases",
    "title": "PA 8: COVID-19 Infections and California",
    "section": "California COVID-19 Cases",
    "text": "California COVID-19 Cases\nFirst, we need to read in our clean data.\n\ncases &lt;- read_csv(\"covid_cases_us.csv\")\n\n\nCalifornia Monthly COVID-19 Cases from January 2020 - March 2023\nWe want to create a graph that plots the number of cases per month in California. We want the x-axis of the plot to have the month/year (e.g. March 2021), and the number of cases on the y-axis. The months/years should be in order chronologically.\nBelow is some code that can help you get started with the process of working with the data. Use the functions from lubridate to help you extract out the right information. You will also use functions learned from other packages such as dplyr.\n\ncases |&gt; \n  filter(____________) |&gt; \n  mutate(date = ___(date),\n         month = ___(date, label = , abbr = ),\n         year = ___(date)) |&gt; \n  unite()\n\n\nCanvas Quiz Question 1\nWhich Month in California had the most COVID-19 cases between January 2020 and March 2023?\n\nInsert Answer Here\n\n\n\n\n\nWhat Did California COVID-19 Cases Look Like in 2021\nCreate a graph that maps the number of cases in California in 2021 only. Be sure to add all guidelines for creating good graphics.\n\nCanvas Quiz Question 2\nWhich month in 2021 had the fewest number of cases in California?\n\nInsert Answer Here\n\n\n\n\n\nCreate your own graph\nUsing the COVID-19 data, create your graph to answer you own research question. You will submit that graph as png file in your Canvas quiz. Include your research question as the subtitle of the graph."
  },
  {
    "objectID": "group-activities/week-4/pa-3-ggplot.html",
    "href": "group-activities/week-4/pa-3-ggplot.html",
    "title": "PA 3: Using Data Visualization to Find the Penguins",
    "section": "",
    "text": "Today you will be exploring different types of visualizations to uncover which species of penguins reside on different islands.\nThis task is complex. It requires many different types of abilities. Everyone will be good at some of these abilities but nobody will be good at all of them. In order to solve this puzzle, you will need to use the skills of each member of your group.\nSome advice: If you aren’t sure how to make a specific plot or how to customize a look over the class text for this week and make use of the ggplot2 cheatsheet."
  },
  {
    "objectID": "group-activities/week-4/pa-3-ggplot.html#groupwork-protocols",
    "href": "group-activities/week-4/pa-3-ggplot.html#groupwork-protocols",
    "title": "PA 3: Using Data Visualization to Find the Penguins",
    "section": "Groupwork Protocols",
    "text": "Groupwork Protocols\nDuring the Practice Activity, you and your partner will alternate between two roles—Developer and Coder.\nWhen you are the Developer, you will type into the Quarto document in RStudio. However, you do not type your own ideas. Instead, you type what the Coder tells you to type. You are permitted to ask the Coder clarifying questions, and, if both of you have a question, you are permitted to ask the professor. You are expected to run the code provided by the Coder and, if necessary, to work with the Coder to debug the code. Once the code runs, you are expected to collaborate with the Coder to write code comments that describe the actions taken by your code.\nWhen you are the Coder, you are responsible for reading the instructions / prompts and directing the Developer what to type in the Quarto document. You are responsible for managing the resources your group has available to you (e.g., cheatsheet, textbook). If necessary, you should work with the Developer to debug the code you specified. Once the code runs, you are expected to collaborate with the Developer to write code comments that describe the actions taken by your code.\n\nGroup Norms\nRemember, your group is expected to adhere to the following norms:\n\nThink and work together. Do not divide the work.\nYou are smarter together.\nNo cross-talk with other groups."
  },
  {
    "objectID": "group-activities/week-4/pa-3-ggplot.html#step-1-install-the-palmerpenguins-package",
    "href": "group-activities/week-4/pa-3-ggplot.html#step-1-install-the-palmerpenguins-package",
    "title": "PA 3: Using Data Visualization to Find the Penguins",
    "section": "Step 1: Install the palmerpenguins Package",
    "text": "Step 1: Install the palmerpenguins Package\nWe will be creating visualizations using the ggplot2 package.\nFor this activity, we will be exploring the penguins data from the palmerpenguins package, which has fantastic documentation with really awesome artwork. So, you will need to install the palmerpenguins package. Run the following code in your console:\ninstall.packages(\"palmerpenguins\")"
  },
  {
    "objectID": "group-activities/week-4/pa-3-ggplot.html#step-2-create-a-set-up-code-chunk",
    "href": "group-activities/week-4/pa-3-ggplot.html#step-2-create-a-set-up-code-chunk",
    "title": "PA 3: Using Data Visualization to Find the Penguins",
    "section": "Step 2: Create a Set-up Code Chunk",
    "text": "Step 2: Create a Set-up Code Chunk\n\nLocate the code chunk at the beginning of your document (directly under the YAML).\nName the code chunk setup (with the hashpipe #|)\nSpecify the code chunk options (with the hashpipe #|) that the messages from loading in the packages should not be included.\nLoad in the tidyverse or ggplot2 package.\nLoad in the palmerpenguins package."
  },
  {
    "objectID": "group-activities/week-4/pa-3-ggplot.html#step-3-accessing-the-penguins-dataset",
    "href": "group-activities/week-4/pa-3-ggplot.html#step-3-accessing-the-penguins-dataset",
    "title": "PA 3: Using Data Visualization to Find the Penguins",
    "section": "Step 3: Accessing the penguins Dataset",
    "text": "Step 3: Accessing the penguins Dataset\nI like to tangibly see the data set I will be working with so let’s pull the penguins data into the R environment. Run the code below and you should see the penguins data appear in the top right Environment tab.\n\ndata(penguins)\n\nWarning in data(penguins): data set 'penguins' not found"
  },
  {
    "objectID": "group-activities/week-4/pa-3-ggplot.html#step-4-get-to-know-the-data",
    "href": "group-activities/week-4/pa-3-ggplot.html#step-4-get-to-know-the-data",
    "title": "PA 3: Using Data Visualization to Find the Penguins",
    "section": "Step 4: Get to Know the Data",
    "text": "Step 4: Get to Know the Data\nWhat variables are included in these data? What units are the variables measured in? What does each row represent?\n\nInsert Answer Here"
  },
  {
    "objectID": "group-activities/week-4/pa-3-ggplot.html#step-5-barchart",
    "href": "group-activities/week-4/pa-3-ggplot.html#step-5-barchart",
    "title": "PA 3: Using Data Visualization to Find the Penguins",
    "section": "Step 5: Barchart",
    "text": "Step 5: Barchart\nUse ggplot2 to draw a barchart of different species included in the dataset."
  },
  {
    "objectID": "group-activities/week-4/pa-3-ggplot.html#step-6-scatterplot",
    "href": "group-activities/week-4/pa-3-ggplot.html#step-6-scatterplot",
    "title": "PA 3: Using Data Visualization to Find the Penguins",
    "section": "Step 6: Scatterplot",
    "text": "Step 6: Scatterplot\nUse ggplot2 to create a scatterplot of the relationship between the bill length (bill_length_mm) and bill depth (bill_depth_mm)."
  },
  {
    "objectID": "group-activities/week-4/pa-3-ggplot.html#step-7-adding-a-categorical-variable",
    "href": "group-activities/week-4/pa-3-ggplot.html#step-7-adding-a-categorical-variable",
    "title": "PA 3: Using Data Visualization to Find the Penguins",
    "section": "Step 7: Adding A Categorical Variable",
    "text": "Step 7: Adding A Categorical Variable\n\nBuilding off of the plot you made in Step 6, add an aesthetic to differentiate the species of the penguins in the scatterplot by color."
  },
  {
    "objectID": "group-activities/week-4/pa-3-ggplot.html#step-8-adding-another-categorical-variable",
    "href": "group-activities/week-4/pa-3-ggplot.html#step-8-adding-another-categorical-variable",
    "title": "PA 3: Using Data Visualization to Find the Penguins",
    "section": "Step 8: Adding Another Categorical Variable",
    "text": "Step 8: Adding Another Categorical Variable\nBuilding off of the plot you made in Step 7, add the location of the penguins ( island) to your visualization. There may be more than one method to address this, however, one method will more easily allow you to address the questions below."
  },
  {
    "objectID": "weeks/week-3-version-control.html#objectives",
    "href": "weeks/week-3-version-control.html#objectives",
    "title": "Week 3: Version Control with Git and GitHub",
    "section": "0.1 Objectives",
    "text": "0.1 Objectives\nMost of this section is either heavily inspired by Happy Git and Github for the UseR (Bryan, Hester, and The Stat 545 TAs 2021) or directly links to that book.\n\nRecognize the benefits of using version control to improve your coding practices and workflow.\nIdentify git / GitHub as a version control platform (and helper).\nInstall git onto your computer and register for a GitHub account\nStart applying version control practices to your workflow.",
    "crumbs": [
      "Weekly materials",
      "Week 3 - Version Control"
    ]
  },
  {
    "objectID": "weeks/week-3-version-control.html#footnotes",
    "href": "weeks/week-3-version-control.html#footnotes",
    "title": "Week 3: Version Control with Git and GitHub",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nYes, I’m aware that this sounds paranoid. It’s been a very rare occasion that I’ve needed to restore something from another backup. You don’t want to take chances.↩︎",
    "crumbs": [
      "Weekly materials",
      "Week 3 - Version Control"
    ]
  },
  {
    "objectID": "slides/week-3/week-3-intro-version-control.html#git-vs-github",
    "href": "slides/week-3/week-3-intro-version-control.html#git-vs-github",
    "title": "Version Control",
    "section": "Git vs GitHub",
    "text": "Git vs GitHub\n\n\n\n\n\n\n\n\n\n\n\n\nA system for version control that manages a collection of files in a structured way.\nUses the command line or a GUI.\nGit is local."
  },
  {
    "objectID": "slides/week-3/week-3-intro-version-control.html#git-vs-github-1",
    "href": "slides/week-3/week-3-intro-version-control.html#git-vs-github-1",
    "title": "Version Control",
    "section": "Git vs GitHub",
    "text": "Git vs GitHub\n\n\n\n\n\n\n\n\nA system for version control that manages a collection of files in a structured way.\nUses the command line or a GUI.\nGit is local.\n\n\n\n\n\n\n\n\nA cloud-based service that lets you use git across many computers.\nBasic services are free, advanced services are paid (like RStudio!).\nGitHub is remote."
  },
  {
    "objectID": "slides/week-3/week-3-intro-version-control.html#why-learn-github",
    "href": "slides/week-3/week-3-intro-version-control.html#why-learn-github",
    "title": "Version Control",
    "section": "Why Learn GitHub?",
    "text": "Why Learn GitHub?\n\nGitHub provides a structured way for tracking changes to files over the course of a project.\n\n\nThink Google Docs or Dropbox history, but more structured and powerful!\n\n\nGitHub makes it easy to have multiple people working on the same files at the same time.\nYou can host a URL of fun things (like the class text, these slides, the course website, etc.) with GitHub pages."
  },
  {
    "objectID": "slides/week-3/week-3-intro-version-control.html#git-repositories",
    "href": "slides/week-3/week-3-intro-version-control.html#git-repositories",
    "title": "Version Control",
    "section": "Git Repositories",
    "text": "Git Repositories\nGit is based on repositories.\n\n\n\nThink of a repository (repo) as a directory (folder) for a single project.\n\nThis directory will likely contain code, documentation, data, to do lists, etc. associated with the project.\nYou can link a local repo with a remote copy."
  },
  {
    "objectID": "slides/week-3/week-3-intro-version-control.html#cloning-a-repo",
    "href": "slides/week-3/week-3-intro-version-control.html#cloning-a-repo",
    "title": "Version Control",
    "section": "Cloning a Repo",
    "text": "Cloning a Repo\n\n\n\nCreate an exact copy of a remote repo on your local machine."
  },
  {
    "objectID": "slides/week-3/week-3-intro-version-control.html#committing-changes",
    "href": "slides/week-3/week-3-intro-version-control.html#committing-changes",
    "title": "Version Control",
    "section": "Committing Changes",
    "text": "Committing Changes\nTell git you have made changes you want to add to the repo.\n\nAlso provide a commit message – a short label describing what the changes are and why they exist.\n\n\n\nThe red line is a change we commit (add) to the repo.\n\n\n\n\n\n\n\n\nThe log of these changes is called your commit history.\n\nYou can always go back to old copies!"
  },
  {
    "objectID": "slides/week-3/week-3-intro-version-control.html#commit-tips",
    "href": "slides/week-3/week-3-intro-version-control.html#commit-tips",
    "title": "Version Control",
    "section": "Commit Tips",
    "text": "Commit Tips\n\nUse short, but informative commit messages.\nCommit small blocks of changes – commit every time you accomplish a small task (e.g., one problem in the lab).\n\nYou’ll have a set of bite-sized changes (with description) to serve as a record of what you’ve done.\nWith frequent commits, its easier to find the issue if / when you mess up!"
  },
  {
    "objectID": "slides/week-3/week-3-intro-version-control.html#pushing-changes",
    "href": "slides/week-3/week-3-intro-version-control.html#pushing-changes",
    "title": "Version Control",
    "section": "Pushing Changes",
    "text": "Pushing Changes\n\n\n\nUpdate the copy of your repo on GitHub so it has the most recent changes you’ve made on your machine."
  },
  {
    "objectID": "slides/week-3/week-3-intro-version-control.html#pulling-changes",
    "href": "slides/week-3/week-3-intro-version-control.html#pulling-changes",
    "title": "Version Control",
    "section": "Pulling Changes",
    "text": "Pulling Changes\n\n\n\nUpdate the local copy of your repo (the copy on your computer) with the version on GitHub."
  },
  {
    "objectID": "slides/week-3/week-3-intro-version-control.html#workflow",
    "href": "slides/week-3/week-3-intro-version-control.html#workflow",
    "title": "Version Control",
    "section": "Workflow",
    "text": "Workflow\nWhen you have an existing local repo:\n\n\nPull the repo to make sure you have the most up to date version (especially if you are working on different computers).\nMake some changes locally.\nCommit the changes to git.\nPush your changes to GitHub."
  },
  {
    "objectID": "slides/week-3/week-3-intro-version-control.html#previous-steps",
    "href": "slides/week-3/week-3-intro-version-control.html#previous-steps",
    "title": "Version Control",
    "section": "Previous Steps",
    "text": "Previous Steps\nYou were asked to complete the following steps before coming to class today:\n\nCreate a GitHub account\nIntroduce yourself to git (in RStudio)\nGenerate a Personal Access Token (PAT)\nStore your PAT in RStudio"
  },
  {
    "objectID": "slides/week-3/week-3-intro-version-control.html#verifying-your-connection",
    "href": "slides/week-3/week-3-intro-version-control.html#verifying-your-connection",
    "title": "Version Control",
    "section": "Verifying Your Connection",
    "text": "Verifying Your Connection\n\n\nOpen RStudio and run the following code in your console (lower left pane):\n\n\n\n\n\nusethis::git_sitrep()\n\n\n\nYou should see something like:\n\n── GitHub user \n• Default GitHub host: 'https://github.com'\n• Personal access token for 'https://github.com': '&lt;discovered&gt;'\n• GitHub user: 'jcanner'\n• Token scopes: 'admin:org, admin:public_key, delete:packages, delete_repo, gist, notifications, repo, user, workflow, write:packages'\n• Email(s): 'jcanner@csumbedu'\n12439090+jcanner@users.noreply.github.com'\nℹ No active usethis project\n\n\n\nIf that is not the case, Dr. Canner will help you troubleshoot in 5-minutes!"
  },
  {
    "objectID": "weeks/week-10-factors.html",
    "href": "weeks/week-10-factors.html",
    "title": "Working with Categorical Variables",
    "section": "",
    "text": "The second section of this coursework is focused on working with factor data types. By the end of this week, you should be able to:\n\nUse forcats to reorder and relabel factor variables in data cleaning steps and data visualizations.\n\n\n\n📖 Readings: 15-minutes\n\n\n✅ Check-ins: 1\n\n\n\n1 Factors with forcats\nWe have been floating around the idea of factor data types. In this section, we will formally define factors and why they are needed for data visualization and analysis. We will then learn useful functions for working with factors in our data cleaning steps.\n\n\n\n\n\n\n\n\n\n\n\nIn short, factors are categorical variables with a fixed number of values (think a set number of groups). One of the main features that set factors apart from groups is that you can reorder the groups to be non-alphabetical. In this section we will be using the forcats package (part of the tidyverse!) to create and manipulate factor variables.\n📖 Required Reading: R4DS Chapter 16 (Factors)\n\n✅ Check-in: Functions from forcats\nAnswer the following questions.\n1. Which of the following tasks can fct_recode() accomplish? Select all that apply!\n\nchanges the values of the factor levels\nreorders the levels of a factor\nremove levels of a factor you don’t want\ncollapse levels of a factor into a new level\n\n2. Which of the following tasks can fct_relevel() accomplish?\n\nreorders the levels of a factor\nchanges the values of the factor levels\nremove levels of a factor you don’t want\ncollapse levels of a factor into a new level\n\n3. What is the main difference between fct_collapse() and fct_recode()?\n\nfct_recode() uses strings to create factor levels\nfct_recode() uses groups to create factor levels\nfct_recode() cannot create an “Other” group\n\n4. What ordering do you get with fct_reorder()?\n\nlargest to smallest based on another variable\norder of appearance\nlargest to smallest based on counts\nalphabetical order\n\n5. What ordering do you get with fct_inorder()?\n\norder of appearance\nalphabetical order\nlargest to smallest based on counts\nlargest to smallest based on another variable :::",
    "crumbs": [
      "Weekly materials",
      "Week 10 - Factors"
    ]
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "portfolio/portfolio-overview.html",
    "href": "portfolio/portfolio-overview.html",
    "title": "Portfolio Part 1: Development and Planning",
    "section": "",
    "text": "The Portfolio component is a place for you to put your R skills into action on a problem you are interested in with the goal of have a project you could share with future employers.\nIt should have the following qualities:\n\nIt is a real-world application of R that has not exactly been worked out before (e.g. it isn’t a demo from some package or blog).\n\nIt is interesting to you.\n\nIt involves data and analyzing or presenting that data. The data may be data you have from a lab, or something you have retrieved from the web, some examples of good sources: FBI database on crime statistics, National Oceanic and Atmospheric Administration, World Health Organization, Twitter, Yahoo finance data, etc. If you are having problems finding a dataset, see the resources at the end of the project description.\n\nThe analysis and presentation is useful in the real-world.\n\nThese are real-world projects, but they are also class projects and there can be unforeseen unknowns, if you find that it is going to be impossible to finish what you set out to accomplish, please contact your instructor to find a solution.\n\n\nThe final product will be a website page, hosted on your personal website, the includes the following content:\n\nDescription of the proposed research questions\n\nDescription of the data and data source(s)\n\nDescription of data cleaning\n\n2-3 data visualizations with commentary that answer the research questions\n\nThough no code should be visible on the website, the quarto document used to create the final product should contain all code for data cleaning and data visualization, commented and following a coding style conventions.",
    "crumbs": [
      "Portfolio",
      "Portfolio Part 1"
    ]
  },
  {
    "objectID": "portfolio/portfolio-overview.html#portfolio-expectations",
    "href": "portfolio/portfolio-overview.html#portfolio-expectations",
    "title": "Portfolio Part 1: Development and Planning",
    "section": "",
    "text": "The final product will be a website page, hosted on your personal website, the includes the following content:\n\nDescription of the proposed research questions\n\nDescription of the data and data source(s)\n\nDescription of data cleaning\n\n2-3 data visualizations with commentary that answer the research questions\n\nThough no code should be visible on the website, the quarto document used to create the final product should contain all code for data cleaning and data visualization, commented and following a coding style conventions.",
    "crumbs": [
      "Portfolio",
      "Portfolio Part 1"
    ]
  },
  {
    "objectID": "portfolio/portfolio-overview.html#respond-to-the-following-prompts",
    "href": "portfolio/portfolio-overview.html#respond-to-the-following-prompts",
    "title": "Portfolio Part 1: Development and Planning",
    "section": "2.1 Respond to the following prompts:",
    "text": "2.1 Respond to the following prompts:\nProvide a complete answer to each of the following questions and prompts.\n\nData Description\n\nIdentify your data source.\nDescribe your data, including variables and data types.\n\nIdentify the research questions you want to answer.\n\n\n\nData Visualization\n\nWhat do you want your final visualizations to look like?\n\nWhat do you want to highlight on your final visualizations in order to answer your research questions? How do you plan to do that?\n\nWhat is missing from your data or would need to change in your data to create these visualizations?\n\n\n\nData Cleaning\nThe answer to at least three of these questions should be “YES” for the data to meet the necessary standards to demonstrate your cleaning. Your data source should not be an already perfectly prepared data set.\n\nDo you need to reformat any variables into different types (e.g. factors, time, dates, strings)? Or remove information from variable values?\nDo you need to deal with any missing data, especially missing data coded other than NA?\n\nDo you need to filter your data? How?\nDo you need to create any new variables? What variables? How?\nDo you need to add new data (join) to your data? What data? How?\n\nAre there any variables you can exclude from your data?\n\nDo you need pivot your data in any way? Why? How?\nDo you need to summarize any of the variables? Which ones? How?\nWhat other aspects of your data need to be “fixed” in order to make your data visualizations?",
    "crumbs": [
      "Portfolio",
      "Portfolio Part 1"
    ]
  },
  {
    "objectID": "group-activities/week-2/expert-designer.html",
    "href": "group-activities/week-2/expert-designer.html",
    "title": "Expert Designer",
    "section": "",
    "text": "This activity is designed to simulate the environment in which you will be working for the weekly Practice Activities."
  },
  {
    "objectID": "group-activities/week-2/expert-designer.html#instructions-roles-rules",
    "href": "group-activities/week-2/expert-designer.html#instructions-roles-rules",
    "title": "Expert Designer",
    "section": "Instructions, Roles, & Rules",
    "text": "Instructions, Roles, & Rules\nGet into groups of four (4) students. Similar to last week’s Broken Circles activity, each of you has an envelope containing different shapes.\n\nDesigner\nIn this activity, one person in your group will take on the role of the “designer,” two members will be the “players,” and one person will be the “observer.” The designer uses every shape in the envelope to create a design that is not shared with anyone else. The designer is then tasked with instructing the players how to replicate the design they created, but there are some rules.\n\nThe designer cannot touch the players shapes.\nThe designer cannot tell the players how to assemble the shapes into the correct design.\nThe designer can respond to questions posed by the players.\n\n\n\nPlayers\n“Players” are tasked with solving the design made by the “designer.” Players can pose questions to the designer to uncover their design. Once an player believes they have figured out the design, the designer should check their solution. If the designer says the solution is correct, then the player can assist the designer in answering questions posed by the other players.\n\n\nObserver\nThe “observer” is tasked with monitoring the interactions between the designer and the players. Specifically, the observer should check off the number of times they see two behaviors occurring, (1) explaining by telling how, and (2) everybody helps. The observer should have a scoring sheet to tally the number of times they see each behavior."
  },
  {
    "objectID": "group-activities/week-2/expert-designer.html#getting-started",
    "href": "group-activities/week-2/expert-designer.html#getting-started",
    "title": "Expert Designer",
    "section": "Getting Started",
    "text": "Getting Started\nChoose one person in your group to be the first designer. Carry out the process described above until every observer has correctly identified the design. You will have 10-minutes to complete this task.\nOnce you have completed this task, if there is still time remaining your group should choose a new designer and repeat the process."
  },
  {
    "objectID": "group-activities/week-2/expert-designer.html#discussion",
    "href": "group-activities/week-2/expert-designer.html#discussion",
    "title": "Expert Designer",
    "section": "Discussion",
    "text": "Discussion\n\nWhat do you think this game was about? What was its purpose?\nWhat did your group did that made you cooperate more successfully?\nWhat did your group did that made cooperation harder?\nWhat are some behaviors that could be implemented in the future to make cooperation easier?"
  },
  {
    "objectID": "group-activities/pair-programming-norms.html",
    "href": "group-activities/pair-programming-norms.html",
    "title": "Pair Programming Roles",
    "section": "",
    "text": "During our in-class activities, you will be paired with another student. When completing the activity, you will rotate between the following roles every 2-3 minutes:",
    "crumbs": [
      "Course information",
      "Pair Programming Norms"
    ]
  },
  {
    "objectID": "group-activities/pair-programming-norms.html#group-norms",
    "href": "group-activities/pair-programming-norms.html#group-norms",
    "title": "Pair Programming Roles",
    "section": "Group Norms",
    "text": "Group Norms\n\nThink and work together. Do not divide the work.\nYou are smarter together.\nBe open minded.\nNo cross-talk with other groups.\nCommunicate with each other!",
    "crumbs": [
      "Course information",
      "Pair Programming Norms"
    ]
  },
  {
    "objectID": "group-activities/pair-programming-norms.html#completing-the-task",
    "href": "group-activities/pair-programming-norms.html#completing-the-task",
    "title": "Pair Programming Roles",
    "section": "Completing the Task",
    "text": "Completing the Task\nWorking with your partner, complete the Practice Activity in the Quarto document provided. In your roles—Coder and Developer—use the prompts below to help guide the completion of your activity.\n\n\nCoder\nI am looking for…\nI am confused by…\nI notice…\nWhat might be true is…\nWhat’s important is…\nI predict…\nThis reminds me of…\nWhat if we…\nWe could try…\nI am thinking about…\nA line of code I could write is…\n\n\n\nDeveloper\n\nDo you understand what we need to do?\nWhat’s the question we have for Dr. Canner? Can we answer the question ourselves?\nWhat are you focusing on?\nWhat are you thinking now?\nCould you tell me more?\nWhat are you doing (or writing) now? Please elaborate.\nI can’t follow that, run that by me again.\n What other sources of information do we need?\nWhich words should we look up?\nWhat else do we need to complete this problem?",
    "crumbs": [
      "Course information",
      "Pair Programming Norms"
    ]
  },
  {
    "objectID": "group-activities/pair-programming-norms.html#once-youre-finished",
    "href": "group-activities/pair-programming-norms.html#once-youre-finished",
    "title": "Pair Programming Roles",
    "section": "Once You’re Finished",
    "text": "Once You’re Finished\nAt the end of the task, your group will have one completed Quarto document and one rendered HTML, containing your groups’ worked-out solutions and justifications. Everyone must take turns writing the final product (as described above) and everyone must be able to explain every line of code in your final document.",
    "crumbs": [
      "Course information",
      "Pair Programming Norms"
    ]
  },
  {
    "objectID": "course-materials/course_resources.html",
    "href": "course-materials/course_resources.html",
    "title": "R Resources",
    "section": "",
    "text": "Tip\n\n\n\nClick on the link to access the R Cheatsheet related to a specific topic / package!\n\n\n\nWeekly R Cheatsheets\nWeek 1\n\nRStudion IDE\nBase R\n\nWeek 2\n\nQuarto\n\nWeek 3\n\nGit & GitHub\n\nWeek 4\n\nData Visualization with ggplot2\n\nWeek 5\n\nData Import with readr\n\nWeek 6-7\n\nData Wrangling with dplyr\n\nWeek 8-9\n\nData Tidying with tidyr\n\nWeek 10\n\nFactors with forcats\n\nWeek 11\n\nDates with lubridate\nStrings with stringr\n(optional) Regular Expressions\n\nWeek 12\n\nTidy Evaluation\n\nWeek 13\n\nIteration with purrr",
    "crumbs": [
      "Course information",
      "R Resources"
    ]
  },
  {
    "objectID": "group-activities/week-1/broken-circles.html",
    "href": "group-activities/week-1/broken-circles.html",
    "title": "Broken Circles",
    "section": "",
    "text": "This activity is designed to explore how working in groups can be more or less successful."
  },
  {
    "objectID": "group-activities/week-1/broken-circles.html#instructions",
    "href": "group-activities/week-1/broken-circles.html#instructions",
    "title": "Broken Circles",
    "section": "Instructions",
    "text": "Instructions\nThe class will divide into groups of six (6) students. Each of you will be given an envelope with 2-3 pieces of a circle. The goal of this exercise is to put these pieces together in such a way that each member of your group ends up with a complete circle. However, there are a few additional rules to keep things fun:\n\nThis exercise must be done in complete silence. No talking is permitted.\nYou may not point or signal to other players with your hands in any way.\nEach player must put together their own circle. No one else may show a player how to assemble their circle or do it for them.\nThis is an exercise in giving. You may not take a piece from another player, but you may give your pieces—one at a time—to any other member of your group, and members of your group may give pieces to you. As per the previous rule, you may not place a piece in another person’s puzzle; players must complete their own puzzle. Instead, you are expected to hand the piece to the other player."
  },
  {
    "objectID": "group-activities/week-1/broken-circles.html#getting-started",
    "href": "group-activities/week-1/broken-circles.html#getting-started",
    "title": "Broken Circles",
    "section": "Getting Started",
    "text": "Getting Started\nNow that you know the rules, let’s get started! Take the pieces out of your envelope and place them in front of you. Remember, this is a group task. The activity is not completed until everyone in your group has a completed circle in front of them.\nYou have 10-minutes to make your circles. When your group has finished, raise your hand. If you have time remaining, I may ask you to find another way to put the pieces together to form different circles."
  },
  {
    "objectID": "group-activities/week-1/broken-circles.html#discussion",
    "href": "group-activities/week-1/broken-circles.html#discussion",
    "title": "Broken Circles",
    "section": "Discussion",
    "text": "Discussion\n\nWhat do you think this game was about? What was its purpose?\nWhat did your group did that made you cooperate more successfully?\nWhat did your group did that made cooperation harder?\nWhat are some behaviors that could be implemented in the future to make cooperation easier?"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Statistical Computing with R",
    "section": "",
    "text": "This page contains an outline of the topics, content, and assignments for the quarter. Note that this schedule will be updated as the semester progresses, with all changes documented here.\n\n\n\n\n\n\n\n\n\n\nWeek\nDate\nTopic & Preview Activities\nPractice Activity\n\n\n\n\n1\nFriday, 1/24\nIntro to R & RStudio\nBroken Circles Group Warm-up\nCreating Pair Programming Norms\nData Cleaning, Visualization Puzzle\n\n\n2\nFriday, 1/31\nIntro to Quarto\nPair Activity 1: Secret Code\n\n\n3\nFriday, 2/7\nIntro to Version Control\nExpert Designer\nPair Activity 2: Secret Code Revisited\n\n\n4\nFriday, 2/14\nIntro to Data Visualization\nPair Activity 3: Finding Penguins\n\n\n5\nFriday, 2/21\nImporting Data\nPair Activity 4: Evaluating Youth Risk\n\n\n6-7\n\nTransforming Data\n\n\n\n8\nFriday, 3/14\nPivoting and Joining Data\nPair Activity 5: Military Spending in Eastern Europe\n\n\n9\nFriday, 3/21\nPivoting and Joining Data\nPair Activity 6: UN Voting Records\n\n\n10\nFriday, 3/28\nFactors\nPair Activity 7: COVID-19 Comparisons\n\n\n11\nFriday, 4/10\nStrings, Dates, and Times\nPair Activity 8: COVID-19 in California\n\n\n12\nFriday 4/17\n\nPair Activity 9: Writing Functions",
    "crumbs": [
      "Course information",
      "Weekly Schedule"
    ]
  },
  {
    "objectID": "weeks/week-2-quarto.html",
    "href": "weeks/week-2-quarto.html",
    "title": "Week 2: Reproducible Analyses with Quarto",
    "section": "",
    "text": "The theme of this lesson is good management of your files and data. In part two of this week’s coursework you will learn how to identify folders and paths, and create Quarto documents.",
    "crumbs": [
      "Weekly materials",
      "Week 2 - Quarto"
    ]
  },
  {
    "objectID": "weeks/week-2-quarto.html#file-management",
    "href": "weeks/week-2-quarto.html#file-management",
    "title": "Week 2: Reproducible Analyses with Quarto",
    "section": "1.1 File Management",
    "text": "1.1 File Management\nAs boring as it sounds, file management is arguably one of the most important skills a data scientist should have. The reproducibility of a project depends just as much on the way in which the project was stored as the computing tools used. While using R and Quarto make an important step in creating a reproducible analysis, there are other pieces that are arguably just as important—such as file management.\nBelieve it or not, your computer has multiple locations** where files can be stored. There has been a bit of a generational shift as computers have evolved: the “file system” metaphor itself is outdated because no one uses physical files anymore.\n[This article]((https://futurism.com/the-byte/gen-z-kids-file-systems) makes the argument that with modern search capabilities, most people use their computers as a laundry hamper instead of as a nice, organized filing cabinet. However, the laundry hamper approach doesn’t play nicely with working in R and creating Quarto documents.\nIn this class, we will store files according to the Project TIER protocol. More specifically, you will have:\n\na “Stat 210” folder in your Documents folder, containing all your materials associated with STAT 210\na sub-folder for each week (e.g., Week 1, Week 2)\nseparate folders within each week for each assignment (e.g., Practice Activity, Lab)\na separate R Studio Project (and GitHub repository) associated with each assignment\n\nFor example, if you come to my office for help on your lab assignment for Week 2, I would expect your files to look like this:\n\nFile Storage on WindowsFile Storage on a Mac\n\n\n\nThis computer has six total folders in my Documents, one of which is a folder named “STAT 311.” You should have one that is called “STAT 210” or something similar.\n\nInside my STAT course folder is a sub-folder named “Week 1,” which also has a sub-folder (a sub-sub-folder) named “Lab 1.” You can tell what folders Lab 1 lives inside based on the information included at the top of the screen. This is called a “file path,” which tells your computer where a folder / file lives on the computer.\nOn a PC, every file lives on the C Drive, so the “full path” to get to my Lab 1 folder would be:\nC:/Users/jcanner/Documents/STAT 210/Week 1/Lab 1\n\n\n\nOn this Mac, there are six total folders in my Documents, one of which is a folder named “STAT 331.” Inside this folder is a sub-folder named “Week 1,” which also has a sub-folder (a sub-sub-folder) named “Lab 1.”\nOn a Mac, every file lives on the hard drive (it doesn’t have letters like a PC), so the “full path” to get to my Lab 1 folder on a Mac would be:\n/Users/jcanner/Documents/STAT 210/Week 1/Lab 1",
    "crumbs": [
      "Weekly materials",
      "Week 2 - Quarto"
    ]
  },
  {
    "objectID": "weeks/week-2-quarto.html#check-in-stat-210-folder",
    "href": "weeks/week-2-quarto.html#check-in-stat-210-folder",
    "title": "Week 2: Reproducible Analyses with Quarto",
    "section": "1.2 ✅ Check-in: STAT 210 Folder",
    "text": "1.2 ✅ Check-in: STAT 210 Folder\nCheck that your class directory is set up with:\n\nthe location of your Stat 210 folder\na Week 1 sub-folder\na Lab 1 sub-sub-folder (inside the Week 1 folder)\n\n\n\n\n\n\n\nYour folder cannot sync with anything online!\n\n\n\nYour STAT 210 folder cannot be in a folder stored on GoogleDrive, OneDrive, or iCloud! Storing your folder in this location will cause your code to periodically not run and I cannot help you fix it.",
    "crumbs": [
      "Weekly materials",
      "Week 2 - Quarto"
    ]
  },
  {
    "objectID": "weeks/week-2-quarto.html#downloading-quarto",
    "href": "weeks/week-2-quarto.html#downloading-quarto",
    "title": "Week 2: Reproducible Analyses with Quarto",
    "section": "2.1 Downloading Quarto",
    "text": "2.1 Downloading Quarto\nThe software associated with Quarto is automatically downloaded with the newest versions of RStudio. So, if you are using the most up to date version of RStudio (as instructed in Part 1 of this week’s coursework), you should already have Quarto installed on your computer. But, let’s test it out.\nTo ensure you have Quarto installed, carry out the following process:\n\nOpen RStudio\nClick on “File” (in the upper navigation bar)\nSelect “New File” (in the dropdown options)\nSelect “Quarto Document…” (in the dropdown option)\n\n \nIf you have Quarto installed, you should be prompted with the following menu:\n\nIf, instead, you receive a message saying Quarto is not installed on your computer, you need to download Quarto: https://quarto.org/docs/download/",
    "crumbs": [
      "Weekly materials",
      "Week 2 - Quarto"
    ]
  },
  {
    "objectID": "weeks/week-2-quarto.html#introduction-to-quarto",
    "href": "weeks/week-2-quarto.html#introduction-to-quarto",
    "title": "Week 2: Reproducible Analyses with Quarto",
    "section": "2.2 Introduction to Quarto",
    "text": "2.2 Introduction to Quarto\n\n📖 Required Reading: Intro to Quarto\n\n\nHTML Documents\nWe will exclusively use HTML documents in this course. If you are interested in learning more about formatting options for Quarto HTML documents, I would recommend checking out:\n\na discussion of the basics of formatting HTML documents in Quarto\nthe list of all HTML Ffrmatting pptions for Quarto documents",
    "crumbs": [
      "Weekly materials",
      "Week 2 - Quarto"
    ]
  },
  {
    "objectID": "weeks/week-2-quarto.html#check-in-quarto-documents",
    "href": "weeks/week-2-quarto.html#check-in-quarto-documents",
    "title": "Week 2: Reproducible Analyses with Quarto",
    "section": "2.3 ✅ Check-in: Quarto Documents",
    "text": "2.3 ✅ Check-in: Quarto Documents\nQuestion 1: What are the options at the top of a Quarto document (between the --- and --- symbols) called?\n\nXML\nYAML\nREML\nTOML\n\nQuestion 2: What symbols create an R code chunk?\n\n```\n{r}\n```{r}\n`{r}`\n\nQuestion 3: What symbol defines a heading?\n\n$\n_\n*\n#\n\nQuestion 4: When working in a Quarto document, the [visual / source] editor will display the raw Quarto document, whereas the [visual / source] will display the document as it will appear when it is rendered.\nQuestion 5: To produce an HTML report from your Quarto document, you need to click the ____ button.\n\nVisual\nRender\nRender on Save\nSave",
    "crumbs": [
      "Weekly materials",
      "Week 2 - Quarto"
    ]
  },
  {
    "objectID": "labs/instructions/lab-2-instructions.html",
    "href": "labs/instructions/lab-2-instructions.html",
    "title": "Lab 2: Getting Started on your Portfolio",
    "section": "",
    "text": "Either under File, or in the top right corner where the current project name is, select\n\n\n\n\nFor this week, you will create a New Directory.\n\n\n\n\nInstead of New Project, choose Quarto Website\n\nSet up your directory name (it should be your-name-portfolio or something similar) and saved in a location that is NOT on a cloud service (e.g. iCloud or Google Drive). Be sure to check Create a git repositoryand Open in a new session. Create the Project.\n\nNow you have your website!!\n\n\n\nIn the pane at the top right corner there should be a tab that say Build. Under Build there is an option to Render Website, go ahead an click that and it will render the generic website.\n\nHere is roughly what the page will look like.",
    "crumbs": [
      "Labs",
      "Lab 2 Instructions"
    ]
  },
  {
    "objectID": "labs/instructions/lab-2-instructions.html#step-1-make-a-new-project-in-rstudio",
    "href": "labs/instructions/lab-2-instructions.html#step-1-make-a-new-project-in-rstudio",
    "title": "Lab 2: Getting Started on your Portfolio",
    "section": "",
    "text": "Either under File, or in the top right corner where the current project name is, select",
    "crumbs": [
      "Labs",
      "Lab 2 Instructions"
    ]
  },
  {
    "objectID": "labs/instructions/lab-2-instructions.html#step-2-choose-a-new-directory",
    "href": "labs/instructions/lab-2-instructions.html#step-2-choose-a-new-directory",
    "title": "Lab 2: Getting Started on your Portfolio",
    "section": "",
    "text": "For this week, you will create a New Directory.",
    "crumbs": [
      "Labs",
      "Lab 2 Instructions"
    ]
  },
  {
    "objectID": "labs/instructions/lab-2-instructions.html#step-3-choose-quarto-website",
    "href": "labs/instructions/lab-2-instructions.html#step-3-choose-quarto-website",
    "title": "Lab 2: Getting Started on your Portfolio",
    "section": "",
    "text": "Instead of New Project, choose Quarto Website\n\nSet up your directory name (it should be your-name-portfolio or something similar) and saved in a location that is NOT on a cloud service (e.g. iCloud or Google Drive). Be sure to check Create a git repositoryand Open in a new session. Create the Project.\n\nNow you have your website!!",
    "crumbs": [
      "Labs",
      "Lab 2 Instructions"
    ]
  },
  {
    "objectID": "labs/instructions/lab-2-instructions.html#step-4-render-your-website",
    "href": "labs/instructions/lab-2-instructions.html#step-4-render-your-website",
    "title": "Lab 2: Getting Started on your Portfolio",
    "section": "",
    "text": "In the pane at the top right corner there should be a tab that say Build. Under Build there is an option to Render Website, go ahead an click that and it will render the generic website.\n\nHere is roughly what the page will look like.",
    "crumbs": [
      "Labs",
      "Lab 2 Instructions"
    ]
  },
  {
    "objectID": "labs/instructions/lab-2-instructions.html#about",
    "href": "labs/instructions/lab-2-instructions.html#about",
    "title": "Lab 2: Getting Started on your Portfolio",
    "section": "3.1 About",
    "text": "3.1 About\nLet’s start easy. Go into your about.qmd and write a short paragraph introducing yourself. Now is a good time to save your changes then Stage, Commit, and Push your changes to GitHub.",
    "crumbs": [
      "Labs",
      "Lab 2 Instructions"
    ]
  },
  {
    "objectID": "labs/instructions/lab-2-instructions.html#index",
    "href": "labs/instructions/lab-2-instructions.html#index",
    "title": "Lab 2: Getting Started on your Portfolio",
    "section": "3.2 Index",
    "text": "3.2 Index\nThe index.qmd will serve as your home page for your website, so let’s make it pretty! Update the YAML code with the following and then update title. Move a nice profile image into your project folder and change the file name after image: to match your images name and type (e.g. .jpg, .png). Update the LinkedIn and Github links to match your profile links (if you don’t have LinkedIn make one!).\n---\ntitle: \"Judith Canner\"\nabout:\n  template: jolla\n  image: profile.jpg\n  links:\n    - icon: linkedin\n      text: LinkedIn\n      href: https://linkedin.com\n    - icon: github\n      text: Github\n      href: https://github.com\n---\nGo ahead and save and then under Build, Render the website. How does it look?\nWithin the text/markdown area of the .qmd add some of the following information about yourself:\nJudith Canner is a Professor of Statistics and Chair of the Department of Mathematics and Statistics at [California State University, Monterey Bay](http://csumb.edu/mathstat).\n\n## Education\n\nShippensburg University | Shippensburg, PA  \nB.S. in Applied Mathematics | 2001 - 2004\n\n## Experience\n\nWengo Analytics | Head Data Scientist | April 2018 - present\n\nGeoScynce | Chief Analyst | Sept 2012 - April 2018\nGo ahead and save and then under Build, Render the website. Now is a good time to save your changes then Stage, Commit, and Push your changes to GitHub.\nFeel free to make other changes, add additional text, links, or images.",
    "crumbs": [
      "Labs",
      "Lab 2 Instructions"
    ]
  },
  {
    "objectID": "labs/instructions/lab-2-instructions.html#quarto.yml",
    "href": "labs/instructions/lab-2-instructions.html#quarto.yml",
    "title": "Lab 2: Getting Started on your Portfolio",
    "section": "3.3 _quarto.yml",
    "text": "3.3 _quarto.yml\nOpen up the _quarto.yml. This document controls the structure of your webpage. You do not put content here, you simply put information about how the website should render. Your text might look something like this (and if it doesn’t, update it to look like this):\nproject:\n  type: website\n\nwebsite:\n  title: \"Your Name's ePortfolio\"\n  navbar:\n    left:\n      - href: index.qmd\n        text: \"Home\"\n      - href: about.qmd\n        text: \"About Me\"\n\nformat:\n  html:\n    theme: cosmo\n    css: styles.css\n    toc: true\n\neditor: visual\nYou can update the theme if you want - Quarto HTML Theming or customize your theme or even create your own css code (if you know how). That is up to you!\nAt minimum, here is the modification you need to make the following modification - add the output-dir: docs at the top under project/type.\nproject:\n  type: website\n  output-dir: docs\nWhat this does is renders the HTML parts of your website directly into a folder called /docs and this locations is what we will use to publish your webpage on GitHub.\nSave your changes. Build your website (notice a docs file is now created. Now is a good time to save your changes then Stage, Commit, and Push your changes to GitHub",
    "crumbs": [
      "Labs",
      "Lab 2 Instructions"
    ]
  },
  {
    "objectID": "labs/instructions/lab-1-instructions.html",
    "href": "labs/instructions/lab-1-instructions.html",
    "title": "Lab 1: Introduction to Quarto",
    "section": "",
    "text": "Either under File, or in the top right corner where the current project name is, select\n\n\n\n\nFor now, we are simply creating a New R Project. This will generate a .Rproj file and folder of the same name to store all of our content and set our working directory.\n\n\n\n\nFor this week, you will create a New Directory. Once we start using GitHub and Git, we may choose Version Control as our option.\n\n\n\n\nNow set up your file name (for the folder and .Rproj file) and the best subdirectory for your Lab 1. This should be a nested folder within your “STAT 210” Folder on your hard drive (Documents), with the “lab” sub-folder, and “week-2” sub-sub-folder.\nUse the file format your-name-lab-1\n\n\n\n\nNow download the lab file into your new project folder on your computer. Rename the file so that it reads lab-1-your-name.qmd with your first and last name.\nYou can download it here: Lab 1\nThe file should appear in your project folder under your Files tab in the lower right pane. Click it to open it up. Now that you are all set up, go ahead and get started with the rest of the lab!",
    "crumbs": [
      "Labs",
      "Lab 1 & Challenge 1 Instructions"
    ]
  },
  {
    "objectID": "labs/instructions/lab-1-instructions.html#step-1-make-a-new-project-in-rstudio",
    "href": "labs/instructions/lab-1-instructions.html#step-1-make-a-new-project-in-rstudio",
    "title": "Lab 1: Introduction to Quarto",
    "section": "",
    "text": "Either under File, or in the top right corner where the current project name is, select",
    "crumbs": [
      "Labs",
      "Lab 1 & Challenge 1 Instructions"
    ]
  },
  {
    "objectID": "labs/instructions/lab-1-instructions.html#step-2-choose-new-project",
    "href": "labs/instructions/lab-1-instructions.html#step-2-choose-new-project",
    "title": "Lab 1: Introduction to Quarto",
    "section": "",
    "text": "For now, we are simply creating a New R Project. This will generate a .Rproj file and folder of the same name to store all of our content and set our working directory.",
    "crumbs": [
      "Labs",
      "Lab 1 & Challenge 1 Instructions"
    ]
  },
  {
    "objectID": "labs/instructions/lab-1-instructions.html#step-3-choose-a-new-directory",
    "href": "labs/instructions/lab-1-instructions.html#step-3-choose-a-new-directory",
    "title": "Lab 1: Introduction to Quarto",
    "section": "",
    "text": "For this week, you will create a New Directory. Once we start using GitHub and Git, we may choose Version Control as our option.",
    "crumbs": [
      "Labs",
      "Lab 1 & Challenge 1 Instructions"
    ]
  },
  {
    "objectID": "labs/instructions/lab-1-instructions.html#step-4-choose-the-file-name-and-location",
    "href": "labs/instructions/lab-1-instructions.html#step-4-choose-the-file-name-and-location",
    "title": "Lab 1: Introduction to Quarto",
    "section": "",
    "text": "Now set up your file name (for the folder and .Rproj file) and the best subdirectory for your Lab 1. This should be a nested folder within your “STAT 210” Folder on your hard drive (Documents), with the “lab” sub-folder, and “week-2” sub-sub-folder.\nUse the file format your-name-lab-1",
    "crumbs": [
      "Labs",
      "Lab 1 & Challenge 1 Instructions"
    ]
  },
  {
    "objectID": "labs/instructions/lab-1-instructions.html#step-6-download-the-lab-1-student.qmd",
    "href": "labs/instructions/lab-1-instructions.html#step-6-download-the-lab-1-student.qmd",
    "title": "Lab 1: Introduction to Quarto",
    "section": "",
    "text": "Now download the lab file into your new project folder on your computer. Rename the file so that it reads lab-1-your-name.qmd with your first and last name.\nYou can download it here: Lab 1\nThe file should appear in your project folder under your Files tab in the lower right pane. Click it to open it up. Now that you are all set up, go ahead and get started with the rest of the lab!",
    "crumbs": [
      "Labs",
      "Lab 1 & Challenge 1 Instructions"
    ]
  },
  {
    "objectID": "labs/instructions/lab-1-instructions.html#specifying-global-execute-options",
    "href": "labs/instructions/lab-1-instructions.html#specifying-global-execute-options",
    "title": "Lab 1: Introduction to Quarto",
    "section": "2.1 Specifying Global Execute Options",
    "text": "2.1 Specifying Global Execute Options\nExecution options specify how the R code in your Quarto document should be displayed. This guide provides descriptions on the options you can specify in a document’s execution.\nTo start, your YAML should look something like this:\n---\ntitle: \"Lab 1: Introduction to Quarto\"\nauthor: \"Your name goes here!\"\ndate: \"Insert the date here!\"\nformat: html\nself-contained: true\neditor: source\n---\nQuestion 1 – Add your name and the date to the YAML.\nQuestion 2 – Add an execute line to your YAML that includes the following options, (1) your source code is always output on the page, and (2) your document will render even if there are errors.",
    "crumbs": [
      "Labs",
      "Lab 1 & Challenge 1 Instructions"
    ]
  },
  {
    "objectID": "labs/instructions/lab-1-instructions.html#running-the-provided-code",
    "href": "labs/instructions/lab-1-instructions.html#running-the-provided-code",
    "title": "Lab 1: Introduction to Quarto",
    "section": "2.2 Running the Provided Code",
    "text": "2.2 Running the Provided Code\nNext, click on the “Play” button on the right of the first auto-populated code chunk. Alternatively, you can highlight (or simply put your cursor on the line of) the code you want to run and hit ctrl + Enter (for PCs) or ⌘ + Enter (for Macs).\nYou should see the code appear in the console, as well as the result of the code (2). Keep in mind the [1] before the 2 is vector notation. This means the result is a vector of length 1, whose first element is 2.\nQuestion 3 – Let’s spice this code up a bit. Delete 1 + 1 from the code chunk and paste in the following code:\n\n# Load a dataset into the R Environment.\ndata(ToothGrowth)\n\n# Look at the summary of the variables in the dataset.\nsummary(ToothGrowth)\n\nNow run this code. You should see a six-number summary of the variables len and dose included in the ToothGrowth dataset, as well as the frequency of the levels contained in the supp variable. Further, if you inspect the Environment tab, the ToothGrowth dataset should appear. You can click on the dataset name (not the blue play button!) to look at the data.\n\nCheck the Data Documentation\nQuestion 4 – In your console (not in the Quarto document), type ?ToothGrowth (or alternatively help(ToothGrowth)). Use the information that pops up in the Help pane in RStudio to fill in the blanks below.\nThis dataset investigates the effect of __________ on tooth growth in _________________.\nThe two supplement delivery methods include OJ (______________) and VC (_______________).\nToothGrowth is a data frame with ____ observations and ____ variables.\nQuestion 5 – Before the code chunk, change the “Running the Provided Code” section header to a header that better describes the contents of this section (e.g., Tooth Growth Dataset).",
    "crumbs": [
      "Labs",
      "Lab 1 & Challenge 1 Instructions"
    ]
  },
  {
    "objectID": "labs/instructions/lab-1-instructions.html#creating-a-plot",
    "href": "labs/instructions/lab-1-instructions.html#creating-a-plot",
    "title": "Lab 1: Introduction to Quarto",
    "section": "2.3 Creating a Plot",
    "text": "2.3 Creating a Plot\nYour second code chunk is just as boring as your first, so let’s spice it up!\nQuestion 6 – Replace the plot(pressure) code with the following (we will talk about graphics next week!):\n\nlibrary(tidyverse)\n\nggplot(data = ToothGrowth, \n       mapping = aes(x = supp, y = len)) +\n  geom_boxplot() +\n  labs(x = \"Supplement\", y = \"Length of Teeth (mm)\")\n\nToothGrowth %&gt;% \n  mutate(dose = as.factor(dose)) %&gt;% \n  ggplot(mapping = aes(x = dose, y = len)) +\n  geom_boxplot() +\n  labs(x = \"Dose of Supplement (mg/day)\", y = \"Length of Teeth (mm)\")\n\nNow, run this code chunk! You should see two side-by-side boxplots, one plot comparing tooth length between the two supplement delivery methods and one plot comparing tooth length between the three different dosages uses.\nQuestion 7 – Read over the Quarto documentation on figure options and add an option (#|) to the above code chunk to make the figures print side-by-side (i.e., in one row) in the rendered HTML file.\nQuestion 8 – Specify in the code chunk options that these boxplots should be center aligned.\nQuestion 9 – Specify a figure caption for the boxplots (using a code-chunk option).",
    "crumbs": [
      "Labs",
      "Lab 1 & Challenge 1 Instructions"
    ]
  },
  {
    "objectID": "labs/instructions/lab-1-instructions.html#inserting-a-new-code-chunk",
    "href": "labs/instructions/lab-1-instructions.html#inserting-a-new-code-chunk",
    "title": "Lab 1: Introduction to Quarto",
    "section": "2.4 Inserting a New Code Chunk",
    "text": "2.4 Inserting a New Code Chunk\nNavigate to the last sentence of your the Quarto document. We’re now going to insert a new R code chunk at the bottom of the document.\nThere are four different ways to do this:\n\nType ctrl + alt + i (on a PC) or ⌘ + ⌥ + i (on a Mac).\nClick on the  symbol. This should automatically default to R code, but if you have a Python compiler on your computer, you might need to select “R” from the options.\nIf you are using the Visual editor, click on the “Insert” button, then select “Code Chunk”, and finally select “R”.\nManually add the code chunk by typing ```{r}. Make sure to close your code chunk with ```.",
    "crumbs": [
      "Labs",
      "Lab 1 & Challenge 1 Instructions"
    ]
  },
  {
    "objectID": "labs/instructions/lab-1-instructions.html#creating-a-more-complex-plot",
    "href": "labs/instructions/lab-1-instructions.html#creating-a-more-complex-plot",
    "title": "Lab 1: Introduction to Quarto",
    "section": "2.5 Creating a More Complex Plot",
    "text": "2.5 Creating a More Complex Plot\nIn this section, we are to create a new plot that you will place in the created code chunk.\n\nToothGrowth %&gt;% \n  mutate(dose = as.factor(dose)) %&gt;% \n  ggplot(mapping = aes(x = dose, y = len, fill = supp)) +\n  geom_boxplot() +\n  labs(x = \"Dose of Supplement (mg/day)\", \n       y = \"Length of Teeth (mm)\",\n       fill = \"Supplement Type\")\n\nCarry out the following steps:\nQuestion 10 – In the new code chunk, add the code for the graph. Be sure to include a code chunk label.\nQuestion 11 – Run your code chunk to obtain the output for your new graph.\nQuestion 12 – Create a numbered list containing:\n\nYour conclusions (in the context of these data) based on the graph.\n\nA recommendation for how I should get my guinea pig’s teeth (odontoblasts) to grow more.\n\nQuestion 13 – Create another section header, describing the contents of this section before the graph and list.",
    "crumbs": [
      "Labs",
      "Lab 1 & Challenge 1 Instructions"
    ]
  },
  {
    "objectID": "labs/instructions/lab-1-instructions.html#render-your-document",
    "href": "labs/instructions/lab-1-instructions.html#render-your-document",
    "title": "Lab 1: Introduction to Quarto",
    "section": "2.6 Render Your Document",
    "text": "2.6 Render Your Document\nRender your document as an html file. Use the “Render” button (the blue arrow!) at the top of your screen.\nIf you run into trouble rendering your document, try restarting R and running your code chunks in order, and see if you can find the problem.\nAnother common issue is deleting the tick marks (```) that surround your code chunks. If you notice that the code chunks are not showing a “Play” button (), or that they are not highlighted in gray, double check your tick marks!\nRecall we included error: true in our YAML execution options. This means that your document will still render even if there are errors. Make sure you are double checking your work!\nYou will notice that there is auto-generated text that is unrelated to the work that you completed. It is always a good idea to delete this extra text!",
    "crumbs": [
      "Labs",
      "Lab 1 & Challenge 1 Instructions"
    ]
  },
  {
    "objectID": "labs/instructions/lab-1-instructions.html#render-again",
    "href": "labs/instructions/lab-1-instructions.html#render-again",
    "title": "Lab 1: Introduction to Quarto",
    "section": "3.1 Render again!",
    "text": "3.1 Render again!\nNotice that when you render the document, all of the code reruns again, producing the same output as before, but with your changes—this is called reproducibility!\nYou should render often while completing your practice activities and lab assignments. Make small changes, then make sure the file still renders rather than making a bunch of big changes and then realizing something is wrong.",
    "crumbs": [
      "Labs",
      "Lab 1 & Challenge 1 Instructions"
    ]
  },
  {
    "objectID": "labs/instructions/lab-1-instructions.html#turn-it-in",
    "href": "labs/instructions/lab-1-instructions.html#turn-it-in",
    "title": "Lab 1: Introduction to Quarto",
    "section": "3.2 Turn it in!",
    "text": "3.2 Turn it in!\nOpen the .html file on your computer to make sure it looks as you expected. Then upload the rendered (.html extension) document to Canvas and the zipped project file as two separate uploads.!\n\nYou’ll be doing this same process for all your future Lab Assignments but after next week you will submit a GitHub link instead of the rendered document. Each of these will involve a Quarto file. Some weeks, I may have a template for you to copy like you had here, while other weeks you will generate your own Quarto file from scratch.",
    "crumbs": [
      "Labs",
      "Lab 1 & Challenge 1 Instructions"
    ]
  },
  {
    "objectID": "weeks/week-1-r-rstudio.html",
    "href": "weeks/week-1-r-rstudio.html",
    "title": "Week 1, Part 1: R & RStudio",
    "section": "",
    "text": "For the first portion of this week’s coursework, we are going to learn about / refresh our memory on R and RStudio. This course is all about you learning skills for working with data in R, so you will need to have local installations of both R and RStudio on your computer.",
    "crumbs": [
      "Weekly materials",
      "Week 1 - R & RStudio"
    ]
  },
  {
    "objectID": "weeks/week-1-r-rstudio.html#updating-your-version-of-r",
    "href": "weeks/week-1-r-rstudio.html#updating-your-version-of-r",
    "title": "Week 1, Part 1: R & RStudio",
    "section": "1.1 Updating Your Version of R",
    "text": "1.1 Updating Your Version of R\nIf you already have R downloaded, you need to confirm that you have the most up to date version of R. Do not ignore these instructions. If you neglect to update your version of R, you may find that updating a package will make it so your code will not run.\n\nStep 1: Open RStudio\nStep 2: At the top of the the Console it will say what version of R you are using\n\n{fig-alt = “A screenshot of what version of R should appear when you open RStudio. The version reads ‘R version 4.4.2 (2024-10-31) – ’Pile of Leaves’.”}\nIf the version is not 4.4.2 (like the image above), you need to update your version of R! The simplest way to do this is to follow the instructions below to install R.",
    "crumbs": [
      "Weekly materials",
      "Week 1 - R & RStudio"
    ]
  },
  {
    "objectID": "weeks/week-1-r-rstudio.html#installing-r",
    "href": "weeks/week-1-r-rstudio.html#installing-r",
    "title": "Week 1, Part 1: R & RStudio",
    "section": "1.2 Installing R",
    "text": "1.2 Installing R\nDownload and install R by going to https://cloud.r-project.org/. Here, you will find three options for installing R—click on the option for your computer’s operating system.\n\n📽️ Useful Video: Installing R and RStudio - Windows\n\n\n📽️ Useful Video: Installing R and RStudio - Mac\n\n\nIf you are a Windows user:\n\nClick on “Download R for Windows”\nClick on “base”\nClick on the Download link.\nWhen you open the execution file (.exe) you will be prompted with a variety of questions about installing R. Feel free to use the default features / settings that come with R (continue to click “Ok” until the download starts).\n\n\n\n\n\n\n\nMultiple Versions of R\n\n\n\nBeware that if you had a previous version of R downloaded on your PC, that old version will not be deleted when you download the most recent version of R. We do not want to have two versions of R installed, as your computer can get confused what version of R to use. So, you need to remove the old version of R.\nTo do this you need to:\n\nNavigate to your computer’s settings\nClick on the “Apps” option on the left-hand panel\nSearch for or scroll down to R\nFind the older version of R\n\n\n\nClick on the ... on the right side\nSelect “Uninstall”\n\n\n\n\n\n\nIf you are macOS user:\n\nClick on “Download R for (Mac) OS X”\nUnder “Latest release:” click on R-X.X.X.pkg, where R-X.X.X is the version number. For example, the latest version of R as of October 31, 2024 was R-4.4.2 (Pile of Leaves).\nWhen installing, use the default features / settings that come with R (click Ok until the download starts).\n\n\n\n\n\n\n\nTroubleshooting for Macs\n\n\n\nFirst, identify which version of OSx you are running. How-to\nNext, find out which version of R your computer can run. Link\nIf this version is 3.6 or later, download the latest version that your computer can handle.\nIf this version is 3.4 or earlier, you’re going to run in to some trouble. I recommend updating your version of OSx, if you are willing. If you can’t, then you can use Posit Cloud to run R and RStudio on a free server. However, I recommend strongly against this option; your files will not be saved indefinitely, you will have limited hours to complete your work, your computing power will be limited, and you will need an internet connection at all times to do your work.\n\n\n\n\nIf you are a Linux user:\nClick on “Download R for Linux” and choose your distribution for more information on installing R for your setup.",
    "crumbs": [
      "Weekly materials",
      "Week 1 - R & RStudio"
    ]
  },
  {
    "objectID": "weeks/week-1-r-rstudio.html#updating-your-version-of-rstudio",
    "href": "weeks/week-1-r-rstudio.html#updating-your-version-of-rstudio",
    "title": "Week 1, Part 1: R & RStudio",
    "section": "2.1 Updating Your Version of RStudio",
    "text": "2.1 Updating Your Version of RStudio\nIf you already have RStudio, you need to double check if you have the most recent version. You will not have access to the newest features for Quarto documents unless you have the most recent version of RStudio.\n\nStep 1: Open RStudio\nStep 2: Click on “Help” in the upper menu\nStep 3: Click on “Check for Updates”\n\nIf there are no updates to RStudio since you installed it, you are good to go! If you need to update RStudio, you will be sent to Posit (the parent company) to download the most recent version of RStudio desktop.",
    "crumbs": [
      "Weekly materials",
      "Week 1 - R & RStudio"
    ]
  },
  {
    "objectID": "weeks/week-1-r-rstudio.html#installing-rstudio",
    "href": "weeks/week-1-r-rstudio.html#installing-rstudio",
    "title": "Week 1, Part 1: R & RStudio",
    "section": "2.2 Installing RStudio",
    "text": "2.2 Installing RStudio\nDownloading the most recent version of RStudio works the same way regardless of whether you’ve never downloaded RStudio before or if you just need to update your version of RStudio.\nWhen you navigate to the RStudio download page (https://rstudio.com/products/rstudio/download/), the website should automatically detect your computer’s operating system. So, you should be able to simply click the blue “Download RStudio Desktop for [insert operating system here]” button.\nClicking the button will begin installing RStudio. Once the download has completed, you will need to open the application file (on a Mac this is a .dmg file, on Windows this is an exe file).",
    "crumbs": [
      "Weekly materials",
      "Week 1 - R & RStudio"
    ]
  },
  {
    "objectID": "weeks/week-6-7-dplyr.html",
    "href": "weeks/week-6-7-dplyr.html",
    "title": "Data Wrangling with dplyr",
    "section": "",
    "text": "When you are finished with the readings and videos, you should be able to…\n\nDescribe to someone what a function conflict is\nDescribe to someone the similarities and differences between a list, a data.frame, and a tibble\nIdentify the structure of an object\nIdentify the data type(s) of an object\nDescribe to someone what the tidyverse is\nUse the six main dplyr verbs:\n\nfilter()\narrange()\nselect()\nmutate()\nsummarize()\n`arrange()\n\nUse group_by() to perform groupwise operations\nUse the pipe operator (|&gt; or %&gt;%) to chain together data wrangling operations",
    "crumbs": [
      "Weekly materials",
      "Week 6-7 - Transforming Data"
    ]
  },
  {
    "objectID": "weeks/week-6-7-dplyr.html#learning-targets",
    "href": "weeks/week-6-7-dplyr.html#learning-targets",
    "title": "Data Wrangling with dplyr",
    "section": "",
    "text": "When you are finished with the readings and videos, you should be able to…\n\nDescribe to someone what a function conflict is\nDescribe to someone the similarities and differences between a list, a data.frame, and a tibble\nIdentify the structure of an object\nIdentify the data type(s) of an object\nDescribe to someone what the tidyverse is\nUse the six main dplyr verbs:\n\nfilter()\narrange()\nselect()\nmutate()\nsummarize()\n`arrange()\n\nUse group_by() to perform groupwise operations\nUse the pipe operator (|&gt; or %&gt;%) to chain together data wrangling operations",
    "crumbs": [
      "Weekly materials",
      "Week 6-7 - Transforming Data"
    ]
  },
  {
    "objectID": "weeks/week-6-7-dplyr.html#learning-more-about-data-types-objects-in-r",
    "href": "weeks/week-6-7-dplyr.html#learning-more-about-data-types-objects-in-r",
    "title": "Data Wrangling with dplyr",
    "section": "1.1 Learning More about Data Types & Objects in R",
    "text": "1.1 Learning More about Data Types & Objects in R\n\n\n\n📖 Read a Textbook: Data Types in R\n\nIn addition, read the following section from the first edition of R for DS:📖 Required Reading: Tibbles\n1.2 ✅ Check-in: Data Structures\nQuestion 1\nIn essence, a data.frame is simply a special list - with a few extra restrictions on the list format.\nThink about the datasets you have already worked with. Which of the following restrictions on a list do you think are needed for the list to be a data.frame? (Select all that apply)\n\nThe elements of the list must all be vectors of the same length.\nThe elements of the list must all be the same data type.\nThe elements of the list must all have no missing values.\nThe elements of the list must all have names.\n\nQuestion 2\nTibbles are described as “opinionated” dataframes. Which of the following are true about a tibble’s behavior? (Select all that apply)\n\ntibbles only print the first 10 rows of a dataset\ntibbles allow for non-syntactic variable names, like :)\ntibbles never convert strings to factors\ntibbles create row names\n\n\n2 Part Two: Wrangling data with dplyr\n\n2.1 Introduction to dplyr\n📖 Required Reading: Data Transformation\n\n\n2.2 dplyr Verbs\n\n\n\n\n\n\n\n\n\n\n\n\n2.3 Practice\n💻 Required Tutorial: Practice with dplyr\n\n\n\n2.4 ✅ Check-in: Data Wrangling\nQuestion 1: Suppose we would like to study how the ratio of penguin body mass to flipper size differs across the species. Arrange the following steps into an order that accomplishes this goal (assuming the steps are connected with a |&gt; or a %&gt;%).\n\n# a\narrange(med_mass_flipper_ratio)\n\n\n# b\ngroup_by(species)\n\n\n# c\npenguins \n  \n\n# d\nsummarize(\n  med_mass_flipper_ratio = median(mass_flipper_ratio)\n)\n\n  \n# e\nmutate(\n  mass_flipper_ratio = body_mass_g / flipper_length_mm\n)\n\n\n\n\n\n\n\nTry running the code!\n\n\n\nYou can check your answers using the penguins data from the palmerpenguins R package!\n\n\nQuestion 2:\nConsider the base R code below.\n\nmean(penguins[penguins$species == \"Adelie\", ]$body_mass_g)\n\nFor each of the following dplyr pipelines, indicate which of the following is true:\n\nIt returns the exact same thing as the (above) base R code\nIt returns the correct information, but the wrong object type\nIt returns incorrect information\nIt returns an error\n\n\n# Part a\npenguins |&gt;\n  filter(\"body_mass_g\") |&gt;\n  pull(\"Adelie\") |&gt;\n  mean()\n\n\n# Part b\npenguins |&gt;\n  filter(species == \"Adelie\") |&gt;\n  select(body_mass_g) |&gt;\n  summarize(mean(body_mass_g))\n\n\n# Part c\npenguins |&gt;\n  pull(body_mass_g) |&gt;\n  filter(species == \"Adelie\") |&gt;\n  mean()\n\n\n# Part d\npenguins |&gt;\n  filter(species == \"Adelie\") |&gt;\n  select(body_mass_g) |&gt;\n  mean()\n\n\n# Part e\npenguins |&gt;\n  filter(species == \"Adelie\") |&gt;\n  pull(body_mass_g) |&gt;\n  mean()\n\n\n# Part f\npenguins |&gt;\n  select(species == \"Adelie\") |&gt;\n  filter(body_mass_g) |&gt;\n  summarize(mean(body_mass_g))\n\n\n\n\n\n\n\nTry running the code!\n\n\n\nYou can check your answers using the penguins data from the palmerpenguins R package!",
    "crumbs": [
      "Weekly materials",
      "Week 6-7 - Transforming Data"
    ]
  },
  {
    "objectID": "weeks/week-6-7-dplyr.html#check-in-data-structures",
    "href": "weeks/week-6-7-dplyr.html#check-in-data-structures",
    "title": "Data Wrangling with dplyr",
    "section": "1.2 ✅ Check-in: Data Structures",
    "text": "1.2 ✅ Check-in: Data Structures\nQuestion 1\nIn essence, a data.frame is simply a special list - with a few extra restrictions on the list format.\nThink about the datasets you have already worked with. Which of the following restrictions on a list do you think are needed for the list to be a data.frame? (Select all that apply)\n\nThe elements of the list must all be vectors of the same length.\nThe elements of the list must all be the same data type.\nThe elements of the list must all have no missing values.\nThe elements of the list must all have names.\n\nQuestion 2\nTibbles are described as “opinionated” dataframes. Which of the following are true about a tibble’s behavior? (Select all that apply)\n\ntibbles only print the first 10 rows of a dataset\ntibbles allow for non-syntactic variable names, like :)\ntibbles never convert strings to factors\ntibbles create row names",
    "crumbs": [
      "Weekly materials",
      "Week 6-7 - Transforming Data"
    ]
  },
  {
    "objectID": "weeks/week-6-7-dplyr.html#introduction-to-dplyr",
    "href": "weeks/week-6-7-dplyr.html#introduction-to-dplyr",
    "title": "Data Wrangling with dplyr",
    "section": "2.1 Introduction to dplyr",
    "text": "2.1 Introduction to dplyr\n📖 Required Reading: Data Transformation",
    "crumbs": [
      "Weekly materials",
      "Week 6-7 - Transforming Data"
    ]
  },
  {
    "objectID": "weeks/week-6-7-dplyr.html#dplyr-verbs",
    "href": "weeks/week-6-7-dplyr.html#dplyr-verbs",
    "title": "Data Wrangling with dplyr",
    "section": "2.2 dplyr Verbs",
    "text": "2.2 dplyr Verbs",
    "crumbs": [
      "Weekly materials",
      "Week 6-7 - Transforming Data"
    ]
  },
  {
    "objectID": "weeks/week-6-7-dplyr.html#practice",
    "href": "weeks/week-6-7-dplyr.html#practice",
    "title": "Data Wrangling with dplyr",
    "section": "2.3 Practice",
    "text": "2.3 Practice\n💻 Required Tutorial: Practice with dplyr",
    "crumbs": [
      "Weekly materials",
      "Week 6-7 - Transforming Data"
    ]
  },
  {
    "objectID": "weeks/week-6-7-dplyr.html#check-in-data-wrangling",
    "href": "weeks/week-6-7-dplyr.html#check-in-data-wrangling",
    "title": "Data Wrangling with dplyr",
    "section": "2.4 ✅ Check-in: Data Wrangling",
    "text": "2.4 ✅ Check-in: Data Wrangling\nQuestion 1: Suppose we would like to study how the ratio of penguin body mass to flipper size differs across the species. Arrange the following steps into an order that accomplishes this goal (assuming the steps are connected with a |&gt; or a %&gt;%).\n\n# a\narrange(med_mass_flipper_ratio)\n\n\n# b\ngroup_by(species)\n\n\n# c\npenguins \n  \n\n# d\nsummarize(\n  med_mass_flipper_ratio = median(mass_flipper_ratio)\n)\n\n  \n# e\nmutate(\n  mass_flipper_ratio = body_mass_g / flipper_length_mm\n)\n\n\n\n\n\n\n\nTry running the code!\n\n\n\nYou can check your answers using the penguins data from the palmerpenguins R package!\n\n\nQuestion 2:\nConsider the base R code below.\n\nmean(penguins[penguins$species == \"Adelie\", ]$body_mass_g)\n\nFor each of the following dplyr pipelines, indicate which of the following is true:\n\nIt returns the exact same thing as the (above) base R code\nIt returns the correct information, but the wrong object type\nIt returns incorrect information\nIt returns an error\n\n\n# Part a\npenguins |&gt;\n  filter(\"body_mass_g\") |&gt;\n  pull(\"Adelie\") |&gt;\n  mean()\n\n\n# Part b\npenguins |&gt;\n  filter(species == \"Adelie\") |&gt;\n  select(body_mass_g) |&gt;\n  summarize(mean(body_mass_g))\n\n\n# Part c\npenguins |&gt;\n  pull(body_mass_g) |&gt;\n  filter(species == \"Adelie\") |&gt;\n  mean()\n\n\n# Part d\npenguins |&gt;\n  filter(species == \"Adelie\") |&gt;\n  select(body_mass_g) |&gt;\n  mean()\n\n\n# Part e\npenguins |&gt;\n  filter(species == \"Adelie\") |&gt;\n  pull(body_mass_g) |&gt;\n  mean()\n\n\n# Part f\npenguins |&gt;\n  select(species == \"Adelie\") |&gt;\n  filter(body_mass_g) |&gt;\n  summarize(mean(body_mass_g))\n\n\n\n\n\n\n\nTry running the code!\n\n\n\nYou can check your answers using the penguins data from the palmerpenguins R package!",
    "crumbs": [
      "Weekly materials",
      "Week 6-7 - Transforming Data"
    ]
  },
  {
    "objectID": "weeks/week-4-ggplot.html",
    "href": "weeks/week-4-ggplot.html",
    "title": "Introduction to ggplot2",
    "section": "",
    "text": "The greatest possibilities of visual display lie in vividness and inescapability of the intended message. A visual display can stop your mental flow in its tracks and make you think. A visual display can force you to notice what you never expected to see. (“Why, that scatter diagram has a hole in the middle!”) – John Tukey, Data Based Graphics: Visual Display in the Decades to Come",
    "crumbs": [
      "Weekly materials",
      "Week 4 - Data Visualization"
    ]
  },
  {
    "objectID": "weeks/week-4-ggplot.html#learning-objectives",
    "href": "weeks/week-4-ggplot.html#learning-objectives",
    "title": "Introduction to ggplot2",
    "section": "0.1 Learning Objectives",
    "text": "0.1 Learning Objectives\n\nDescribe charts using the grammar of graphics\nCreate layered graphics that highlight multiple aspects of the data\nEvaluate existing charts and develop new versions that improve accessibility and readability",
    "crumbs": [
      "Weekly materials",
      "Week 4 - Data Visualization"
    ]
  },
  {
    "objectID": "weeks/week-4-ggplot.html#loading-in-the-ggplot2-package",
    "href": "weeks/week-4-ggplot.html#loading-in-the-ggplot2-package",
    "title": "Introduction to ggplot2",
    "section": "0.2 Loading in the ggplot2 Package",
    "text": "0.2 Loading in the ggplot2 Package\nIn this class, we’re going to use the ggplot2 package to create graphics in R. This package is already installed as part of the tidyverse, but can be installed:\n\ninstall.packages(\"ggplot2\") #only needs to happen once - Do not include in Quarto documents!\n\nand/or loaded:\n\nlibrary(\"ggplot2\")\n\n# alternatively\nlibrary(\"tidyverse\") # (my preference!)\n\n\n\n\n\n\nBuilding a masterpiece, by Allison Horst",
    "crumbs": [
      "Weekly materials",
      "Week 4 - Data Visualization"
    ]
  },
  {
    "objectID": "weeks/week-4-ggplot.html#the-grammar-of-graphics",
    "href": "weeks/week-4-ggplot.html#the-grammar-of-graphics",
    "title": "Introduction to ggplot2",
    "section": "1.1 The Grammar of Graphics",
    "text": "1.1 The Grammar of Graphics\nThe grammar of graphics is an approach first introduced in Leland Wilkinson’s book (Wilkinson 2005). Unlike other graphics classification schemes, the grammar of graphics makes an attempt to describe how the data set itself relates to the components of the chart.\nThis has a few advantages:\n\nIt’s relatively easy to represent the same data set with different types of plots (and to find their strengths and weaknesses)\nGrammar leads to a concise description of the plot and its contents\nWe can add layers to modify the graphics, each with their own basic grammar (just like we combine sentences and clauses to build a rich, descriptive paragraph)\n\n\n\n\nA pyramid view of the major components of the grammar of graphics, with data as the base, aesthetics building on data, scales building on aesthetics, geometric objects, statistics, facets, and the coordinate system at the top of the pyramid. Source: (Sarkar 2018)",
    "crumbs": [
      "Weekly materials",
      "Week 4 - Data Visualization"
    ]
  },
  {
    "objectID": "weeks/week-4-ggplot.html#making-your-first-ggplot",
    "href": "weeks/week-4-ggplot.html#making-your-first-ggplot",
    "title": "Introduction to ggplot2",
    "section": "1.2 Making Your First ggplot",
    "text": "1.2 Making Your First ggplot\n\n✅ Check-in\nQuestion 1 – What specifically does the code ggplot(data = mpg) do?\n\nCreates a blank plot\nMakes a scatterplot of the first two variables in the mpg dataset\nCreates a ggplot with the mpg dataset",
    "crumbs": [
      "Weekly materials",
      "Week 4 - Data Visualization"
    ]
  },
  {
    "objectID": "weeks/week-4-ggplot.html#aesthetics",
    "href": "weeks/week-4-ggplot.html#aesthetics",
    "title": "Introduction to ggplot2",
    "section": "1.3 Aesthetics",
    "text": "1.3 Aesthetics\n📖 Required Reading: Layers - Aesthetic Mappings.\n\n✅ Check-in\n\nggplot(data = mpg) +\n  geom_point(mapping = aes(x = displ, y = hwy), color = \"blue\")\n\nQuestion 2: What aesthetics does this plot contain?\n\nx\ny\ncolor\ndata\n\nQuestion 3: Which of the following changes would set the color of the points to be blue?\n\n## Option A\nggplot(data = mpg) +\ngeom_point(\n  mapping = aes(x = displ, \n                y = hwy, \n                color = blue)\n  )\n\n## Option B\nggplot(data = mpg) +\ngeom_point(\n  mapping = aes(x = displ, \n                y = hwy), \n  color = \"blue\"\n  )\n\n## Option C\nggplot(data = mpg, \n       mapping = aes(color = \"blue\")\n       ) +\ngeom_point(\n  mapping = aes(x = displ, \n                y = hwy)\n  )",
    "crumbs": [
      "Weekly materials",
      "Week 4 - Data Visualization"
    ]
  },
  {
    "objectID": "weeks/week-4-ggplot.html#geoms",
    "href": "weeks/week-4-ggplot.html#geoms",
    "title": "Introduction to ggplot2",
    "section": "1.4 geoms",
    "text": "1.4 geoms\n\nWhat type of chart to use?\nIt can be hard to know what type of chart to use for a particular type of data. I recommend figuring out what you want to show first, and then thinking about how to show that data with an appropriate plot type. Consider the following factors:\n\nWhat type of variable is x? Categorical? Continuous? Discrete?\nWhat type of variable is y?\nHow many observations do I have for each x / y variable?\nAre there any important moderating variables?\nDo I have data that might be best shown in small multiples? E.g. a categorical moderating variable and a lot of data, where the categorical variable might be important for showing different features of the data?\n\nOnce you’ve thought through this, take a look through catalogs like the R Graph Gallery to see what visualizations match your data and use-case.\n📖 Required Reading: Layers - Geometric Objects.\n💻 Required Tutorials\n\nBar Charts\nHistograms\nScatterplots\nLine Plots\n\n\n\n✅ Check-in\nQuestion 4: Match each plot with the geom_XXX() function used to create it!\n\n\n\nLine Chart\nBoxplot\nHistogram\nArea Chart\n\n\n\ngeom_boxplot()\ngeom_point()\ngeom_hist()\ngeom_bar()\ngeom_smooth()\ngeom_point()\ngeom_area()\ngeom_line()\ngeom_histogram()",
    "crumbs": [
      "Weekly materials",
      "Week 4 - Data Visualization"
    ]
  },
  {
    "objectID": "weeks/week-4-ggplot.html#getting-a-bit-fancier",
    "href": "weeks/week-4-ggplot.html#getting-a-bit-fancier",
    "title": "Introduction to ggplot2",
    "section": "1.5 Getting a Bit Fancier",
    "text": "1.5 Getting a Bit Fancier\nIn this section we dig a bit deeper into how we can make our code more efficient and other ways we can add additional variables to our plots.\n\nGlobal vs. local aesthetics\nThe aesthetic mappings that are defined in ggplot() are the global level aesthetics, that is they are inherited by each of the subsequent geom_ layers of the plot. However, each geom_ function in ggplot2 can also take its own mapping arguments, which allows for aesthetic mappings at the local level that are combined with those inherited from the global level.\n\n\n✅ Check-in\nQuestion 5: Match the code to the type of aesthetics that are being used:\n\n\n\nGlobal\n \nLocal\n\n\nggplot(data = mpg, \n       mapping = aes(x = mpg, y = hwy)\n       ) + \n  geom_point()\n\n\nggplot(data = mpg) + \n  geom_point(mapping = aes(x = mpg, y = hwy))",
    "crumbs": [
      "Weekly materials",
      "Week 4 - Data Visualization"
    ]
  },
  {
    "objectID": "weeks/week-4-ggplot.html#facets",
    "href": "weeks/week-4-ggplot.html#facets",
    "title": "Introduction to ggplot2",
    "section": "1.6 Facets",
    "text": "1.6 Facets\n📖 Required Reading: Layers - Facets.",
    "crumbs": [
      "Weekly materials",
      "Week 4 - Data Visualization"
    ]
  },
  {
    "objectID": "weeks/week-4-ggplot.html#data-transformations",
    "href": "weeks/week-4-ggplot.html#data-transformations",
    "title": "Introduction to ggplot2",
    "section": "1.7 Data transformations",
    "text": "1.7 Data transformations\n📖 Required Reading: Layers - Statistical Transformations.",
    "crumbs": [
      "Weekly materials",
      "Week 4 - Data Visualization"
    ]
  },
  {
    "objectID": "weeks/week-4-ggplot.html#changing-the-positions-of-bars",
    "href": "weeks/week-4-ggplot.html#changing-the-positions-of-bars",
    "title": "Introduction to ggplot2",
    "section": "1.8 Changing the positions of bars",
    "text": "1.8 Changing the positions of bars\n📖 Required Reading: Layers - Position Adjustments.\n\n✅ Check-in\nQuestion 6: What arguments for geom_jitter() control the amount of jittering?\n\nwidth\nheight\nstat\nposition\nna.rm\nshow.legend\ndata\nmapping",
    "crumbs": [
      "Weekly materials",
      "Week 4 - Data Visualization"
    ]
  },
  {
    "objectID": "weeks/week-4-ggplot.html#plot-customizations",
    "href": "weeks/week-4-ggplot.html#plot-customizations",
    "title": "Introduction to ggplot2",
    "section": "1.9 Plot Customizations",
    "text": "1.9 Plot Customizations\n📖 Required Reading: Communication\n\n\n✅ Check-in\nQuestion 7: What can the labs() function do? Select all that apply.\n\nCustomize the x-axis label\nCustomize the y-axis label\nCustomize the legend label\nCustomize the plot title\nAdd a caption to the plot",
    "crumbs": [
      "Weekly materials",
      "Week 4 - Data Visualization"
    ]
  },
  {
    "objectID": "group-activities/week-5/pa-4-import-tidy-data.html",
    "href": "group-activities/week-5/pa-4-import-tidy-data.html",
    "title": "PA 4: Preparing the Youth Risk Behavior Analysis",
    "section": "",
    "text": "This task is complex. It requires many different types of abilities. Everyone will be good at some of these abilities but nobody will be good at all of them. In order to solve this puzzle, you will need to use the skills of each member of your group."
  },
  {
    "objectID": "group-activities/week-5/pa-4-import-tidy-data.html#groupwork-protocols",
    "href": "group-activities/week-5/pa-4-import-tidy-data.html#groupwork-protocols",
    "title": "PA 4: Preparing the Youth Risk Behavior Analysis",
    "section": "Groupwork Protocols",
    "text": "Groupwork Protocols\nDuring the Practice Activity, you and your partner will alternate between two roles—Developer and Coder.\nWhen you are the Developer, you will type into the Quarto document in RStudio. However, you do not type your own ideas. Instead, you type what the Coder tells you to type. You are permitted to ask the Coder clarifying questions, and, if both of you have a question, you are permitted to ask the professor. You are expected to run the code provided by the Coder and, if necessary, to work with the Coder to debug the code. Once the code runs, you are expected to collaborate with the Coder to write code comments that describe the actions taken by your code.\nWhen you are the Coder, you are responsible for reading the instructions / prompts and directing the Developer what to type in the Quarto document. You are responsible for managing the resources your group has available to you (e.g., cheatsheet, textbook). If necessary, you should work with the Developer to debug the code you specified. Once the code runs, you are expected to collaborate with the Developer to write code comments that describe the actions taken by your code.\n\nGroup Norms\nRemember, your group is expected to adhere to the following norms:\n\nThink and work together. Do not divide the work.\nYou are smarter together.\nNo cross-talk with other groups."
  },
  {
    "objectID": "group-activities/week-5/pa-4-import-tidy-data.html#goals-for-the-activity",
    "href": "group-activities/week-5/pa-4-import-tidy-data.html#goals-for-the-activity",
    "title": "PA 4: Preparing the Youth Risk Behavior Analysis",
    "section": "Goals for the Activity",
    "text": "Goals for the Activity\n\nSolve issues in your data as you read it in by parsing out text from numbers, specifying NA values, and cleaning up variable names\n\nTHROUGHOUT the Activity be sure to follow the Style Guide by doing the following:\n\nload the appropriate packages at the beginning of the Rmarkdown\n\nuse proper spacing\n\nname all code chunks\n\ncomment at least once in each code chunk to describe why you made your coding decisions\n\nadd appropriate labels to all graphic axes"
  },
  {
    "objectID": "group-activities/week-5/pa-4-import-tidy-data.html#youth-risk-behavior-surveillance-systems-yrbss",
    "href": "group-activities/week-5/pa-4-import-tidy-data.html#youth-risk-behavior-surveillance-systems-yrbss",
    "title": "PA 4: Preparing the Youth Risk Behavior Analysis",
    "section": "Youth Risk Behavior Surveillance Systems (YRBSS)",
    "text": "Youth Risk Behavior Surveillance Systems (YRBSS)\nThis data is from a survey given every other year called the Youth Risk Behavior Surveillance System administered by the Center for Disease Control and Prevention. The survey monitors health risks among youth, such as violence, sexually transmitted diseases, tobacco, and alcohol use.\nThe data set contains over 100,000 rows from 2023. A code book is also provided that gives extensive information on the survey. The data can be stored in an Excel or spreadsheet program, but it cannot be manipulated in those programs because of its size - this why we need R."
  },
  {
    "objectID": "group-activities/week-5/pa-4-import-tidy-data.html#setting-up-your-project",
    "href": "group-activities/week-5/pa-4-import-tidy-data.html#setting-up-your-project",
    "title": "PA 4: Preparing the Youth Risk Behavior Analysis",
    "section": "Setting up your Project",
    "text": "Setting up your Project\nYour project should have the following components:\n\ndata-raw folder that contains the provided data set\n\ndata-clean that will eventually hold your cleaned up data\n\ncompleted .qmd and rendered file\n\n\nStep 1: Attempt to Read in the Data\nGo ahead and read in the data, calling it youth. What do you notice?\n\nyouth &lt;- read_csv(\"data-raw/YRBS2015.csv\")\n\nDescribe some of the issues you notice in the data:\n\nInsert answer here\n\n\n\nStep 2: Skip the First Row\nUsing either the help options or the readr add an argument to the code above that will skip the first row of the data file so that the ‘headers’ (column titles) read in correctly.\n\n\nStep 3: Fix the Missing Values\nTake note of how missing values are designated in the data. Add an argument to the code above that identifies and fixes the data so that each missing value type is treated as the same NA.\n\n\n\nStep 4: Clean A few of the Variables\nAdd additional arguments to the code above that does the following:\n\nAgeCat: remove the text “years old” from the numeric values\n\nGrade: remove the text “th grade” from the numeric values\n\nPerception of weight: read as a factor with the following\n\nlevels = c(\"Very underweight\",\"Slightly underweight\", \"About the right weight\", \"Slightly overweight\", \"Very overweight\")\n\nSet the following variables to the right data type:\n\nGender\n\nHeight in meters\n\nWeight in kilograms\n\nBody Mass Index\nBMI percentile\n\nFruit eating\n\nSalad eating\nOther vegetable eating\nSoda drinking\nBreakfast eating\nPhysical activity &gt;= 5 days\nTelevision watching\nSports team participation\n\n\nSkip the rest of the variables (hint set .default = _________)\n\n\n\n\nStep 5: Clean the Variable Names\nUse the janitor package to clean the variable names to snake_case.\n\n\nStep 6: Write the Clean Data\nWrite the clean data to the data-clean folder.\nNow that the data is clean, you can add eval: false to the prior code chunks and read in the clean data below.\n\nyouth_clean &lt;- \n\nWhy do we keep the code for the data cleaning but set the code chunks to eval: false?\n\nInsert Answer Here\n\n\n\n\nStep 7: Explore Missingness\nLook at the following graphs\n\nyouth_clean |&gt; \n  naniar::gg_miss_var()\n\n\nyouth_clean |&gt; \n    naniar::gg_miss_upset()\n\nWhat do the two graphs tell you about the missingness in the data (i.e., which variables are missing the most values and which combinations of variables are missing the most together)?\n\nInsert Answer Here\n\nHow does the missingness of the data impact what variables you might choose to analyze? Why?\n\nInsert Answer Here\n\n\n\n\nStep 8: Make a Visualization\n\nyouth_clean |&gt;  #instead of data = youth_clean in ggplot we can \"pipe\" our data  \n  drop_na() |&gt;  #drops missing values\n  ggplot()\n\nComplete the following steps in your visualization in the code chunk above:\n\nPlot the height on the x-axis\n\nPlot the weight on the y-axis\n\nColor the points based on student perception of weight\n\nAdd a linear model (use method = \"lm\" and geom_smooth())\nMake the points more transparent\n\nFacet by grade and gender\n\nAdd descriptive titles and labels\n\nExport the graph as the file weight-perception.png\n\n\nChallenge Modifications\n\nMake the points a color-blind friendly color scale\n\nChange the general theme of the graph\n\nMove the legend to the bottom of the graph\n\nAdjust the figure height and width to 10x10"
  },
  {
    "objectID": "weeks/week-11-strings-dates.html",
    "href": "weeks/week-11-strings-dates.html",
    "title": "Special Data Types",
    "section": "",
    "text": "This week is all about special data types in R. Similar to the tools you learned last week for working with factors, this week you are going to learn about tools for working with strings and dates. By the end of this week you should be able to:",
    "crumbs": [
      "Weekly materials",
      "Week 11 - Strings, Dates, and Times"
    ]
  },
  {
    "objectID": "weeks/week-11-strings-dates.html#regular-expressions",
    "href": "weeks/week-11-strings-dates.html#regular-expressions",
    "title": "Special Data Types",
    "section": "1.1 Regular Expressions",
    "text": "1.1 Regular Expressions\nMatching exact strings is easy - it’s just like using find and replace.\n\nlibrary(stringr)\n\nhuman_talk &lt;- \"blah, blah, blah. Do you want to go for a walk?\"\ndog_hears &lt;- str_extract(human_talk, \"walk\")\ndog_hears\n\n[1] \"walk\"\n\n\nBut, if you can master even a small amount of regular expression notation, you’ll have exponentially more power to do good (or evil) when working with strings. You can get by without regular expressions if you’re creative, but often they’re much simpler.\n\n📖 Recommended Reading: R4DS Chapter 15 (Regular Expressions)\n\n\n\n\n\n\nRead at least through Section 15.4.1.\n\n\n\n\n\n\n\n\n\n\n\n\nShort Regular Expressions Primer\n\n\n\n\n\nYou may find it helpful to follow along with this section using this web app built to test R regular expressions. The subset of regular expression syntax we’re going to cover here is fairly limited, but you can find regular expressions to do just about anything string-related. As with any tool, there are situations where it’s useful, and situations where you should not use a regular expression, no matter how much you want to.\nHere are the basics of regular expressions:\n\n[] enclose sets of characters\nFor example, [abc] will match any single character a, b, c\n- specifies a range of characters (A-z matches all upper and lower case letters)\n. matches any character (except a newline)\nTo match special characters, escape them using \\ (in most languages) or \\\\ (in R). So \\. or \\\\. will match a literal ., \\$ or \\\\$ will match a literal $.\n\n\nnum_string &lt;- \"phone: 123-456-7890, nuid: 12345678, ssn: 123-45-6789\"\n\nstr_extract(num_string, \"[0-9][0-9][0-9]-[0-9][0-9]-[0-9][0-9][0-9][0-9]\")\n\n[1] \"123-45-6789\"\n\n\nRepeating Patterns\nListing out all of those numbers can get repetitive, though. How do we specify repetition?\n\n* means repeat between 0 and inf times\n+ means 1 or more times\n? means 0 or 1 times – most useful when you’re looking for something optional\n{a, b} means repeat between a and b times, where a and b are integers. `\nNote that b can be blank. So [abc]{3,} will match abc, aaaa, cbbaa, but not ab, bb, or a.\nFor a single number of repeated characters, you can use {a}. So {3, } means “3 or more times” and {3} means “exactly 3 times”\n\n\nnum_string &lt;- \"phone: 123-456-7890, nuid: 12345678, ssn: 123-45-6789\"\n\n# Matches a sequence of *three* numbers, followed by a dash, \n# then a sequence of *two* numbers, followed by a dash, \n# then a sequence of *four* numbers, followed by a dash.\nssn &lt;- str_extract(num_string, \"[0-9]{3}-[0-9]{2}-[0-9]{4}\")\nssn\n\n[1] \"123-45-6789\"\n\n# Matches a sequence of *three* numbers, followed by any character, \n# then a sequence of *three* numbers, followed by any character, \n# then a sequence of *four* numbers, followed by any character, \nphone &lt;- str_extract(num_string, \"[0-9]{3}.[0-9]{3}.[0-9]{4}\")\nphone\n\n[1] \"123-456-7890\"\n\n# Matches a sequence of *eight* numbers \nnuid &lt;- str_extract(num_string, \"[0-9]{8}\")\nnuid\n\n[1] \"12345678\"\n\n\nAnchoring\nThere are also ways to “anchor” a pattern to a part of the string (e.g. the beginning or the end)\n\n^ has multiple meanings:\n\nif it’s the first character in a pattern, ^ matches the beginning of a string\nif it follows [, e.g. [^abc], ^ means “not” - for instance, “the collection of all characters that aren’t a, b, or c”.\n\n$ means the end of a string\n\nCombined with pre and post-processing, these let you make sense out of semi-structured string data, such as addresses.\n\naddress &lt;- \"1600 Pennsylvania Ave NW, Washington D.C., 20500\"\n\n# Match a sequence of one or more digits at the beginning of the string\nhouse_num &lt;- str_extract(address, \"^[0-9]{1,}\")\nhouse_num\n\n[1] \"1600\"\n\n# Match everything alphanumeric up to the comma\nstreet &lt;- str_extract(address, \"[A-z0-9 ]{1,}\")\n# Remove house number from street address\nstreet &lt;- str_remove(street, house_num) |&gt; \n  # Trim any leading or trailing whitespace from remaining string\n  str_trim() \nstreet\n\n[1] \"Pennsylvania Ave NW\"\n\n# Match one or more characters between the two commas  \ncity &lt;- str_extract(address, \",.+,\") |&gt; \n  # Remove the leading and trailing commas\n  str_remove_all(\",\") |&gt; \n  # Trim any leading or trailing whitespace from remaining string\n  str_trim()\ncity\n\n[1] \"Washington D.C.\"\n\n# Matches both 5 and 9 digit zip codes found at the end of the string\nzip &lt;- str_extract(address, \"[0-9-]{5,10}$\") \nzip\n\n[1] \"20500\"\n\n\nMaking Groups\n\n() are used to capture information. So ([0-9]{4}) captures any 4-digit number\na|b will select a or b.\n\nIf you’ve captured information using (), you can reference that information using back references. In most languages, those look like this: \\1 for the first reference, \\9 for the ninth. In R, back references are \\\\1 through \\\\9, because the \\ character is special, so you have to escape it.\n\nphone_num_variants &lt;- c(\"(123) 456-7980\", \"123.456.7890\", \"+1 123-456-7890\")\n\nphone_regex &lt;- \"\\\\+?[0-9]{0,3}? ?\\\\(?([0-9]{3})?\\\\)?.?([0-9]{3}).?([0-9]{4})\"\n# \\\\+?[0-9]{0,3} matches the country code, if specified, \n#    but won't take the first 3 digits from the area code \n#    unless a country code is also specified\n# \\\\( and \\\\) match literal parentheses if they exist\n# ([0-9]{3})? captures the area code, if it exists\n# .? matches any character\n# ([0-9]{3}) captures the exchange code\n# ([0-9]{4}) captures the 4-digit individual code\n\nstr_extract(phone_num_variants, phone_regex)\n\n[1] \"(123) 456-7980\"  \"123.456.7890\"    \"+1 123-456-7890\"\n\n# We didn't capture the country code, so it remained in the string\n\nhuman_talk &lt;- \"blah, blah, blah. Do you want to go for a walk? I think I'm going to treat myself to some ice cream for working so hard. \"\ndog_hears &lt;- str_extract_all(human_talk, \"walk|treat\")\ndog_hears\n\n[[1]]\n[1] \"walk\"  \"treat\"\n\n\nPutting it all together, we can test our regular expressions to ensure that they are specific enough to pull out what we want, while not pulling out other similar information:\n\nstrings &lt;- c(\"abcdefghijklmnopqrstuvwxyzABAB\",\n             \"banana orange strawberry apple\",\n             \"ana went to montana to eat a banana\",\n             \"call me at 432-394-2873. Do you want to go for a walk? I'm going to treat myself to some ice cream for working so hard.\",\n             \"phone: (123) 456-7890, nuid: 12345678, bank account balance: $50,000,000.23\",\n             \"1600 Pennsylvania Ave NW, Washington D.C., 20500\")\n\nphone_regex &lt;- \"\\\\+?[0-9]{0,3}? ?\\\\(?([0-9]{3})?\\\\)?.?([0-9]{3}).([0-9]{4})\"\ndog_regex &lt;- \"(walk|treat)\"\naddr_regex &lt;- \"([0-9]*) ([A-z0-9 ]{3,}), ([A-z\\\\. ]{3,}), ([0-9]{5})\"\n# Find patterns where two characters are repeated\nabab_regex &lt;- \"(..)\\\\1\"\n\n# Create a table for whether each regex was detected in each string\ntibble(\n  text = strings,\n  phone = str_detect(strings, phone_regex),\n  dog = str_detect(strings, dog_regex),\n  addr = str_detect(strings, addr_regex),\n  abab = str_detect(strings, abab_regex)\n  )\n\n# A tibble: 6 × 5\n  text                                                   phone dog   addr  abab \n  &lt;chr&gt;                                                  &lt;lgl&gt; &lt;lgl&gt; &lt;lgl&gt; &lt;lgl&gt;\n1 abcdefghijklmnopqrstuvwxyzABAB                         FALSE FALSE FALSE TRUE \n2 banana orange strawberry apple                         FALSE FALSE FALSE TRUE \n3 ana went to montana to eat a banana                    FALSE FALSE FALSE TRUE \n4 call me at 432-394-2873. Do you want to go for a walk… TRUE  TRUE  FALSE FALSE\n5 phone: (123) 456-7890, nuid: 12345678, bank account b… TRUE  FALSE FALSE FALSE\n6 1600 Pennsylvania Ave NW, Washington D.C., 20500       FALSE FALSE TRUE  FALSE\n\n\n\n\n\n\n\n✅ Check-in: Functions from stringr\n1 Which of the follow are differences between length() and str_length()?\n\nlength() gives the number of elements in a vector\nstr_length() gives the number of characters in a string\nstr_length() gives the number of strings in a vector\nlength() gives the dimensions of a dataframe\n\n2 What of the following is true about str_replace()?\n\nstr_replace() replaces the first instance of the pattern\nstr_replace() replaces the last instance of the pattern\nstr_replace() replaces every instance of the pattern\n\n3 str_trim() allows you to remove whitespace on what sides\n\nleft\nright\nboth\n\n4 Which of the following does str_sub() use to create a substring?\n\nstarting position\nending position\npattern to search for\n\n5 Which of the following does str_subset() use to create a substring?\n\nstarting position\nending position\npattern to search for\n\n6 What does the collapse argument do in str_c()?\n\nspecifies a string to be used when combining inputs into a single string\nspecifies whether the string should be collapsed",
    "crumbs": [
      "Weekly materials",
      "Week 11 - Strings, Dates, and Times"
    ]
  },
  {
    "objectID": "group-activities/week-2/pa1-base-r-solution.html",
    "href": "group-activities/week-2/pa1-base-r-solution.html",
    "title": "Practice Activity 1: Find the Mistakes",
    "section": "",
    "text": "Today you will be creating and manipulating vectors, lists, and data frames to uncover a top secret message.\nThis task is complex. It requires many different types of abilities. Everyone will be good at some of these abilities but nobody will be good at all of them. In order to solve this puzzle, you will need to use the skills of each member of your group.\nSome advice:"
  },
  {
    "objectID": "group-activities/week-2/pa1-base-r-solution.html#groupwork-protocols",
    "href": "group-activities/week-2/pa1-base-r-solution.html#groupwork-protocols",
    "title": "Practice Activity 1: Find the Mistakes",
    "section": "Groupwork Protocols",
    "text": "Groupwork Protocols\nDuring the Practice Activity, you and your partner will alternate between two roles—Developer and Coder.\nWhen you are the Developer, you will type into the Quarto document in RStudio. However, you do not type your own ideas. Instead, you type what the Coder tells you to type. You are permitted to ask the Coder clarifying questions, and, if both of you have a question, you are permitted to ask the professor. You are expected to run the code provided by the Coder and, if necessary, to work with the Coder to debug the code. Once the code runs, you are expected to collaborate with the Coder to write code comments that describe the actions taken by your code.\nWhen you are the Coder, you are responsible for reading the instructions / prompts and directing the Developer what to type in the Quarto document. You are responsible for managing the resources your group has available to you (e.g., cheatsheet, textbook). If necessary, you should work with the Developer to debug the code you specified. Once the code runs, you are expected to collaborate with the Developer to write code comments that describe the actions taken by your code.\n\nGroup Norms\nRemember, your group is expected to adhere to the following norms:\n\nThink and work together. Do not divide the work.\nYou are smarter together.\nNo cross-talk with other groups."
  },
  {
    "objectID": "group-activities/week-2/pa1-base-r-solution.html#part-zero-accessing-the-practice-activity",
    "href": "group-activities/week-2/pa1-base-r-solution.html#part-zero-accessing-the-practice-activity",
    "title": "Practice Activity 1: Find the Mistakes",
    "section": "Part Zero: Accessing the Practice Activity",
    "text": "Part Zero: Accessing the Practice Activity\n\nTo access the activity and get it ready to share:\n\nLog into your CSUMB R Server Account.\n\nChoose one partner (with the closest upcoming birthday) to create an R Project called “pa-1-intro-quarto”.\n\nUpload the pa1-base-r.qmd into the project folder.\n\nShare the project with the other partner, go to File &gt; Share Project &gt; Type partner’s username &gt; Click Add"
  },
  {
    "objectID": "group-activities/week-2/pa1-base-r-solution.html#part-one-setup",
    "href": "group-activities/week-2/pa1-base-r-solution.html#part-one-setup",
    "title": "Practice Activity 1: Find the Mistakes",
    "section": "Part One: Setup",
    "text": "Part One: Setup\nEach of the following R chunks will cause an error and / or do the desired task incorrectly. Find the mistake, and correct it to complete the intended action.\n\nCreate vectors containing the upper case letters, lower case letters, and some punctuation marks.\n\n\nlower_case &lt;- c(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\",\n                \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\")\n\nupper_case &lt;- c(\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\",\n                \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\")\n\npunctuation &lt;- c(\".\", \",\", \"!\", \"?\", \"'\", '\"', \"(\", \")\", \" \", \"-\", \";\", \":\")\n\n\nMake one long vector containing all the symbols.\n\n\nmy_symbols &lt;- c(lower_case, upper_case, punctuation)\n\n\nTurn the my_symbols vector into a data frame, with one column named “symbol”.\n\n\nmy_symbols &lt;- data.frame(symbol = my_symbols)\n\n\nFind the total number of symbols we have in our data frame.\n\n\nlen &lt;- length(my_symbols$symbol)\n\n\nCreate a new variable in your dataframe that assigns a number to each symbol.\n\n\nmy_symbols$num &lt;- 1:len"
  },
  {
    "objectID": "group-activities/week-2/pa1-base-r-solution.html#part-two-decoding-the-secret-message.",
    "href": "group-activities/week-2/pa1-base-r-solution.html#part-two-decoding-the-secret-message.",
    "title": "Practice Activity 1: Find the Mistakes",
    "section": "Part Two: Decoding the secret message.",
    "text": "Part Two: Decoding the secret message.\nThis chunk will load up the encoded secret message as a vector:\n\nlibrary(readr)\ntop_secret &lt;- read_csv(\"https://www.dropbox.com/s/k72h1zewk4gtqep/PA_Secret_Code?dl=1\", \n                       col_names = FALSE)$X1\n\nBy altering this top secret set of numbers, you will be able to create a message. Write your own code to complete the steps, in the order given below.\n\nAdd 14 to every number.\nMultiply every number by 18, then subtract 257.\nUse the exp() function to exponentiate every number.\nSquare every number.\n\nHint: To update a vector after performing an operation, you overwrite the existing object with its updated counterpart. This looks something like this:\nx &lt;- x + 12,\nwhere the original value(s) in x have had 12 added to them, and the resulting values are put back in to the object named x.\n\n## Code to carry out steps 6-9 \n\nts6 &lt;- top_secret + 14\nts7 &lt;- ts6*18 - 257\nts8 &lt;- exp(ts7)\nts9 &lt;- ts8^2\n\nCheckpoint: Headquarters has informed you that at this stage of decoding, there should be 352 numbers in the secret message that are below 17. Write the code to verify that this is true for your top_secret object!\nHint: This is what is called a “relational” comparison, where you compare an object to a number and R will give you a vector of TRUEs and FALSEs based on whether the comparison is / is not met. You can then use these TRUEs and FALSEs as numbers, since TRUE = 1 and FALSE = 0 in R land.\n\n# Write code to verify that there are 352 numbers with values **below** 17\nsum(ts9 &lt; 17)\n\nNext, carry out the following steps:\n\nTurn your vector of numbers into a matrix with 5 columns.\nSeparately from your top secret numbers, create a vector of all the even numbers between 1 and 382. Name it “evens”. That is, “evens” should contain 2, 4, 6, 8 …, 382.\nSubtract the “evens” vector from the first column of your secret message matrix.\nSubtract 100 from all numbers 18-24th rows of the 3rd column.\nMultiply all numbers in the 4th and 5th column by 2.\nTurn your matrix back into a vector.\n\n\n## Code to carry out steps 10-15\n\nts_mat &lt;- matrix(ts9, ncol = 5)\nevens &lt;- seq(2,382, by = 2)\nts_mat[,1] &lt;- ts_mat[,1] - evens\nts_mat[18:24, 3] &lt;- ts_mat[18:24, 3] - 100\nts_mat[, 4:5] &lt;- ts_mat[, 4:5]*2\nts_vec &lt;- as.vector(ts_mat)\n\nCheckpoint: Headquarters has informed you that at this stage of decoding, all numbers in indices 500 and beyond are below 100. Write the code to verify that this is true for your top_secret object!\nHint: Use a relational comparison similar to what you used in the last checkpoint, but here you will need to subset values from your vector!\n\n# Write code to verify that indices 500 and beyond have values **below** 100\nsum(ts_vec[500:955] &gt;= 100)\n\n\nTake the square root of all numbers in indices 38 to 465.\nUse the round() function to round all numbers to the nearest whole number.\nReplace all instances of the number 39 with 20.\n\nHint: Step 18 requires another relational comparison, but this time it is equality. Equality in R is checked with a double equal sign rather than a single equal sign!\n\n# Code for steps 16-18\nts_vec[38:465] &lt;- sqrt(ts_vec[38:465])\nts_vec &lt;- round(ts_vec)\nts_vec[ts_vec == 39] &lt;- 20\n\nCheckpoint: Headquarters has informed you that your final message should have 344 even numbers.\nHint: Checking for divisibility is an interesting operation that isn’t done much in R. Modulus is the operation you are interested in, where you are checking for whether the numbers are divisible by 2, with no remainder. See what you can find about modulus in R!\n\n# Code to verify how many even numbers are in your top_secret vector\n\nsum(ts_vec %% 2 == 0)"
  },
  {
    "objectID": "group-activities/week-2/pa1-base-r-solution.html#part-3-the-secret-message",
    "href": "group-activities/week-2/pa1-base-r-solution.html#part-3-the-secret-message",
    "title": "Practice Activity 1: Find the Mistakes",
    "section": "Part 3: The secret message!",
    "text": "Part 3: The secret message!\nUse your final vector of numbers as indices for my_symbols to discover the final message, by running the following code:\n\nstringr::str_c(my_symbols$symbol[ts_vec], collapse = \"\")\n\nGoogle the first line of this message, if you do not recognize it, to see what poem it is."
  },
  {
    "objectID": "labs/instructions/lab-4-instructions.html",
    "href": "labs/instructions/lab-4-instructions.html",
    "title": "Lab 4: Importing NOAA Buoy Data from Monterey Bay",
    "section": "",
    "text": "Set up your GitHub workflow (either using the method of creating a repository and using Version Control to set up your project or vice versa using the usethis package commands we have learned).\nUse appropriate naming conventions for your project (see Code Style Guide), e.g. lab-4-import-data.\nYour project folder should contain the following:\n\n.Rproj\nlab-4-student.qmd\n“data-raw” folder containing\n\nbuoy_2024.txt\n\n“data-clean” folder that will contain only final data set\nrendered document\n\nYou will submit a link to your GitHub repository with all content.\n\n\n\nPart of learning to program is learning from a variety of resources. Thus, I expect you will use resources that you find on the internet. There is, however, an important balance between copying someone else’s code and using their code to learn. Therefore, if you use external resources, I want to know about it.\n\nIf you used Google, you are expected to “inform” me of any resources you used by pasting the link to the resource in a code comment next to where you used that resource.\nIf you used ChatGPT, you are expected to “inform” me of the assistance you received by (1) indicating somewhere in the problem that you used ChatGPT (e.g., below the question prompt or as a code comment), and (2) downloading and including the .txt file containing your entire conversation with ChatGPT in your repository. ChatGPT can we used as a “search engine”, but you should not copy and paste prompts from the lab or the code into your lab.\n\nAdditionally, you are permitted and encouraged to work with your peers as you complete lab assignments, but you are expected to do your own work. Copying from each other is cheating, and letting people copy from you is also cheating. Please don’t do either of those things.\n\n\n\nThe questions in this lab are noted with numbers and boldface. Each question will require you to produce code, whether it is one line or multiple lines.\nThis document is quite plain, meaning it does not have any special formatting. As part of your demonstration of creating professional looking Quarto documents, I would encourage you to spice your documents up (e.g., declaring execution options, specifying how your figures should be output, formatting your code output, etc.).\n\n\n\nIn the code chunk below, load in the packages necessary for your analysis. You should only need the tidyverse package for this analysis.",
    "crumbs": [
      "Labs",
      "Lab 4 Instructions"
    ]
  },
  {
    "objectID": "labs/instructions/lab-4-instructions.html#github-workflow",
    "href": "labs/instructions/lab-4-instructions.html#github-workflow",
    "title": "Lab 4: Importing NOAA Buoy Data from Monterey Bay",
    "section": "",
    "text": "Set up your GitHub workflow (either using the method of creating a repository and using Version Control to set up your project or vice versa using the usethis package commands we have learned).\nUse appropriate naming conventions for your project (see Code Style Guide), e.g. lab-4-import-data.\nYour project folder should contain the following:\n\n.Rproj\nlab-4-student.qmd\n“data-raw” folder containing\n\nbuoy_2024.txt\n\n“data-clean” folder that will contain only final data set\nrendered document\n\nYou will submit a link to your GitHub repository with all content.",
    "crumbs": [
      "Labs",
      "Lab 4 Instructions"
    ]
  },
  {
    "objectID": "labs/instructions/lab-4-instructions.html#seeking-help",
    "href": "labs/instructions/lab-4-instructions.html#seeking-help",
    "title": "Lab 4: Importing NOAA Buoy Data from Monterey Bay",
    "section": "",
    "text": "Part of learning to program is learning from a variety of resources. Thus, I expect you will use resources that you find on the internet. There is, however, an important balance between copying someone else’s code and using their code to learn. Therefore, if you use external resources, I want to know about it.\n\nIf you used Google, you are expected to “inform” me of any resources you used by pasting the link to the resource in a code comment next to where you used that resource.\nIf you used ChatGPT, you are expected to “inform” me of the assistance you received by (1) indicating somewhere in the problem that you used ChatGPT (e.g., below the question prompt or as a code comment), and (2) downloading and including the .txt file containing your entire conversation with ChatGPT in your repository. ChatGPT can we used as a “search engine”, but you should not copy and paste prompts from the lab or the code into your lab.\n\nAdditionally, you are permitted and encouraged to work with your peers as you complete lab assignments, but you are expected to do your own work. Copying from each other is cheating, and letting people copy from you is also cheating. Please don’t do either of those things.",
    "crumbs": [
      "Labs",
      "Lab 4 Instructions"
    ]
  },
  {
    "objectID": "labs/instructions/lab-4-instructions.html#lab-instructions",
    "href": "labs/instructions/lab-4-instructions.html#lab-instructions",
    "title": "Lab 4: Importing NOAA Buoy Data from Monterey Bay",
    "section": "",
    "text": "The questions in this lab are noted with numbers and boldface. Each question will require you to produce code, whether it is one line or multiple lines.\nThis document is quite plain, meaning it does not have any special formatting. As part of your demonstration of creating professional looking Quarto documents, I would encourage you to spice your documents up (e.g., declaring execution options, specifying how your figures should be output, formatting your code output, etc.).",
    "crumbs": [
      "Labs",
      "Lab 4 Instructions"
    ]
  },
  {
    "objectID": "labs/instructions/lab-4-instructions.html#setup",
    "href": "labs/instructions/lab-4-instructions.html#setup",
    "title": "Lab 4: Importing NOAA Buoy Data from Monterey Bay",
    "section": "",
    "text": "In the code chunk below, load in the packages necessary for your analysis. You should only need the tidyverse package for this analysis.",
    "crumbs": [
      "Labs",
      "Lab 4 Instructions"
    ]
  },
  {
    "objectID": "labs/instructions/lab-4-instructions.html#step-1-reading-the-data-into-r",
    "href": "labs/instructions/lab-4-instructions.html#step-1-reading-the-data-into-r",
    "title": "Lab 4: Importing NOAA Buoy Data from Monterey Bay",
    "section": "2.1 Step 1: Reading the Data into R",
    "text": "2.1 Step 1: Reading the Data into R\nRead the data into R. Since it is a txt file it is considered a “whitespace-separated file”. Use the (readr)[https://readr.tidyverse.org/index.html] website to determine the appropriate read_XXX() function.\nWhen you read in the data give it an appropriate name for what the data represents. The read in file should look like this (note this is just the first seven columns):\n\n\n# A tibble: 10 × 7\n   YY    MM    DD    hh    mm    WDIR  WSPD \n   &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt;\n 1 #yr   mo    dy    hr    mn    degT  m/s  \n 2 2024  01    01    00    18    60    2.1  \n 3 2024  01    01    01    18    80    1.0  \n 4 2024  01    01    02    18    100   1.5  \n 5 2024  01    01    03    18    80    1.5  \n 6 2024  01    01    04    18    60    1.5  \n 7 2024  01    01    05    18    350   4.1  \n 8 2024  01    01    06    18    20    4.1  \n 9 2024  01    01    07    18    30    4.1  \n10 2024  01    01    08    18    60    2.6  \n\n\nNotice that the data is all read in as a character value and the first row contains information that is not data, but additional information about the variables: this is called a “comment” in the data.",
    "crumbs": [
      "Labs",
      "Lab 4 Instructions"
    ]
  },
  {
    "objectID": "labs/instructions/lab-4-instructions.html#step-2-specify-the-comment-row",
    "href": "labs/instructions/lab-4-instructions.html#step-2-specify-the-comment-row",
    "title": "Lab 4: Importing NOAA Buoy Data from Monterey Bay",
    "section": "2.2 Step 2: Specify the Comment Row",
    "text": "2.2 Step 2: Specify the Comment Row\nIn your data, you will notice the # in front of yr in the second row. That is the symbol that indicates a comment in the data set. Using the cheatsheet or the (readr)[https://readr.tidyverse.org/index.html] website, add an argument to your function that indicates that the comment row begins with #. Your data should now look like this:\n\n\n# A tibble: 10 × 7\n      YY MM    DD    hh    mm     WDIR  WSPD\n   &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt;\n 1  2024 01    01    00    18       60   2.1\n 2  2024 01    01    01    18       80   1  \n 3  2024 01    01    02    18      100   1.5\n 4  2024 01    01    03    18       80   1.5\n 5  2024 01    01    04    18       60   1.5\n 6  2024 01    01    05    18      350   4.1\n 7  2024 01    01    06    18       20   4.1\n 8  2024 01    01    07    18       30   4.1\n 9  2024 01    01    08    18       60   2.6\n10  2024 01    01    09    18       70   4.1",
    "crumbs": [
      "Labs",
      "Lab 4 Instructions"
    ]
  },
  {
    "objectID": "labs/instructions/lab-4-instructions.html#step-3-clean-the-variable-names",
    "href": "labs/instructions/lab-4-instructions.html#step-3-clean-the-variable-names",
    "title": "Lab 4: Importing NOAA Buoy Data from Monterey Bay",
    "section": "2.3 Step 3: Clean the Variable Names",
    "text": "2.3 Step 3: Clean the Variable Names\nWe want to use snake_case for our variable names. Use the janitor package to clean the variable names. Notice, that because month was originally coded MM and minute was originally coded mm that now month is mm and minute is mm_2 to create a distinction between them.\n\n\n# A tibble: 6 × 5\n     yy mm    dd    hh    mm_2 \n  &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt;\n1  2024 01    01    00    18   \n2  2024 01    01    01    18   \n3  2024 01    01    02    18   \n4  2024 01    01    03    18   \n5  2024 01    01    04    18   \n6  2024 01    01    05    18",
    "crumbs": [
      "Labs",
      "Lab 4 Instructions"
    ]
  },
  {
    "objectID": "labs/instructions/lab-4-instructions.html#step-4-write-the-data-part-1",
    "href": "labs/instructions/lab-4-instructions.html#step-4-write-the-data-part-1",
    "title": "Lab 4: Importing NOAA Buoy Data from Monterey Bay",
    "section": "2.4 Step 4: Write the Data Part 1",
    "text": "2.4 Step 4: Write the Data Part 1\nWe will have a bit of cleaning to do on the data, but we have an issue. The 99 and 999’s in the data are numeric and not character values. In order for us to specify them as NAs we need to do a little work around.\nWrite the data to a csv file called buoy_update.csv. Be sure to write it to your data-raw folder.",
    "crumbs": [
      "Labs",
      "Lab 4 Instructions"
    ]
  },
  {
    "objectID": "labs/instructions/lab-4-instructions.html#step-5-dealing-with-missing-values",
    "href": "labs/instructions/lab-4-instructions.html#step-5-dealing-with-missing-values",
    "title": "Lab 4: Importing NOAA Buoy Data from Monterey Bay",
    "section": "2.5 Step 5: Dealing with Missing Values",
    "text": "2.5 Step 5: Dealing with Missing Values\nNow we will read the data back in, be sure to assign the it a meaningful object name, BUT we are going to do two things:\n\nSpecify all column type defaults as character.\n\nSpecify NAs as “99” and “999”\n\nRemember that now we are reading back in a data file of type csv. Now when you look at the data we should have NA instead of 99 or 999 in our data, for example:\n\n\n# A tibble: 5 × 4\n  dpd   apd   mwd   pres  \n  &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; \n1 &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  1018.6\n2 &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  1018.6\n3 &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  1018.9\n4 &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  1019.2\n5 &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  1019.2\n\n\nThis is great! But we created another problem. Now all of our numeric values are being treated like characters and we don’t want that. There are a couple of ways to fix this. We can write and reread in the data setting the column types to double or we can use the readr parsing functions.\nHere is the code you can use to fix the data without exporting and importing again (we will learn more about the mutate() function. Insert whatever you called your buoy data on the last import for your_file_name.\n\nbuoy_final &lt;- your_file_name |&gt; \n  mutate(across(.cols = everything(), ~parse_double(.x)))\n\nNow we have our clean, correctly classified, data ready for analysis as buoy_final. Go ahead and write that data as a csv file into your data-clean file. Once you’ve done that. Set the data cleaning code chunks to eval: false so that you do not rerun them again when you render the document.",
    "crumbs": [
      "Labs",
      "Lab 4 Instructions"
    ]
  },
  {
    "objectID": "labs/instructions/lab-3-instructions.html",
    "href": "labs/instructions/lab-3-instructions.html",
    "title": "Lab 3: Exploring Rodents with ggplot2",
    "section": "",
    "text": "Set up your GitHub workflow (either using the method of creating a repository and using Version Control to set up your project or vice versa using the usethis package commands we have learned).\nUse appropriate naming conventions for your project (see Code Style Guide), e.g. lab-3-ggplot2.\nYour project folder should contain the following:\n\n.Rproj\n\nlab-3-student.qmd\n“data” folder\n\nsurveys.csv\n\nrendered document\n\nYou will submit a link to your GitHub repository with all content.\n\n\n\nPart of learning to program is learning from a variety of resources. Thus, I expect you will use resources that you find on the internet. There is, however, an important balance between copying someone else’s code and using their code to learn. Therefore, if you use external resources, I want to know about it.\n\nIf you used Google, you are expected to “inform” me of any resources you used by pasting the link to the resource in a code comment next to where you used that resource.\nIf you used ChatGPT, you are expected to “inform” me of the assistance you received by (1) indicating somewhere in the problem that you used ChatGPT (e.g., below the question prompt or as a code comment), and (2) downloading and attaching the .txt file containing your entire conversation with ChatGPT. ChatGPT can we used as a “search engine”, but you should not copy and paste prompts from the lab or the code into your lab.\n\nAdditionally, you are permitted and encouraged to work with your peers as you complete lab assignments, but you are expected to do your own work. Copying from each other is cheating, and letting people copy from you is also cheating. Please don’t do either of those things.\n\n\n\nThe questions in this lab are noted with numbers and boldface. Each question will require you to produce code, whether it is one line or multiple lines.\nThis document is quite plain, meaning it does not have any special formatting. As part of your demonstration of creating professional looking Quarto documents, I would encourage you to spice your documents up (e.g., declaring execution options, specifying how your figures should be output, formatting your code output, etc.).\n\n\n\nIn the code chunk below, load in the packages necessary for your analysis. You should only need the tidyverse package for this analysis.",
    "crumbs": [
      "Labs",
      "Lab 3 and Challenge 3 Instructions"
    ]
  },
  {
    "objectID": "labs/instructions/lab-3-instructions.html#github-workflow",
    "href": "labs/instructions/lab-3-instructions.html#github-workflow",
    "title": "Lab 3: Exploring Rodents with ggplot2",
    "section": "",
    "text": "Set up your GitHub workflow (either using the method of creating a repository and using Version Control to set up your project or vice versa using the usethis package commands we have learned).\nUse appropriate naming conventions for your project (see Code Style Guide), e.g. lab-3-ggplot2.\nYour project folder should contain the following:\n\n.Rproj\n\nlab-3-student.qmd\n“data” folder\n\nsurveys.csv\n\nrendered document\n\nYou will submit a link to your GitHub repository with all content.",
    "crumbs": [
      "Labs",
      "Lab 3 and Challenge 3 Instructions"
    ]
  },
  {
    "objectID": "labs/instructions/lab-3-instructions.html#seeking-help",
    "href": "labs/instructions/lab-3-instructions.html#seeking-help",
    "title": "Lab 3: Exploring Rodents with ggplot2",
    "section": "",
    "text": "Part of learning to program is learning from a variety of resources. Thus, I expect you will use resources that you find on the internet. There is, however, an important balance between copying someone else’s code and using their code to learn. Therefore, if you use external resources, I want to know about it.\n\nIf you used Google, you are expected to “inform” me of any resources you used by pasting the link to the resource in a code comment next to where you used that resource.\nIf you used ChatGPT, you are expected to “inform” me of the assistance you received by (1) indicating somewhere in the problem that you used ChatGPT (e.g., below the question prompt or as a code comment), and (2) downloading and attaching the .txt file containing your entire conversation with ChatGPT. ChatGPT can we used as a “search engine”, but you should not copy and paste prompts from the lab or the code into your lab.\n\nAdditionally, you are permitted and encouraged to work with your peers as you complete lab assignments, but you are expected to do your own work. Copying from each other is cheating, and letting people copy from you is also cheating. Please don’t do either of those things.",
    "crumbs": [
      "Labs",
      "Lab 3 and Challenge 3 Instructions"
    ]
  },
  {
    "objectID": "labs/instructions/lab-3-instructions.html#lab-instructions",
    "href": "labs/instructions/lab-3-instructions.html#lab-instructions",
    "title": "Lab 3: Exploring Rodents with ggplot2",
    "section": "",
    "text": "The questions in this lab are noted with numbers and boldface. Each question will require you to produce code, whether it is one line or multiple lines.\nThis document is quite plain, meaning it does not have any special formatting. As part of your demonstration of creating professional looking Quarto documents, I would encourage you to spice your documents up (e.g., declaring execution options, specifying how your figures should be output, formatting your code output, etc.).",
    "crumbs": [
      "Labs",
      "Lab 3 and Challenge 3 Instructions"
    ]
  },
  {
    "objectID": "labs/instructions/lab-3-instructions.html#setup",
    "href": "labs/instructions/lab-3-instructions.html#setup",
    "title": "Lab 3: Exploring Rodents with ggplot2",
    "section": "",
    "text": "In the code chunk below, load in the packages necessary for your analysis. You should only need the tidyverse package for this analysis.",
    "crumbs": [
      "Labs",
      "Lab 3 and Challenge 3 Instructions"
    ]
  },
  {
    "objectID": "labs/instructions/lab-3-instructions.html#reading-the-data-into-r",
    "href": "labs/instructions/lab-3-instructions.html#reading-the-data-into-r",
    "title": "Lab 3: Exploring Rodents with ggplot2",
    "section": "2.1 Reading the Data into R",
    "text": "2.1 Reading the Data into R\nWe are going to use the read_csv() function to load in the surveys.csv dataset (stored in the data folder). For simplicity, name the data surveys. We will learn more about this function next week.\n\nsurveys &lt;- read_csv(\"data/surveys.csv\")\n#glimpse(surveys)\n\n1. What are the dimensions (# of rows and columns) of these data?\n\n2. What are the data types of the variables in this dataset?",
    "crumbs": [
      "Labs",
      "Lab 3 and Challenge 3 Instructions"
    ]
  },
  {
    "objectID": "labs/instructions/lab-3-instructions.html#scatterplot",
    "href": "labs/instructions/lab-3-instructions.html#scatterplot",
    "title": "Lab 3: Exploring Rodents with ggplot2",
    "section": "3.1 Scatterplot",
    "text": "3.1 Scatterplot\n3. First, let’s create a scatterplot of the relationship between weight (on the \\(x\\)-axis) and hindfoot_length (on the \\(y\\)-axis).\nWe can see there are a lot of points plotted on top of each other. Let’s try and modify this plot to extract more information from it.\n4. Let’s add transparency (alpha) to the points, to make the points more transparent and (possibly) easier to see.\n\nDespite our best efforts there is still a substantial amount of overplotting occurring in our scatterplot. Let’s try splitting the dataset into smaller subsets and see if that allows for us to see the trends a bit better.\n6. Facet your scatterplot by species.\n\n7. No plot is complete without axis labels and a title. Include reader friendly labels and a title to your plot.\n\nIt takes a larger cognitive load to read text that is rotated. It is common practice in many journals and media outlets to move the \\(y\\)-axis label to the top of the graph under the title.\n8. Specify your \\(y\\)-axis label to be empty and move the \\(y\\)-axis label into the subtitle.",
    "crumbs": [
      "Labs",
      "Lab 3 and Challenge 3 Instructions"
    ]
  },
  {
    "objectID": "labs/instructions/lab-3-instructions.html#boxplots",
    "href": "labs/instructions/lab-3-instructions.html#boxplots",
    "title": "Lab 3: Exploring Rodents with ggplot2",
    "section": "3.2 Boxplots",
    "text": "3.2 Boxplots\n9. Create side-by-side boxplots to visualize the distribution of weight within each species.\nA fundamental complaint of boxplots is that they do not plot the raw data. However, with ggplot we can add the raw points on top of the boxplots!\n10. Add another layer to your previous plot that plots each observation using geom_point().\n\nAlright, this should look less than optimal. Your points should appear rather stacked on top of each other. To make them less stacked, we need to jitter them a bit, using geom_jitter().\n11. Remove the previous layer and include a geom_jitter() layer instead.\n\nThat should look a bit better! But its really hard to see the points when everything is black.\n12. Set the color aesthetic in geom_jitter() to change the color of the points and add set the alpha aesthetic to add transparency. You are welcome to use whatever color you wish! Some of my favorites are “springgreen4” and “steelblue4”. Check them out on R Charts\n\nGreat! Now that you can see the points, you should notice something odd: there are two colors of points still being plotted. Some of the observations are being plotted twice, once from geom_boxplot() as outliers and again from geom_jitter()!\n13. Inspect the help file for geom_boxplot() and see how you can remove the outliers from being plotted by geom_boxplot(). Make this change in your code!\n\nSome small changes can make big differences to plots. One of these changes are better labels for a plot’s axes and legend.\n14. Modify the \\(x\\)-axis and \\(y\\)-axis labels to describe what is being plotted. Be sure to include any necessary units! You might also be getting overlap in the species names – use theme(axis.text.x = ____) or theme(axis.text.y = ____) to turn the species axis labels 45 degrees.\n\nSome people (and journals) prefer for boxplots to be stacked with a specific orientation! Let’s practice changing the orientation of our boxplots.\n15. Now copy-paste your boxplot code you’ve been adding to above. Flip the orientation of your boxplots. If you created horizontally stacked boxplots, your boxplots should now be stacked vertically. If you had vertically stacked boxplots, you should now stack your boxplots horizontally!\nNotice how vertically stacked boxplots make the species labels more readable than horizontally stacked boxplots (even when the axis labels are rotated). This is good practice!",
    "crumbs": [
      "Labs",
      "Lab 3 and Challenge 3 Instructions"
    ]
  },
  {
    "objectID": "labs/instructions/lab-3-instructions.html#medium-ridge-plots",
    "href": "labs/instructions/lab-3-instructions.html#medium-ridge-plots",
    "title": "Lab 3: Exploring Rodents with ggplot2",
    "section": "5.1 🌶 Medium: Ridge Plots",
    "text": "5.1 🌶 Medium: Ridge Plots\nIn Lab 3, you used side-by-side boxplots to visualize the distribution of weight within each species of rodent. Boxplots have substantial flaws, namely that they disguise distributions with multiple modes.\nA “superior” alternative is the density plot. However, ggplot2 does not allow for side-by-side density plots using geom_density(). Instead, we will need to make use of the ggridges package to create side-by-side density (ridge) plots.\n\nFor this challenge you are to change your boxplots to ridge plots. You will need to install the ggridges package and explore the geom_density_ridges() function.",
    "crumbs": [
      "Labs",
      "Lab 3 and Challenge 3 Instructions"
    ]
  },
  {
    "objectID": "labs/instructions/lab-3-instructions.html#spicy-exploring-color-themes",
    "href": "labs/instructions/lab-3-instructions.html#spicy-exploring-color-themes",
    "title": "Lab 3: Exploring Rodents with ggplot2",
    "section": "5.2 🌶 🌶 Spicy: Exploring Color Themes",
    "text": "5.2 🌶 🌶 Spicy: Exploring Color Themes\nThe built-in ggplot() color scheme may not include the colors you were looking for. Don’t worry – there are many other color palettes available to use!\nYou can change the colors used by ggplot() in a few different ways.\n\nManual Specification\nAdd the scale_color_manual() or scale_fill_manual() functions to your plot and directly specify the colors you want to use. You can either:\n\ndefine a vector of colors within the scale functions (e.g. values = c(\"blue\", \"black\", \"red\", \"green\")) OR\ncreate a vector of colors using hex numbers and store that vector as a variable. Then, call that vector in the scale_color_manual() function.\n\nHere are some example hex color schemes:\n\n# A vector of a RG color deficient friendly palette with gray:\ncdPalette_grey &lt;- c(\"#999999\", \"#E69F00\", \"#56B4E9\", \"#009E73\", \"#F0E442\", \"#0072B2\", \"#D55E00\", \"#CC79A7\")\n\n# A vector of a RG color deficient friendly palette with black:\ncdPalette_blk &lt;- c(\"#000000\", \"#E69F00\", \"#56B4E9\", \"#009E73\", \"#F0E442\", \"#0072B2\", \"#D55E00\", \"#CC79A7\")\n\n\n\n\n\n\n\nNote\n\n\n\nIf you are interested in using specific hex colors, I like the image color picker app to find the colors I want.\n\n\n\n\nPackage Specification\nWhile manual specification may be necessary for some contexts, it can be a real pain to handpick 5+ colors. This is where color scales built-in to R packages come in handy! Popular packages for colors include:\n\nRColorBrewer – change colors by using scale_fill_brewer() or scale_colour_brewer().\nviridis – change colors by using scale_colour_viridis_d() for discrete data, scale_colour_viridis_c() for continuous data.\nggsci – change colors by using scale_color_&lt;PALNAME&gt;() or scale_fill_&lt;PALNAME&gt;(), where you specify the name of the palette you wish to use (e.g. scale_color_aaas()).\n\n\n\n\n\n\n\nNote\n\n\n\nThis website provides an exhaustive list of color themes available through various packages.\n\n\n\nIn this challenge you are expected to use this information to modify the boxplots you created Lab 3. First, you are to color the boxplots based on the variable genus. Next, you are to change the colors used for genus using either manual color specification or any of the packages listed here (or others!).",
    "crumbs": [
      "Labs",
      "Lab 3 and Challenge 3 Instructions"
    ]
  },
  {
    "objectID": "labs/instructions/lab-3-instructions.html#hot-exploring-ggplot2-annotation",
    "href": "labs/instructions/lab-3-instructions.html#hot-exploring-ggplot2-annotation",
    "title": "Lab 3: Exploring Rodents with ggplot2",
    "section": "5.3 🌶 🌶 🌶 Hot: Exploring ggplot2 Annotation",
    "text": "5.3 🌶 🌶 🌶 Hot: Exploring ggplot2 Annotation\nSome data scientists advocate that we should try to eliminate legends from our plots to make them more clear. Instead of using legends, which cause the reader’s eye to stray from the plot, we should use annotation.\nWe can add annotation(s) to a ggplot() using the annotate() function:\n\nggplot(data = surveys, \n       mapping = aes(x = weight, y = species, color = genus)\n       ) +\n  geom_boxplot() +\n  scale_color_manual(values = cdPalette_grey) + \n  annotate(\"text\", y = 6, x = 200, label = \"Sigmodon\") +\n  annotate(\"text\", y = 4, x = 200, label = \"Perognathus\") +\n  theme(legend.position = \"none\") +\n  labs(x = \"Weight (g)\",\n       y = \"\",\n       subtitle = \"by Species and Genera\",\n       title = \"Rodent Weight\")\n\nNote that I’ve labeled the “Sigmodon” and “Perognathus” genera, so the reader can tell that these boxplots are associated with their respective genus.\n\nIn this challenge you are expected to use this information to modify the boxplots you created in Lab 3. First, you are to color the boxplots based on the variable genus. Next, you are to add annotations for each genus next to the boxplot(s) associated with that genus. Finally, you are expected to use the theme() function to remove the color legend from the plot, since it is no longer needed!",
    "crumbs": [
      "Labs",
      "Lab 3 and Challenge 3 Instructions"
    ]
  },
  {
    "objectID": "group-activities/week-1/data-cleaning-viz-steps.html#view-original-data",
    "href": "group-activities/week-1/data-cleaning-viz-steps.html#view-original-data",
    "title": "Master Script Data Processing",
    "section": "View Original Data",
    "text": "View Original Data"
  },
  {
    "objectID": "group-activities/week-1/data-cleaning-viz-steps.html#filter-just-us-based-jobs",
    "href": "group-activities/week-1/data-cleaning-viz-steps.html#filter-just-us-based-jobs",
    "title": "Master Script Data Processing",
    "section": "Filter Just US Based Jobs",
    "text": "Filter Just US Based Jobs"
  },
  {
    "objectID": "group-activities/week-1/data-cleaning-viz-steps.html#filter-out-entry-level-jobs-only",
    "href": "group-activities/week-1/data-cleaning-viz-steps.html#filter-out-entry-level-jobs-only",
    "title": "Master Script Data Processing",
    "section": "Filter out entry level jobs only",
    "text": "Filter out entry level jobs only"
  },
  {
    "objectID": "group-activities/week-1/data-cleaning-viz-steps.html#count-of-positions-by-remote-work-and-company-size",
    "href": "group-activities/week-1/data-cleaning-viz-steps.html#count-of-positions-by-remote-work-and-company-size",
    "title": "Master Script Data Processing",
    "section": "Count of positions by Remote Work and Company Size",
    "text": "Count of positions by Remote Work and Company Size"
  },
  {
    "objectID": "group-activities/week-1/data-cleaning-viz-steps.html#graph-of-remote-work-and-company-size",
    "href": "group-activities/week-1/data-cleaning-viz-steps.html#graph-of-remote-work-and-company-size",
    "title": "Master Script Data Processing",
    "section": "Graph of Remote Work and Company Size",
    "text": "Graph of Remote Work and Company Size"
  },
  {
    "objectID": "group-activities/week-1/data-cleaning-viz-steps.html#group-and-calculate-average-salary-by-year",
    "href": "group-activities/week-1/data-cleaning-viz-steps.html#group-and-calculate-average-salary-by-year",
    "title": "Master Script Data Processing",
    "section": "Group and Calculate Average Salary by year",
    "text": "Group and Calculate Average Salary by year"
  },
  {
    "objectID": "labs/instructions/lab-5-instructions.html",
    "href": "labs/instructions/lab-5-instructions.html",
    "title": "Lab 5: Student Evaluations of Teaching",
    "section": "",
    "text": "In this lab, we will be using the dplyr package to explore student evaluations of teaching data. You are expected to use functions from dplyr to do your data manipulation!",
    "crumbs": [
      "Labs",
      "Lab 5 Instructions"
    ]
  },
  {
    "objectID": "labs/instructions/lab-5-instructions.html#step-1-make-a-git-hub-repository",
    "href": "labs/instructions/lab-5-instructions.html#step-1-make-a-git-hub-repository",
    "title": "Lab 5: Student Evaluations of Teaching",
    "section": "Step 1: Make a Git Hub Repository",
    "text": "Step 1: Make a Git Hub Repository\nBe sure to set up a GitHub repository and then use Version Control to set up your Lab 5 R Project so it is connected. Then download this week’s lab file into the folder and create a data-raw and data-clean folder and store the provided data appropriately:\n\nlab-5-student.qmd\ndata-raw\n\nteacher_evals.csv\n\ndata-clean (you will want to save your clean data data in this folder)\n\nYou will also want to look at the Teacher Evaluations Codebook to help you understand the variables and data.",
    "crumbs": [
      "Labs",
      "Lab 5 Instructions"
    ]
  },
  {
    "objectID": "labs/instructions/lab-5-instructions.html#step-2-making-a-small-change",
    "href": "labs/instructions/lab-5-instructions.html#step-2-making-a-small-change",
    "title": "Lab 5: Student Evaluations of Teaching",
    "section": "Step 2: Making a Small Change",
    "text": "Step 2: Making a Small Change\nNow, find the lab-5-student.qmd file in the “Files” tab in the lower right hand corner. Click on this file to open it.\nAt the top of the document (in the YAML) there is an author line that says \"Your name here!\". Change this to be your name and save your file either by clicking on the blue floppy disk or with a shortcut (command / control + s).",
    "crumbs": [
      "Labs",
      "Lab 5 Instructions"
    ]
  },
  {
    "objectID": "labs/instructions/lab-5-instructions.html#step-3-pushing-your-lab-to-github",
    "href": "labs/instructions/lab-5-instructions.html#step-3-pushing-your-lab-to-github",
    "title": "Lab 5: Student Evaluations of Teaching",
    "section": "Step 3: Pushing Your Lab to GitHub",
    "text": "Step 3: Pushing Your Lab to GitHub\nNow for our last step, we need to commit the files to our repo.\n\nClick the “Git” tab in upper right pane\nCheck the “Staged” box for the lab-3-student.qmd file\nClick “Commit”\nIn the box that opens, type a message in “Commit message”, such as “Added my name”.\nClick “Commit”.\nClick the green “Push” button to send your local changes to GitHub.\n\nRStudio will display something like:\n&gt;&gt;&gt; /usr/bin/git push origin HEAD:refs/heads/main\nTo https://github.com/atheobold/introduction-to-quarto-allison-theobold.git\n   3a2171f..6d58539  HEAD -&gt; main",
    "crumbs": [
      "Labs",
      "Lab 5 Instructions"
    ]
  },
  {
    "objectID": "labs/instructions/lab-5-instructions.html#step-4-lets-get-started-wrangling-some-data",
    "href": "labs/instructions/lab-5-instructions.html#step-4-lets-get-started-wrangling-some-data",
    "title": "Lab 5: Student Evaluations of Teaching",
    "section": "Step 4: Let’s get started wrangling some data!",
    "text": "Step 4: Let’s get started wrangling some data!",
    "crumbs": [
      "Labs",
      "Lab 5 Instructions"
    ]
  },
  {
    "objectID": "labs/instructions/lab-5-instructions.html#setting-up-your-code-chunks",
    "href": "labs/instructions/lab-5-instructions.html#setting-up-your-code-chunks",
    "title": "Lab 5: Student Evaluations of Teaching",
    "section": "Setting Up Your Code Chunks",
    "text": "Setting Up Your Code Chunks\n\nThe first chunk of your Quarto document should be to declare your libraries (probably only tidyverse for now).\nThe second chunk of your Quarto document should be to load in your data.",
    "crumbs": [
      "Labs",
      "Lab 5 Instructions"
    ]
  },
  {
    "objectID": "labs/instructions/lab-5-instructions.html#save-regularly-render-often",
    "href": "labs/instructions/lab-5-instructions.html#save-regularly-render-often",
    "title": "Lab 5: Student Evaluations of Teaching",
    "section": "Save Regularly, Render Often",
    "text": "Save Regularly, Render Often\n\nBe sure to save your work regularly.\nBe sure to render your file every so often, to check for errors and make sure it looks nice.\n\nMake sure your Quarto document does not contain View(dataset) or install.packages(\"package\"), both of these will prevent rendering.\nCheck your Quarto document for occasions when you looked at the data by typing the name of the data frame. Leaving these in means the whole dataset will print out and this looks unprofessional. Remove these!\nIf all else fails, you can set your execution options to error: true, which will allow the file to render even if errors are present.",
    "crumbs": [
      "Labs",
      "Lab 5 Instructions"
    ]
  },
  {
    "objectID": "labs/instructions/lab-5-instructions.html#the-data",
    "href": "labs/instructions/lab-5-instructions.html#the-data",
    "title": "Lab 5: Student Evaluations of Teaching",
    "section": "The Data",
    "text": "The Data\nThe teacher_evals dataset contains student evaluations of reaching (SET) collected from students at a University in Poland. There are SET surveys from students in all fields and all levels of study offered by the university. 1\nThe SET questionnaire that every student at this university completes is as follows:\n\nEvaluation survey of the teaching staff of University of Poland. Please complete the following evaluation form, which aims to assess the lecturer’s performance. Only one answer should be indicated for each question. The answers are coded in the following way: 5 - I strongly agree; 4 - I agree; 3 - Neutral; 2 - I don’t agree; 1 - I strongly don’t agree.\nQuestion 1: I learned a lot during the course.\nQuestion 2: I think that the knowledge acquired during the course is very useful.\nQuestion 3: The professor used activities to make the class more engaging.\nQuestion 4: If it was possible, I would enroll for a course conducted by this lecturer again.\nQuestion 5: The classes started on time.\nQuestion 6: The lecturer always used time efficiently.\nQuestion 7: The lecturer delivered the class content in an understandable and efficient way.\nQuestion 8: The lecturer was available when we had doubts.\nQuestion 9. The lecturer treated all students equally regardless of their race, background and ethnicity.\n\nThese data are from the end of the winter semester of the 2020-2021 academic year. In the period of data collection, all university classes were entirely online amid the COVID-19 pandemic. While expected learning outcomes were not changed, the online mode of study could have affected grading policies and could have implications for data.\nAverage SET scores were combined with many other variables, including:\n\ncharacteristics of the teacher (degree, seniority, gender, SET scores in the past 6 semesters).\ncharacteristics of the course (time of day, day of the week, course type, course breadth, class duration, class size).\npercentage of students providing SET feedback.\ncourse grades (mean, standard deviation, percentage failed for the current course and previous 6 semesters).\n\nThis rich dataset allows us to investigate many of the biases in student evaluations of teaching that have been reported in the literature and to formulate new hypotheses.\nBefore tackling the problems below, study the description of each variable included in the teacher_evals_codebook.pdf.\n1. Load the appropriate R packages for your analysis.\n\n# code chunk for loading packages\n\n2. Load in the teacher_evals data.\n\n# code chunk for importing the data\n\n\nData Inspection + Summary\n3. Provide a brief overview (~4 sentences) of the dataset.\n\n\n\n\n\n\nNote\n\n\n\nIt is always good practice to start an analysis by getting a feel for the data and providing a quick summary for readers. You do not need to show any code for this question, although you probably want to use code to get some information about the data (e.g., summary(data), glimpse(data), dim(data), etc.). Things to think about – where did the data come from? what sort of data are provided (context and data type)? how much data do you have? etc.\n\n\n\n# you may want to use code to answer this question\n\n4. What is the unit of observation (i.e. a single row in the dataset) identified by?\n\n\n\n\n\n\nWarning\n\n\n\nIt is not one instructor per row! It’s also not just one class per row!\n\n\n\n# you may want to use code to answer this question\n\n5. Use one dplyr pipeline to clean the data by:\n\nrenaming the gender variable sex\nremoving all courses with fewer than 10 respondents\nchanging data types in whichever way you see fit (e.g., is the instructor ID really a numeric data type?)\nonly keeping the columns we will use – course_id, teacher_id, question_no, no_participants, resp_share, SET_score_avg, percent_failed_cur, academic_degree, seniority, and sex\n\nAssign your cleaned data to a new variable named teacher_evals_clean –- use these data going forward. Save the data as teacher_evals_clean.csv in the data-clean folder.\n\n\n\n\n\n\nTip\n\n\n\nHelpful functions: rename(), mutate(), as.factor()\nIt would be most efficient to use across() in combination with mutate() to complete this task.\n\n\n\n# code chunk for Q4\n\n5. How many unique instructors and unique courses are present in the cleaned dataset?\n\n\n\n\n\n\nTip\n\n\n\nHelpful functions: summarize(), n_distinct()\n\n\n\n# code chunk for Q5\n\n6. One teacher-course combination has some missing values, coded as NA. Which instructor has these missing values? Which course? What variable are the missing values in?\n\n\n\n\n\n\nTip\n\n\n\nHelpful functions: filter(), if_any()\nHint: Look at PA 5 for example code\n\n\n\n# code chunk for Q6\n\n7. What are the demographics of the instructors in this study? Investigate the variables academic_degree, seniority, and sex and summarize your findings in ~3 complete sentences.\n\n\n\n\n\n\nTip\n\n\n\nYou’ll need to first wrangle your data to have each instructor represented only once.\nHelpful functions: select(), distinct(___, .keep_all = TRUE), count(), summarize()\n\n\n\n# code chunk for Q7\n\n8. Each course seems to have used a different subset of the nine evaluation questions. How many teacher-course combinations asked all nine questions?\n\n\n\n\n\n\nTip\n\n\n\nYou’ll need to first wrangle your data to find the number of questions asked within each teacher-course combination. Then there are several ways to determine the number that used all 9 questions.\nHelpful functions: group_by(), n_distinct(), count(), summarize(), ungroup()\n\n\n\n# code chunk for Q8",
    "crumbs": [
      "Labs",
      "Lab 5 Instructions"
    ]
  },
  {
    "objectID": "labs/instructions/lab-5-instructions.html#rate-my-professor",
    "href": "labs/instructions/lab-5-instructions.html#rate-my-professor",
    "title": "Lab 5: Student Evaluations of Teaching",
    "section": "Rate my Professor",
    "text": "Rate my Professor\n\n\n\n\n\n\nTip\n\n\n\nHelpful functions: filter(), group_by(), summarize(), slice()\nUseful variables: question_no, teacher_id, SET_score_avg, percent_failed_cur, resp_share, academic_degree, seniority, sex\n\n\n9. Which instructors had the highest and lowest average rating for Question 1 (I learnt a lot during the course.) across all their courses?\n\n# code chunk for Q9\n\n10. Which instructors with one year of experience had the highest and lowest average percentage of students failing in the current semester across all their courses?\n\n# code chunk for Q10\n\n11. Which female instructors with either a doctorate or professor degree had the highest and lowest average percent of students responding to the evaluation across all their courses?\n\n# code chunk for Q11",
    "crumbs": [
      "Labs",
      "Lab 5 Instructions"
    ]
  },
  {
    "objectID": "labs/instructions/lab-5-instructions.html#footnotes",
    "href": "labs/instructions/lab-5-instructions.html#footnotes",
    "title": "Lab 5: Student Evaluations of Teaching",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nCitation: journal, Under blind review in refereed. University SET data, with faculty and courses characteristics. Ann Arbor, MI: Inter-university Consortium for Political and Social Research [distributor], 2021-09-12. https://doi.org/10.3886/E149801V1↩︎",
    "crumbs": [
      "Labs",
      "Lab 5 Instructions"
    ]
  },
  {
    "objectID": "group-activities/week-3/pa2-vc-instructions.html",
    "href": "group-activities/week-3/pa2-vc-instructions.html",
    "title": "Practice Activity 2: Version Control",
    "section": "",
    "text": "Today you will be creating and manipulating vectors, lists, and data frames to uncover a top secret message.\nThis task is complex. It requires many different types of abilities. Everyone will be good at some of these abilities but nobody will be good at all of them. In order to solve this puzzle, you will need to use the skills of each member of your group.\nSome advice:"
  },
  {
    "objectID": "group-activities/week-3/pa2-vc-instructions.html#groupwork-protocols",
    "href": "group-activities/week-3/pa2-vc-instructions.html#groupwork-protocols",
    "title": "Practice Activity 2: Version Control",
    "section": "Groupwork Protocols",
    "text": "Groupwork Protocols\nDuring the Practice Activity, you and your partner will alternate between two roles—Developer and Coder.\nWhen you are the Developer, you will type into the Quarto document in RStudio. However, you do not type your own ideas. Instead, you type what the Coder tells you to type. You are permitted to ask the Coder clarifying questions, and, if both of you have a question, you are permitted to ask the professor. You are expected to run the code provided by the Coder and, if necessary, to work with the Coder to debug the code. Once the code runs, you are expected to collaborate with the Coder to write code comments that describe the actions taken by your code.\nWhen you are the Coder, you are responsible for reading the instructions / prompts and directing the Developer what to type in the Quarto document. You are responsible for managing the resources your group has available to you (e.g., cheatsheet, textbook). If necessary, you should work with the Developer to debug the code you specified. Once the code runs, you are expected to collaborate with the Developer to write code comments that describe the actions taken by your code.\n\nGroup Norms\nRemember, your group is expected to adhere to the following norms:\n\nThink and work together. Do not divide the work.\nYou are smarter together.\nNo cross-talk with other groups."
  },
  {
    "objectID": "group-activities/week-3/pa2-vc-instructions.html#part-zero-accessing-the-practice-activity",
    "href": "group-activities/week-3/pa2-vc-instructions.html#part-zero-accessing-the-practice-activity",
    "title": "Practice Activity 2: Version Control",
    "section": "Part Zero: Accessing the Practice Activity",
    "text": "Part Zero: Accessing the Practice Activity\n\nTo access the activity and get it ready to share:\n\nThe Developer (partner with first name alphabetically) should create a GitHub repo called “pa-2-code-breaking”.\n\nTo the description add “Peer Activity 2 with NAME1 and NAME 2” and check to add a README file and Create the Repository.\n\nUnder Settings, go to Collaborators, the Add people and search for your partner by username or email.\n\nThe partner should then log into GitHub and accept the invitation. Now you both should be able to push/pull to the same repository.\n\nThe Developer should then create a Version Control R Project on their computer and then download the pa2-base-r-vc.qmd (on Canvas) file into the folder on your computer.\n\nTest you connection by staging, committing, and pushing the new file (.Rproj and .qmd) to the GitHub Repository.\n\nNow you are ready to start!\n\n\nFor each code chunk, add a #| label: and a #comment describing what the code chunk is doing. Be sure to check that all spacing is appropriate as well!"
  },
  {
    "objectID": "group-activities/week-3/pa2-vc-instructions.html#part-one-setup",
    "href": "group-activities/week-3/pa2-vc-instructions.html#part-one-setup",
    "title": "Practice Activity 2: Version Control",
    "section": "Part One: Setup",
    "text": "Part One: Setup\nEach of the following R chunks will cause an error and / or do the desired task incorrectly. The correct code is on the PA2 Activity on the webpage, please copy the correct code into each code chunk and add a label and comment.\n\nCreate vectors containing the upper case letters, lower case letters, and some punctuation marks. add a label that indicate this code chunk creates the vectors of letters and punctuation.\n\n\nlower_case &lt;- c(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\",\n                \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\")\n\nupper_case &lt;- c(\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\",\n                \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\")\n\npunctuation &lt;- c(\".\", \",\", \"!\", \"?\", \"'\", '\"', \"(\", \")\", \" \", \"-\", \";\", \":\")\n\n\nMake one long vector containing all the symbols.\n\n\nmy_symbols &lt;- c(lower_case, upper_case, punctuation)\n\n\nTurn the my_symbols vector into a data frame, with one column named “symbol”.\n\n\nmy_symbols &lt;- data.frame(symbol = my_symbols)\n\n\nFind the total number of symbols we have in our data frame.\n\n\nlen &lt;- length(my_symbols$symbol)\n\n\nCreate a new variable in your dataframe that assigns a number to each symbol.\n\n\nmy_symbols$num &lt;- 1:len"
  },
  {
    "objectID": "group-activities/week-3/pa2-vc-instructions.html#part-two-decoding-the-secret-message.",
    "href": "group-activities/week-3/pa2-vc-instructions.html#part-two-decoding-the-secret-message.",
    "title": "Practice Activity 2: Version Control",
    "section": "Part Two: Decoding the secret message.",
    "text": "Part Two: Decoding the secret message.\nThis chunk will load up the encoded secret message as a vector:\n\nlibrary(readr)\ntop_secret &lt;- read_csv(\"https://www.dropbox.com/s/k72h1zewk4gtqep/PA_Secret_Code?dl=1\", \n                       col_names = FALSE)$X1\n\nBy altering this top secret set of numbers, you will be able to create a message. Write your own code to complete the steps, in the order given below.\n\nAdd 14 to every number.\n\n\nts6 &lt;- top_secret + 14\n\n\nMultiply every number by 18, then subtract 257.\n\n\nts7 &lt;- ts6*18 - 257\n\n\nUse the exp() function to exponentiate every number.\n\n\nts8 &lt;- exp(ts7)\n\n\nSquare every number.\n\n\nts9 &lt;- ts8^2\n\nCheckpoint: Headquarters has informed you that at this stage of decoding, there should be 352 numbers in the secret message that are below 17. Write the code to verify that this is true for your top_secret object!\nHint: This is what is called a “relational” comparison, where you compare an object to a number and R will give you a vector of TRUEs and FALSEs based on whether the comparison is / is not met. You can then use these TRUEs and FALSEs as numbers, since TRUE = 1 and FALSE = 0 in R land.\n\n# Write code to verify that there are 352 numbers with values **below** 17\n\nsum(ts9 &lt; 17)\n\n\nHint: To update an object after performing an operation, you overwrite the existing object with its updated counterpart. This looks something like this:\nx &lt;- x + 12,\nwhere the original value(s) in x have had 12 added to them, and the resulting values are put back in to the object named x. Be careful with this - if you do something wrong you will need to rerun the previous code chunks to reset everything! Fortunately, the grey arrow pointing down to the green line in each code chunk runs all previous code chunks again.\nNext, carry out the following steps:\n\nTurn your vector of numbers into a matrix with 5 columns.\n\n\nts_mat &lt;- matrix(ts9, ncol = 5) \n\n\nSeparately from your top secret numbers, create a vector of all the even numbers between 1 and 382. Name it “evens”. That is, “evens” should contain 2, 4, 6, 8 …, 382.\n\n\nevens &lt;- seq(from = 2, to = 382, by = 2)\n\n\nSubtract the “evens” vector from the first column of your secret message matrix.\n\n\nts_mat[, 1] &lt;- ts_mat[, 1] - evens\n\n\nSubtract 100 from all numbers 18-24th rows of the 3rd column.\n\n\nts_mat[18:24, 3] &lt;- ts_mat[18:24, 3] - 100\n\n\nMultiply all numbers in the 4th and 5th column by 2.\n\n\nts_mat[, 4:5] &lt;- ts_mat[, 4:5]*2 \n\n\nTurn your matrix back into a vector.\n\n\nts_vec &lt;- as.vector(ts_mat)\n\nCheckpoint: Headquarters has informed you that at this stage of decoding, all numbers in indices 500 and beyond are below 100. Write the code to verify that this is true for your top_secret object!\nHint: Use a relational comparison similar to what you used in the last checkpoint, but here you will need to subset values from your vector!\n\n# Write code to verify that indices 500 and beyond have values **below** 100\nsum(ts_vec[500:955] &gt;= 100)\n\n\n\nTake the square root of all numbers in indices 38 to 465.\n\n\nts_vec[38:465] &lt;- sqrt(ts_vec[38:465])\n\n\nUse the round() function to round all numbers to the nearest whole number.\n\n\nts_vec &lt;- round(ts_vec, digits = 0)\n\n\nReplace all instances of the number 39 with 20. Hint: Step 18 requires another relational comparison, but this time it is equality. Equality in R is checked with a double equal sign rather than a single equal sign\n\n\nts_vec[ts_vec == 39 ] &lt;- 20 \n\nCheckpoint: Headquarters has informed you that your final message should have 344 even numbers.\nHint: Checking for divisibility is an interesting operation that isn’t done much in R. Modulus is the operation you are interested in, where you are checking for whether the numbers are divisible by 2, with no remainder. See what you can find about modulus in R!\n\n# Code to verify how many even numbers are in your top_secret vector\n\nsum(ts_vec %% 2 == 0)"
  },
  {
    "objectID": "group-activities/week-3/pa2-vc-instructions.html#part-3-the-secret-message",
    "href": "group-activities/week-3/pa2-vc-instructions.html#part-3-the-secret-message",
    "title": "Practice Activity 2: Version Control",
    "section": "Part 3: The secret message!",
    "text": "Part 3: The secret message!\nUse your final vector of numbers as indices for my_symbols to discover the final message, by running the following code:\n\nstringr::str_c(my_symbols$symbol[ts_vec], collapse = \"\")\n\nGoogle the first line of this message, if you do not recognize it, to see what poem it is."
  },
  {
    "objectID": "group-activities/week-3/pa2-vc-instructions.html#part-4-wrap-up",
    "href": "group-activities/week-3/pa2-vc-instructions.html#part-4-wrap-up",
    "title": "Practice Activity 2: Version Control",
    "section": "Part 4: Wrap up",
    "text": "Part 4: Wrap up\nThe last step is to make each code chunk hidden, even though it runs by modifying the YAML. Once knit, Export the project and submit with your “quiz” for the week. Note that each person should be submit a copy."
  },
  {
    "objectID": "group-activities/week-3/pa2-vc-instructions.html#part-5-preview-the-tidyverse",
    "href": "group-activities/week-3/pa2-vc-instructions.html#part-5-preview-the-tidyverse",
    "title": "Practice Activity 2: Version Control",
    "section": "Part 5: Preview the tidyverse",
    "text": "Part 5: Preview the tidyverse\nIf you want to see what the above code would look like done completely in the tidyverse you can check out the PA 2: Modernizing the Process. You will notice that in some cases the tidyverse is much easier to understand and is more efficient (less code) while in other cases base R is more efficient. We are always trying to find the best tool and somethings that is a tidyverse tool and other times it will be a base tool."
  },
  {
    "objectID": "slides/week-4/week-4-ggplot.html#today-we-will",
    "href": "slides/week-4/week-4-ggplot.html#today-we-will",
    "title": "Basics of Graphics",
    "section": "Today we will…",
    "text": "Today we will…\n\nAccessing Practice Activities\nReview\n\nTidy Data\nLoad External Data\nGraphics (and ggplot2)\n\nPA 3: Using Data Visualization to Find the Penguins\n\nPeer Programming"
  },
  {
    "objectID": "slides/week-4/week-4-ggplot.html#grammar-of-graphics-1",
    "href": "slides/week-4/week-4-ggplot.html#grammar-of-graphics-1",
    "title": "Basics of Graphics",
    "section": "Grammar of Graphics",
    "text": "Grammar of Graphics\nThe Grammar of Graphics (GoG) is a principled way of specifying exactly how to create a particular graph from a given data set. It helps us to systematically design new graphs.\n\n\nThink of a graph or a data visualization as a mapping…\n…FROM variables in the data set (or statistics computed from the data)…\n…TO visual attributes (or “aesthetics”) of marks (or “geometric elements”) on the page/screen."
  },
  {
    "objectID": "slides/week-4/week-4-ggplot.html#why-gog",
    "href": "slides/week-4/week-4-ggplot.html#why-gog",
    "title": "Basics of Graphics",
    "section": "Why GoG?",
    "text": "Why GoG?\n\nIt’s more flexible than a “chart zoo” of named graphs.\nThe software understands the structure of your graph.\nIt easily automates graphing of data subsets."
  },
  {
    "objectID": "slides/week-4/week-4-ggplot.html#components-of-gog",
    "href": "slides/week-4/week-4-ggplot.html#components-of-gog",
    "title": "Basics of Graphics",
    "section": "Components of GoG",
    "text": "Components of GoG\n\n\ndata: dataframe containing variables\naes : aesthetic mappings (position, color, symbol, …)\ngeom : geometric element (point, line, bar, box, …)\nstat : statistical variable transformation (identity, count, linear model, quantile, …)\nscale : scale transformation (log scale, color mapping, axes tick breaks, …)\ncoord : Cartesian, polar, map projection, …\nfacet : divide into subplots using a categorical variable"
  },
  {
    "objectID": "slides/week-4/week-4-ggplot.html#how-to-build-a-graphic",
    "href": "slides/week-4/week-4-ggplot.html#how-to-build-a-graphic",
    "title": "Basics of Graphics",
    "section": "How to Build a Graphic",
    "text": "How to Build a Graphic\nComplete this template to build a basic graphic:\n\nggplot(\n  data = &lt;DATA&gt;, \n  mapping = aes(&lt;MAPPINGS&gt;)\n  ) +\n  &lt;GEOM FUNCTION&gt;() + \n  any other arguments...\n\n\nNotice, every + adds another layer to our graphic.\n\n\nAlso notice that I’m using named arguments to make my code easier to read."
  },
  {
    "objectID": "slides/week-4/week-4-ggplot.html#section",
    "href": "slides/week-4/week-4-ggplot.html#section",
    "title": "Basics of Graphics",
    "section": "",
    "text": "Add dataAdd aestheticsAdd one geom per layer\n\n\nThis begins a plot that you can add layers to:\n\nggplot(data = mpg)\n\n\n\n\n\n\n\n\n\n\n\nggplot(data = mpg, \n       mapping = aes(x = class, y = hwy)\n       )\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data = mpg, \n       mapping = aes(x = class, \n                     y = hwy)\n       ) +\n  geom_jitter()\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data = mpg, \n       mapping = aes(x = class, \n                     y = hwy)\n       ) +\n  geom_jitter() +\n  geom_boxplot()"
  },
  {
    "objectID": "slides/week-4/week-4-ggplot.html#aesthetics",
    "href": "slides/week-4/week-4-ggplot.html#aesthetics",
    "title": "Basics of Graphics",
    "section": "Aesthetics",
    "text": "Aesthetics\nWe map variables (columns) from the data to aesthetics on the graphic using the aes() function.\n\nWhat aesthetics can we set (see ggplot2 cheat sheet for more)?\n\n\n\n\nx, y\ncolor, fill\nlinetype\nsize\nshape"
  },
  {
    "objectID": "slides/week-4/week-4-ggplot.html#aesthetics-1",
    "href": "slides/week-4/week-4-ggplot.html#aesthetics-1",
    "title": "Basics of Graphics",
    "section": "Aesthetics",
    "text": "Aesthetics\nWe map variables (columns) from the data to aesthetics on the graphic using the aes() function.\nWhat aesthetics can we set (see ggplot2 cheat sheet for more)?\n\n\n\n\nx, y\ncolor, fill\nlinetype\nsize\nshape"
  },
  {
    "objectID": "slides/week-4/week-4-ggplot.html#special-properties-of-aesthetics",
    "href": "slides/week-4/week-4-ggplot.html#special-properties-of-aesthetics",
    "title": "Basics of Graphics",
    "section": "Special Properties of Aesthetics",
    "text": "Special Properties of Aesthetics\n\nGlobal AestheticsLocal Aesthetics\n\n\n\nggplot(data = housingsub, \n       mapping = aes(\n         x = date, \n         y = median)\n       ) +\n  geom_point()\n\n\n\n\nggplot(data = housingsub) +\n  geom_point(mapping = aes(x = date,\n                           y = median)\n             )"
  },
  {
    "objectID": "slides/week-4/week-4-ggplot.html#special-properties-of-aesthetics-1",
    "href": "slides/week-4/week-4-ggplot.html#special-properties-of-aesthetics-1",
    "title": "Basics of Graphics",
    "section": "Special Properties of Aesthetics",
    "text": "Special Properties of Aesthetics\n\nMapping AestheticsSetting Aesthetics\n\n\n\nggplot(data = housingsub) +\n  geom_point(mapping = aes(x = date, \n                           y = median,\n                           color = city)\n             )\n\n\n\n\nggplot(data = housingsub) +\n  geom_point(mapping = aes(x = date, \n                           y = median), \n             color = \"blue\")"
  },
  {
    "objectID": "slides/week-4/week-4-ggplot.html#geometric-objects",
    "href": "slides/week-4/week-4-ggplot.html#geometric-objects",
    "title": "Basics of Graphics",
    "section": "Geometric Objects",
    "text": "Geometric Objects\nWe use a geom_XXX() function to represent data points.\n\n\n\n\none variable\n\ngeom_density()\ngeom_dotplot()\ngeom_histogram()\ngeom_boxplot()\n\n\n\n\ntwo variable\n\ngeom_point()\ngeom_line()\ngeom_density_2d()\n\n\n\n\nthree variable\n\ngeom_contour()\ngeom_raster()\n\n\n\n\nThis is not an exhaustive list – see ggplot2 cheat sheet."
  },
  {
    "objectID": "slides/week-4/week-4-ggplot.html#creating-a-graphic",
    "href": "slides/week-4/week-4-ggplot.html#creating-a-graphic",
    "title": "Basics of Graphics",
    "section": "Creating a Graphic",
    "text": "Creating a Graphic\nTo create a specific type of graphic, we will combine aesthetics and geometric objects."
  },
  {
    "objectID": "slides/week-4/week-4-ggplot.html#faceting",
    "href": "slides/week-4/week-4-ggplot.html#faceting",
    "title": "Basics of Graphics",
    "section": "Faceting",
    "text": "Faceting\n\nOptionsScales\n\n\n\n\nfacet_wrap(~ b): facets by one variable\n\nnrow controls the number of rows the facets are output into\nncol controls the number of columns the facets are output into\n\nfacet_grid(a ~ b): facet by two variables\n\nvariable a will be assigned to the rows\nvariable b will be assigned to the columns into both rows and columns\n\n\n\n\n\n\nYou can set scales to let axis limits vary across facets:\nfacet_grid(y ~ x, scales = ______)\n\n\"free\" – both x- and y-axis limits adjust to individual facets\n\"free_x\" – only x-axis limits adjust\n\"free_y\" – only y-axis limits adjust"
  },
  {
    "objectID": "slides/week-4/week-4-ggplot.html#statistical-transformation-stat",
    "href": "slides/week-4/week-4-ggplot.html#statistical-transformation-stat",
    "title": "Basics of Graphics",
    "section": "Statistical Transformation: stat",
    "text": "Statistical Transformation: stat\nA stat transforms an existing variable into a new variable to plot.\n\nidentity leaves the data as is.\ncount counts the number of observations.\nsummary allows you to specify a desired transformation function.\n\n\nSometimes these statistical transformations happen under the hood when we use a specific geom_XXX()."
  },
  {
    "objectID": "slides/week-4/week-4-ggplot.html#statistical-transformation-stat-1",
    "href": "slides/week-4/week-4-ggplot.html#statistical-transformation-stat-1",
    "title": "Basics of Graphics",
    "section": "Statistical Transformation: stat",
    "text": "Statistical Transformation: stat\n\nstat_count()stat_summary()\n\n\n\n\n\n\nggplot(data = mpg,\n       mapping = aes(x = class)\n       ) +\n  geom_bar()\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data = mpg,\n       mapping = aes(x = class)\n       ) +\n  stat_count(geom = \"bar\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data = mpg,\n       mapping = aes(x = class,\n                     y = hwy)\n       ) +\n  stat_summary(geom = \"bar\",\n               fun = \"mean\") +\n  scale_y_continuous(limits = c(0, 45))\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data = mpg,\n       mapping = aes(x = class,\n                     y = hwy)\n       ) +\n  stat_summary(geom = \"bar\",\n               fun = \"max\") +\n  scale_y_continuous(limits = c(0, 45))"
  },
  {
    "objectID": "slides/week-4/week-4-ggplot.html#position-adjustements",
    "href": "slides/week-4/week-4-ggplot.html#position-adjustements",
    "title": "Basics of Graphics",
    "section": "Position Adjustements",
    "text": "Position Adjustements\nPosition adjustments determine how to arrange geom’s that would otherwise occupy the same space.\n\n\nposition = \"dodge\": Arrange elements side by side.\nposition = \"fill\": Stack elements on top of one another + normalize height.\nposition = \"stack\": Stack elements on top of one another.\nposition = \"jitter\": Add random noise to x & y position of each element to avoid overplotting (see geom_jitter())."
  },
  {
    "objectID": "slides/week-4/week-4-ggplot.html#position-adjustements-1",
    "href": "slides/week-4/week-4-ggplot.html#position-adjustements-1",
    "title": "Basics of Graphics",
    "section": "Position Adjustements",
    "text": "Position Adjustements\n\n\nggplot(data = mpg, \n       mapping = aes(fl, fill = drv)\n       ) + \n  geom_bar(position = \"_____\")"
  },
  {
    "objectID": "slides/week-4/week-4-ggplot.html#plot-customizations",
    "href": "slides/week-4/week-4-ggplot.html#plot-customizations",
    "title": "Basics of Graphics",
    "section": "Plot Customizations",
    "text": "Plot Customizations\n\nLabelsThemesScales: Axes TicksScales: Color\n\n\n\n\n\nCode\nggplot(data = mpg, \n       mapping = aes(x = displ, y = hwy, color = cyl)\n       ) + \n  geom_jitter() + \n  labs(x = \"Engine Displacement (liters)\", \n       y = \" \", \n       color = \"Cylinders\",\n       title = \"Cars with More Cylinders Have Larger Engine Displacement\\n and Lower Fuel Efficiency\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nggplot(data = mpg, \n       mapping = aes(x = displ, y = hwy, color = cyl)\n       ) + \n  geom_jitter() + \n  labs(x = \"Engine Displacement (liters)\", \n       y = \" \", \n       color = \"Cylinders\",\n       title = \"Cars with More Cylinders Have Larger Engine Displacement\\n and Lower Fuel Efficiency\") +\n  theme_bw() +\n  theme(legend.position = \"bottom\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nggplot(data = mpg, \n       mapping = aes(x = displ, y = hwy, color = cyl)\n       ) + \n  geom_jitter() + \n  labs(x = \"Engine Displacement (liters)\", \n       y = \" \", \n       color = \"Cylinders\",\n       title = \"Cars with More Cylinders Have Larger Engine Displacement\\n and Lower Fuel Efficiency\") +\n  scale_y_continuous(limits = c(0, 50),\n                     breaks = seq(from = 0, to = 50, by = 5)\n                     )\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nggplot(data = mpg, \n       mapping = aes(x = displ, y = hwy, color = cyl)\n       ) + \n  geom_jitter() + \n  labs(x = \"Engine Displacement (liters)\", \n       y = \" \", \n       color = \"Cylinders\",\n       title = \"Cars with More Cylinders Have Larger Engine Displacement\\n and Lower Fuel Efficiency\") +\n  scale_color_gradient(low = \"white\", high = \"green4\")"
  },
  {
    "objectID": "slides/week-4/week-4-ggplot.html#ggplot-code",
    "href": "slides/week-4/week-4-ggplot.html#ggplot-code",
    "title": "Basics of Graphics",
    "section": "ggplot Code",
    "text": "ggplot Code\n\nIt is good practice to put each geom and aes on a new line.\n\nThis makes code easier to read!\nGenerally: no line of code should be over 80 characters long.\nPro Tip: The styler package can do this for you!\n\n\n\n\nBadGoodAmazing\n\n\n\n\nggplot(data = mpg, mapping = aes(x = cty, y = hwy, color = class)) + geom_point() + theme_bw() + labs(x = \"City (mpg)\", y = \"Highway (mpg)\")\n\n\n\n\n\n\nggplot(data = mpg, \n       mapping = aes(x = cty, y = hwy, color = class)) + \n  geom_point() + \n  theme_bw() + \n  labs(x = \"City (mpg)\", y = \"Highway (mpg)\")\n\n\n\n\n\n\nggplot(data = mpg, \n       mapping = aes(\n         x = cty, \n         y = hwy, \n         color = class\n         )\n       ) + \n  geom_point() + \n  theme_bw() + \n  labs(x = \"City (mpg)\", \n       y = \"Highway (mpg)\")"
  },
  {
    "objectID": "slides/week-4/week-4-ggplot.html#using-data-visualization-to-find-the-penguins",
    "href": "slides/week-4/week-4-ggplot.html#using-data-visualization-to-find-the-penguins",
    "title": "Basics of Graphics",
    "section": "Using Data Visualization to Find the Penguins",
    "text": "Using Data Visualization to Find the Penguins\n\n\n\nThis puzzle activity will require knowledge of:\n\ninstalling and loading packages in R\nformatting code chunks in Quarto\ninterpreting the context of a dataset\ndata types / variable types\ndifferent types of visualizations\nwhat visualization(s) go with different data types\nhow to make visualizations with ggplot2\nchoosing between different aesthetic options\n\n\n\n\n\n\n\nNone of us have all these abilities. Each of us has some of these abilities."
  },
  {
    "objectID": "slides/week-4/week-4-ggplot.html#pair-programming-expectations",
    "href": "slides/week-4/week-4-ggplot.html#pair-programming-expectations",
    "title": "Basics of Graphics",
    "section": "Pair Programming Expectations",
    "text": "Pair Programming Expectations\n\nDuring your collaboration, you and your partner will alternate between two roles:\n\n\n\n\nDeveloper\n\n\nReads prompt and ensures Coder understands what is being asked.\nTypes the code specified by the Coder into the Quarto document.       \nRuns the code provided by the Coder.\nWorks with Coder to debug the code. \nEvaluates the output.\n\nWorks with Coder to write code comments.\n\n\n\n\n\n\nCoder\n\n\nReads out instructions or prompts\nDirects the Developer what to type.\nTalks with Developer about their ideas. \nManages resources (e.g., cheatsheets, textbook). \nWorks with Developer to debug the code. \nWorks with Developer to write code comments."
  },
  {
    "objectID": "slides/week-4/week-4-ggplot.html#section-1",
    "href": "slides/week-4/week-4-ggplot.html#section-1",
    "title": "Basics of Graphics",
    "section": "",
    "text": "Group Norms\n\n\n\nThink and work together. Do not divide the work.\nYou are smarter together.\nBe open minded.\nNo cross-talk with other groups.\nCommunicate with each other!"
  },
  {
    "objectID": "slides/week-4/week-4-ggplot.html#ggplot2-resources",
    "href": "slides/week-4/week-4-ggplot.html#ggplot2-resources",
    "title": "Basics of Graphics",
    "section": "ggplot2 Resources",
    "text": "ggplot2 Resources\nEvery group should have a ggplot2 cheatsheet!\n\n\n\nOn the Front\n\n\n\nColumn 1: the “template” for making a ggplot\nColumn 3: creating plots for two continuous variables\nColumn 4: creating plots for one discrete or one continuous variable\n\n\n\n\n\n\n\n\nOn the Back\n\n\n\nColumn 4: adding facets and labels to your plot\nColumn 3: adding themes to your plot (if you have extra time)"
  },
  {
    "objectID": "slides/week-4/week-4-ggplot.html#opening-the-practice-activity-in-posit-cloud",
    "href": "slides/week-4/week-4-ggplot.html#opening-the-practice-activity-in-posit-cloud",
    "title": "Basics of Graphics",
    "section": "Opening the Practice Activity in Posit Cloud",
    "text": "Opening the Practice Activity in Posit Cloud\nThe partner whose family name starts first alphabetically starts as the Developer!\nRemember:\n\n\nThe Developer is responsible for either setting up a shared project on the Server or shared repository on GitHub."
  },
  {
    "objectID": "slides/week-4/week-4-ggplot.html#submission",
    "href": "slides/week-4/week-4-ggplot.html#submission",
    "title": "Basics of Graphics",
    "section": "Submission",
    "text": "Submission\n\nWhen you have completed the visualization tasks, you will work as a group to answer the five questions posed at the end of the document.\nEach person will input the answers to these questions in the PA3 Canvas quiz and submit either a link or zipped version of the project.\nFor those recording, you can press the X (top right corner) and wait until the video finishes uploading.\nOnce finished, you can start work on Lab 3!"
  }
]