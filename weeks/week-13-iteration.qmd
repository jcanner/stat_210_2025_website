---
title: "Loops and Iteration"
format: html
number-sections: true
number-depth: 2
bibliography: references.bib
editor: source
execute: 
  echo: true
  include: true
  eval: false
---

```{r}
#| include: false
#| echo: false
#| eval: true

library(tidyverse)
library(lubridate)
library(palmerpenguins)

```

After this lesson, you should be able to:

- Use the `across()` function
- Compare `across()` to an approach with `pivot_longer()` and `pivot_wider()`
- Write a `for()` loop in R to handle repeated tasks
- Use the `map()` family of functions in the `purrr` package to handle repeated
tasks


------------------------------------------------------------------------

#### `r emo::ji("play button")` Watch Videos: 10 minutes

#### `r emo::ji("book")` Readings: 45-60 minutes

#### `r emo::ji("check")` Check-ins: 2 

------------------------------------------------------------------------

# Iteration across data frame columns with `across()`

Often we will have to perform the same data wrangling on many variables (e.g.,
rounding numbers)

```{r}
#| eval: true

diamonds %>%
    mutate(
        carat = round(carat, 1),
        x = round(x, 1),
        y = round(y, 1),
        z = round(z, 1)
    )
```

`dplyr` provides the `across()` function for performing these repeated function
calls:

```{r}
#| eval: true

# Option 1: Create our own named function
round_to_one <- function(x) {
    round(x, digits = 1)
}
diamonds %>% 
    mutate(across(.cols = c(carat, x, y, z), 
                  .fns = round_to_one
                  )
           )

# Option 2: Use an "anonymous" or "lambda" function that isn't named
diamonds %>% 
    mutate(across(.cols = c(carat, x, y, z), 
                  .fns = function(x) {round(x, digits = 1)} 
                  )
           )
```

When we look at the documentation for `across()`, we see that the `.cols`
argument specifies which variables we want to transform, and it has a 
`<tidy-select>` tag. This means that the syntax we use for `.cols` follows the
rules we learned about last week! 

::: {.callout-tip}
# Learn More

If you are interested in seeing more examples of the `across()` function, 
navigate back to the `across()` documentation and read through the Examples
section at the bottom. Click the "Run examples" link to view the output for all
the examples.
:::

### `r emo::ji("check")`: Check-in 8.1: Connecting `across()` with
`pivot_wider()` and `pivot_longer()`

1. Fill in the code below to convert all numeric columns in the `diamonds`
dataset into character columns.

```{r}
diamonds |> 
  mutate(across(.cols = ____, 
                .fns = ____)
         )

```

2. Fill in the code below to transform the `x`, `y`, and `z` columns so that the
units of millimeters are displayed (e.g., "4.0 mm").

```{r}

diamonds %>%
    mutate(
      across(.cols = ____, 
             .fns = ~ str_c(____, "mm", sep = " ")
             )
      )

```

3. Fill in the code below that accomplishes #2 using a `pivot_longer()` followed
by a `pivot_wider()`. 

```{r}

diamonds %>%
  # Add a unique identifier for each row
  # Needed because there is an x, y, z for each combination of carat, cut, color, clarity
  mutate(row_id = row_number()) %>%  
  pivot_longer(cols = ____, 
               names_to = "dimension",
               values_to = "value") %>%
  mutate(
    ____ = str_c(____, "mm", sep = " ")
         ) %>%
  pivot_wider(____ = "dimension", 
              values_from = "value") %>%
  select(-row_id) 

```

4. Grouping diamonds by cut, clarity, and color then counting the number of observations and computing the mean of each numeric column.

5. What happens if you use a list of functions in across(), but donâ€™t name them? How is the output named?

## Performing Multiple Operations

What if we wanted to perform multiple transformations on each of many variables? 

Within the different values of diamond `cut`, let's summarize the mean, median,
and standard deviation of the numeric variables. When we look at the `.fns`
argument in the `across()` documentation, we see that we can provide a **list**
of functions:

```{r}
#| eval: true

diamonds %>%
    group_by(cut) %>% 
    summarize(across(.cols = where(is.numeric), 
                     .fns = list(mean = mean, 
                                 med = median, 
                                 sd = sd)
                     )
              )
```

What does the list of functions look like? What is the structure of this list object?

```{r}
#| eval: true

list_of_fcts <- list(mean = mean, 
                     med = median, 
                     sd = sd)
list_of_fcts
str(list_of_fcts)
```

Let's explore lists a bit more...

::: {.callout-note collapse=TRUE}
## Review of Lists 

A **list** is a 1-dimensional data structure that has no restrictions on what
type of content is stored within it. 
A list is a "vector", but it is not an atomic vector - that is, it does not necessarily contain things that are all the same type.

```{r purrr-review4}
#| eval: true

mylist <- list(
    logicals = c(TRUE, TRUE, FALSE, FALSE, TRUE), 
    numeric_vec = 1:12, 
    third_thing = letters[1:2]
    )

mylist
```

List components may have names (or not), be homogeneous (or not), have the same length (or not). 

### Indexing

Indexing necessarily differs between R and Python, and since the list types are
also somewhat different (e.g. lists cannot be named in python), we will treat 
list indexing in the two languages separately.

::: {#fig-pepper layout-ncol=4}

![An unusual pepper shaker which we'll call `pepper`](images/week-8/pepper.jpg){fig-alt="A pepper shaker containing several individual paper packets of pepper"}

![When a list is indexed with single brackets, `pepper[1]`, the return value is always a list containing the selected element(s).](images/week-8/pepper-1.jpg){fig-alt="A pepper shaker containing a single individual paper packet of pepper."}

![When a list is indexed with double brackets, `pepper[[1]]`, the return value is the selected element.](images/week-8/pepper-2.jpg){fig-alt="A single individual paper packet of pepper, no longer contained within a pepper shaker."}

![To actually access the pepper, we have to use double indexing and index both the list object and the sub-object, as in `pepper[[1]][[1]]`.](images/week-8/pepper-3.jpg){fig-alt="A pile of pepper, free from any containment structures."}

The types of indexing are made most memorable with a fantastic visual example
from @r4ds, which I have repeated here.
:::

**There are 3 ways to index a list:**

- With single square brackets, just like we index atomic vectors. In this case, the return value is always a list.

```{r purrr-review5}
#| eval: true

mylist[1]

mylist[2]

mylist[c(T, F, T)]
```

- With double square brackets. In this case, the return value is the thing
inside the specified position in the list, but you also can only get one entry
in the main list at a time. You can also get things by name.

```{r purrr-review6}
#| eval: true

mylist[[1]]

mylist[["third_thing"]]
```

- Using `x$name`. This is equivalent to using `x[["name"]]`. Note that this does
not work on unnamed entries in the list. 

```{r purrr-review7}
#| eval: true

mylist$third_thing
```

To access the contents of a list object, we have to use double-indexing:

```{r purrr-review8}
#| eval: true

mylist[["third_thing"]][[1]]
```
:::

<!-- You can get a more thorough review of vectors and lists [from Jenny Bryan's purrr tutorial introduction](https://jennybc.github.io/purrr-tutorial/bk00_vectors-and-lists.html). -->

# Vectorized Functions

The functions we've used thus far (`round_to_one()`, `mean()`, `median()`, `sd()`) all have a specific quality---they are **vectorized**. Meaning, by default, these functions operate on *vectors* of values rather than a single value. This is a
feature that applies to atomic vectors (and we don't even think about it):

```{r abs}
#| echo: true  
#| eval: true

x <- seq(from = -4, to = 12, by = 0.5)

abs(x)
```

Notice how the `abs()` function found the absolute value of each element of `x` without having to loop over each element? In programming languages which don't have implicit support for vectorized computations, this above process might instead look like:

```{r abs-loop}
#| echo: true  
#| eval: true

x <- seq(from = -4, to = 12, by = 0.5)

for(i in 1:length(x)){
  x[i] <- abs(x[i])
}

x
```

:::: column-margin
::: callout-tip
# `for()`-loop refresher

If you would like a refresher on how for-loops work, I would recommend watching this video: [iteration with `for()`-loops (10 minutes)](https://www.youtube.com/watch?v=sxIX9lzPjDQ) and / or reading the [`for()`-loops](https://r4ds.had.co.nz/iteration.html#for-loops) section of *R for Data Science*.
:::
::::

For atomic vectors, this process of applying a function to each element is easy to do this by default; with a list, however, we need to be a bit more explicit (because everything that's passed into the function may not be the same type).

## Is every function vectorized?

Short answer, no. There exist occasions where you either can't or choose not to write a function that is vectorized. For example, if the function you've written makes use of `if()` statements, your function **cannot** operate on vectors. For example, take the `pos_neg_zero()` function below:

```{r if-function}
#| echo: true
#| eval: true

pos_neg_zero <- function(x){
  stopifnot(is.numeric(x))
  
  if(x > 0){
    return("Greater than 0!")
  } else if (x < 0){
    return("Less than 0!")
  } else {
    return("Equal to 0!")
      }
}
```

When I call the `pos_neg_zero()` function on a vector I receive an error:

```{r if-error}
#| echo: true
#| error: true
#| eval: true

x <- seq(from = -4, to = 4, by = 1)

pos_neg_zero(x)
```


This error means that the `if(x > 0)` condition can only be checked for something of length 1. So, to use this function on the vector `x`, you would need to apply the function individually to each element:

```{r loop-if}
#| echo: true
#| eval: true

result <- rep(NA, 
              length(x)
              )

for(i in 1:length(x)){
  result[i] <- pos_neg_zero(x[i])
}

result
```

:::: column-margin
::: callout-tip
# Vector initialization

Note that I initialized a `result` vector to store the results of calling the `pos_neg_zero()` function for the vector `x`. Similar to C++ and Java, R is an assembly language that requires objects be created **before** they are used, which is why I couldn't initialize `result` inside the `for()`-loop. Second, when I initialized the `result` vector I made it the size I wanted, rather than iteratively making it larger and larger (which makes operations incredibly slow).
:::
::::

Yes, I could have written a "better" function which used a vectorized function (e.g., `case-when()`) instead of a non-vectorized function (e.g., `if()`).

```{r case-when}
#| echo: true
#| eval: true

pos_neg_zero <- function(x){
  stopifnot(is.numeric(x))
  
  state <- case_when(x > 0 ~ "Greater than 0!", 
                     x < 0 ~ "Less than 0!", 
                     .default = "Equal to 0!")
  return(state)
}
```

When I call this function on the vector `x`, I no longer receive an error:

```{r no-error}
#| echo: true
#| error: true
#| eval: true

pos_neg_zero(x)
```

That's because the `case_when()` is **vectorized**!

## When can't you vectorize your function?

It is not always the case that we can write a "better" vectorized function. For example, let's suppose we are interested in finding the datatype of each column in a data frame. The `typeof()` function can tell us the datatype of a specific column in the `penguins` data frame:

```{r type-of}
#| echo: true
#| eval: true

typeof(penguins$species)
```

But, I want the datatype of **every** column in the `penguins` data frame! But applying the `typeof()` function to `penguins` returns the object structure of the `penguins` data frame, not the datatype of its columns.

```{r type-of-df}
#| echo: true
#| eval: true

typeof(penguins)
```

**What can you do?** Well, we could rely on our old CS 101 friend, the `for()`-loop:

```{r type-of-loop}
#| echo: true
#| eval: true

data_type <- rep(NA, 
                 length = ncol(penguins)
                 )

for(i in 1:ncol(penguins)){
  data_type[i] <- typeof(penguins[[i]])
}

## Getting a nicely formatted table!
tibble(column = names(penguins), 
       type = data_type) %>% 
  pivot_wider(names_from = column, 
              values_from = type) %>% 
  knitr::kable()
```

In R, `for()`-loops are not as important as they are in other languages because R is a functional programming language. In fact, we would prefer not to use `for()`-loops as they do not take advantage of R's functional programming. Take for example, our friend `across()` that we talked about at the beginning of this reading: 

```{r across-refresher}
#| eval: true

penguins %>% 
  summarise(
    across(
      .cols = everything(), 
      .fns = ~sum(is.na(.x))
      )
    ) %>% 
  knitr::kable()
```

The `across()` function looks like an "ordinary" function, it applies a specified function / functions to the columns specified. However, when you look at the source code for `across()` you will find a `for()`-loop:

```{r across-loop}
#| eval: false
for (j in seq_fns) {
  fn <- fns[[j]]
  out[[k]] <- fn(col, ...)
  k <- k + 1L
  }
```

This shows you that it is possible to include `for()`-loops in a function, and call that function instead of using the `for()`-loop directly.

# Functional Programming

Yes, it might take some time to get used to the idea of having a `for()`-loop built into a function, but it's worth the investment. In the rest of this coursework, you'll learn about and use the **purrr**[^1] package, which houses functions that eliminate the need for many common `for()`-loops.

[^1]: I fully support more R packages being cat themed.

The apply family of functions in base R (`apply()`, `lapply()`, `tapply()`, etc.) solve a similar problem, but **purrr** has more consistent behavior, which makes it easier to learn. We **will not** be working with the base functions in this course.

:::: column-margin
::: callout-note
# Comparison of base R and purrr

If you are interested, you can find a [side-by-side comparison in this lesson comparing base and purrr functions](https://jennybc.github.io/purrr-tutorial/bk01_base-functions.html).

<!-- ![](images/week-8/jenny_bryan.png){fig-alt="Hexagonal logo featuring the text 'EIKIFJB' in bold blue letters at the top. Below the text is an icon of a dishwasher with a wine glass and plate inside. A small red text in the lower right corner reads, 'Everything I know is from Jenny Bryan @sharlagelfand." fig-width=20%} -->
 
You can find a video on [iteration with the `apply()` family (7 minutes) here](https://www.youtube.com/watch?v=NadUAnlrh-M).
:::
::::

The goal of using purrr functions instead of `for()` loops is to allow you to break common list manipulation challenges into independent pieces:

-   How can you solve the problem for a single element of your object (e.g., vector, data frame, list)?

-   Once you've solved that problem, **purrr** takes care of generalizing your solution to every element in the object.

-   If you're working on a complex problem, how can you break the problem down into bite-sized pieces that each take one step closer to a solution? With purrr, you get lots of small pieces that you can compose together with the pipe.

I believe this structure makes it easier to solve complex problems, while also making your code easier to understand.

## Reading, Videos & Tutorial

### `r emo::ji("book")` [Required Reading: *R4DS* -- The `map()` Functions](https://r4ds.had.co.nz/iteration.html#the-map-functions)

::: {.callout-warning}
## Yes, you should be reading the first edition of R4DS, not the second edition.
:::

### `r emo::ji("book")` [Optional Reading: *Advanced R* - Functionals](https://adv-r.hadley.nz/functionals.html)

::: callout-note
# If you want to learn more about the concept of functionals! 
:::

### `r emo::ji("play button")` [Required Video: Iteration with the `map()` family (6 minutes)](https://www.youtube.com/watch?v=FPD3a6IHO6w)

::::: column-margin
::: callout-tip
# purr cheatsheet

Cheatsheet for purrr functions can be found [here](https://github.com/rstudio/cheatsheets/blob/master/purrr.pdf).
:::
:::::

### `r emo::ji("check")`: Check-in 8.2: Working with the `map()` Functions

1. Fill in the correct map functions to:

- Compute the mean of every column in mtcars.

```{r}
____(.x = mtcars, .f = mean)
```

- Determine the type of each column in the `nycflights` dataset (from the **openintro** package).

```{r}
____(.x = flights, .f = typeof)
```

- Compute the number of unique values in each column of the `penguins` dataset 
(from the **palmerpenguins** package).

```{r}
____(.x = penguins, .f = n_distinct)
```

- Determine whether or not each column in the `penguins` dataset is a factor.

```{r}
____(.x = penguins, .f = is.factor)
```

2. Last week we discussed the challenge of standardizing many columns in a data
frame. For example, If we wanted to standardize a numeric variable to be
centered at the mean and scaled by the standard deviation, we could use the
following function:

```{r}
#| eval: true

standardize <- function(vec) {
  stopifnot(is.numeric(vec))
  
  # Center with mean
  deviations <- vec - mean(vec, na.rm = TRUE)
  # Scale with standard deviation
  newdata <- deviations / sd(vec, na.rm = TRUE)
  
  return(newdata)
}
```

Why does the following return a vector of `NA`s?

```{r, eval = FALSE}
penguins |>
  mutate(
    body_mass_g = map_dbl(body_mass_g, standardize)
  )
```

(a) Because `body_mass_g` needs to be passed to `standardize()` as an argument
(b) Because `mutate()` operates on rows, so `map_dbl()` is supplying
`standardize()` with one row of `body_mass_g` at a time
(c) Because `map_dbl()` only takes one input, so you need to use `map2_dbl()`
instead
(d) Because there is no function named `standardize()`, so it cannot be applied
to the `body_mass_g` column
(e) `body_mass_g` is not a data frame so it is not a valid argument for
`map_dbl()`

3. Thus far in the course, we have used the `across()` function to apply the 
same function to multiple columns. For example, if we wanted to apply the 
`standardize()` function from above to every numeric column, we could use the 
following code:

```{r}
#| eval: true

penguins %>% 
  mutate(across(.cols = where(is.numeric), 
                .fns = standardize)
         )
```

**Which of the following map functions would return the [same]{.underline} output?** 

```{r}
## Option (a)
penguins |> 
  map_at(.at = c("bill_length_mm", 
                 "bill_depth_mm", 
                 "flipper_length_mm", 
                 "body_mass_g"), 
         .f = standardize)

## Option (b)
penguins |> 
  map_at(.at = c("bill_length_mm", 
                 "bill_depth_mm", 
                 "flipper_length_mm", 
                 "body_mass_g"), 
         .f = standardize) %>% 
  bind_cols()

## Option (c)
penguins |> 
  map_if(.p = is.numeric, .f = standardize) 

## Option (d)
penguins |> 
  map_if(.p = is.numeric, .f = standardize) %>% 
  bind_cols()
```

<!-- Suppose we would like to find the median of the measurement variables (`bill_length_mm`, `bill_depth_mm`, `flipper_length_mm`, `body_mass_g`) from the `penguins` dataset (from the **palmerpenguins** package). -->

<!-- Which of the following will produce a [**vector**]{.underline} of the median of every measurement variable? *Select all that apply!* -->

<!-- *(a)* -->

<!-- ```{r, eval = FALSE} -->
<!-- penguins |>  -->
<!--   select(bill_length_mm:body_mass_g) |>  -->
<!--   map(median, na.rm = TRUE) -->
<!-- ``` -->

<!-- *(b)* -->

<!-- ```{r, eval = FALSE} -->
<!-- penguins |>  -->
<!--   select(bill_length_mm:body_mass_g) |>  -->
<!--   map_dbl(median, na.rm = TRUE) -->
<!-- ``` -->

<!-- *(c)* -->

<!-- ```{r, eval = FALSE} -->
<!-- penguins |>  -->
<!--   select(bill_length_mm:body_mass_g) |>  -->
<!--   sapply(., median, na.rm = TRUE) -->
<!-- ``` -->

<!-- *(d)* -->

<!-- ```{r, eval = FALSE} -->
<!-- penguins |>  -->
<!--   select(bill_length_mm:body_mass_g) |>  -->
<!--   lapply(., function(x) median(x, na.rm = TRUE)) -->
<!-- ``` -->

